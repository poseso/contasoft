(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/app.bundle"],{

/***/ "./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./resources/assets/plugins/flaticon/flaticon.css":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--16-1!./node_modules/postcss-loader/src??ref--16-2!./resources/assets/plugins/flaticon/flaticon.css ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ./font/Flaticon.eot */ "./resources/assets/plugins/flaticon/font/Flaticon.eot"));
var ___CSS_LOADER_URL___1___ = getUrl(__webpack_require__(/*! ./font/Flaticon.eot */ "./resources/assets/plugins/flaticon/font/Flaticon.eot"), { hash: "?#iefix" });
var ___CSS_LOADER_URL___2___ = getUrl(__webpack_require__(/*! ./font/Flaticon.woff */ "./resources/assets/plugins/flaticon/font/Flaticon.woff"));
var ___CSS_LOADER_URL___3___ = getUrl(__webpack_require__(/*! ./font/Flaticon.ttf */ "./resources/assets/plugins/flaticon/font/Flaticon.ttf"));
var ___CSS_LOADER_URL___4___ = getUrl(__webpack_require__(/*! ./font/Flaticon.svg */ "./resources/assets/plugins/flaticon/font/Flaticon.svg"), { hash: "#Flaticon" });
// Module
exports.push([module.i, "  /*\r\n    Flaticon icon font: Flaticon\r\n    Creation date: 20/03/2017 20:02\r\n    */\r\n\r\n@font-face {\r\n  font-family: \"Flaticon\";\r\n  src: url(" + ___CSS_LOADER_URL___0___ + ");\r\n  src: url(" + ___CSS_LOADER_URL___1___ + ") format(\"embedded-opentype\"),\r\n       url(" + ___CSS_LOADER_URL___2___ + ") format(\"woff\"),\r\n       url(" + ___CSS_LOADER_URL___3___ + ") format(\"truetype\"),\r\n       url(" + ___CSS_LOADER_URL___4___ + ") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n@media screen and (-webkit-min-device-pixel-ratio:0) {\r\n  @font-face {\r\n    font-family: \"Flaticon\";\r\n    src: url(" + ___CSS_LOADER_URL___4___ + ") format(\"svg\");\r\n  }\r\n}\r\n\r\n[class^=\"flaticon-\"]:before, \r\n[class*=\" flaticon-\"]:before {\r\n    font-family: Flaticon;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-variant: normal;\r\n    line-height: 1;\r\n    text-decoration: inherit;\r\n    text-rendering: optimizeLegibility;\r\n    text-transform: none;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-font-smoothing: antialiased;\r\n    font-smoothing: antialiased;\r\n}  \r\n\r\n.flaticon-email-black-circular-button:before { content: \"\\f100\"; }\r\n.flaticon-map:before { content: \"\\f101\"; }\r\n.flaticon-alert-off:before { content: \"\\f102\"; }\r\n.flaticon-alert:before { content: \"\\f103\"; }\r\n.flaticon-computer:before { content: \"\\f104\"; }\r\n.flaticon-responsive:before { content: \"\\f105\"; }\r\n.flaticon-presentation:before { content: \"\\f106\"; }\r\n.flaticon-arrows:before { content: \"\\f107\"; }\r\n.flaticon-rocket:before { content: \"\\f108\"; }\r\n.flaticon-reply:before { content: \"\\f109\"; }\r\n.flaticon-gift:before { content: \"\\f10a\"; }\r\n.flaticon-confetti:before { content: \"\\f10b\"; }\r\n.flaticon-piggy-bank:before { content: \"\\f10c\"; }\r\n.flaticon-support:before { content: \"\\f10d\"; }\r\n.flaticon-delete:before { content: \"\\f10e\"; }\r\n.flaticon-eye:before { content: \"\\f10f\"; }\r\n.flaticon-multimedia:before { content: \"\\f110\"; }\r\n.flaticon-whatsapp:before { content: \"\\f111\"; }\r\n.flaticon-multimedia-2:before { content: \"\\f112\"; }\r\n.flaticon-email:before { content: \"\\f113\"; }\r\n.flaticon-presentation-1:before { content: \"\\f114\"; }\r\n.flaticon-trophy:before { content: \"\\f115\"; }\r\n.flaticon-psd:before { content: \"\\f116\"; }\r\n.flaticon-layer:before { content: \"\\f117\"; }\r\n.flaticon-doc:before { content: \"\\f118\"; }\r\n.flaticon-file:before { content: \"\\f119\"; }\r\n.flaticon-network:before { content: \"\\f11a\"; }\r\n.flaticon-bus-stop:before { content: \"\\f11b\"; }\r\n.flaticon-globe:before { content: \"\\f11c\"; }\r\n.flaticon-upload:before { content: \"\\f11d\"; }\r\n.flaticon-squares:before { content: \"\\f11e\"; }\r\n.flaticon-technology:before { content: \"\\f11f\"; }\r\n.flaticon-up-arrow:before { content: \"\\f120\"; }\r\n.flaticon-browser:before { content: \"\\f121\"; }\r\n.flaticon-speech-bubble:before { content: \"\\f122\"; }\r\n.flaticon-coins:before { content: \"\\f123\"; }\r\n.flaticon-open-box:before { content: \"\\f124\"; }\r\n.flaticon-speech-bubble-1:before { content: \"\\f125\"; }\r\n.flaticon-attachment:before { content: \"\\f126\"; }\r\n.flaticon-photo-camera:before { content: \"\\f127\"; }\r\n.flaticon-skype-logo:before { content: \"\\f128\"; }\r\n.flaticon-linkedin-logo:before { content: \"\\f129\"; }\r\n.flaticon-twitter-logo:before { content: \"\\f12a\"; }\r\n.flaticon-facebook-letter-logo:before { content: \"\\f12b\"; }\r\n.flaticon-calendar-with-a-clock-time-tools:before { content: \"\\f12c\"; }\r\n.flaticon-youtube:before { content: \"\\f12d\"; }\r\n.flaticon-add-circular-button:before { content: \"\\f12e\"; }\r\n.flaticon-more-v2:before { content: \"\\f12f\"; }\r\n.flaticon-search:before { content: \"\\f130\"; }\r\n.flaticon-search-magnifier-interface-symbol:before { content: \"\\f131\"; }\r\n.flaticon-questions-circular-button:before { content: \"\\f132\"; }\r\n.flaticon-refresh:before { content: \"\\f133\"; }\r\n.flaticon-logout:before { content: \"\\f134\"; }\r\n.flaticon-event-calendar-symbol:before { content: \"\\f135\"; }\r\n.flaticon-laptop:before { content: \"\\f136\"; }\r\n.flaticon-tool:before { content: \"\\f137\"; }\r\n.flaticon-graphic:before { content: \"\\f138\"; }\r\n.flaticon-symbol:before { content: \"\\f139\"; }\r\n.flaticon-graphic-1:before { content: \"\\f13a\"; }\r\n.flaticon-clock:before { content: \"\\f13b\"; }\r\n.flaticon-squares-1:before { content: \"\\f13c\"; }\r\n.flaticon-black:before { content: \"\\f13d\"; }\r\n.flaticon-book:before { content: \"\\f13e\"; }\r\n.flaticon-cogwheel:before { content: \"\\f13f\"; }\r\n.flaticon-exclamation:before { content: \"\\f140\"; }\r\n.flaticon-add-label-button:before { content: \"\\f141\"; }\r\n.flaticon-delete-1:before { content: \"\\f142\"; }\r\n.flaticon-interface:before { content: \"\\f143\"; }\r\n.flaticon-more:before { content: \"\\f144\"; }\r\n.flaticon-warning-sign:before { content: \"\\f145\"; }\r\n.flaticon-calendar:before { content: \"\\f146\"; }\r\n.flaticon-instagram-logo:before { content: \"\\f147\"; }\r\n.flaticon-linkedin:before { content: \"\\f148\"; }\r\n.flaticon-facebook-logo-button:before { content: \"\\f149\"; }\r\n.flaticon-twitter-logo-button:before { content: \"\\f14a\"; }\r\n.flaticon-cancel:before { content: \"\\f14b\"; }\r\n.flaticon-exclamation-square:before { content: \"\\f14c\"; }\r\n.flaticon-buildings:before { content: \"\\f14d\"; }\r\n.flaticon-danger:before { content: \"\\f14e\"; }\r\n.flaticon-technology-1:before { content: \"\\f14f\"; }\r\n.flaticon-letter-g:before { content: \"\\f150\"; }\r\n.flaticon-interface-1:before { content: \"\\f151\"; }\r\n.flaticon-circle:before { content: \"\\f152\"; }\r\n.flaticon-pin:before { content: \"\\f153\"; }\r\n.flaticon-close:before { content: \"\\f154\"; }\r\n.flaticon-clock-1:before { content: \"\\f155\"; }\r\n.flaticon-apps:before { content: \"\\f156\"; }\r\n.flaticon-user:before { content: \"\\f157\"; }\r\n.flaticon-menu-button:before { content: \"\\f158\"; }\r\n.flaticon-settings:before { content: \"\\f159\"; }\r\n.flaticon-home:before { content: \"\\f15a\"; }\r\n.flaticon-clock-2:before { content: \"\\f15b\"; }\r\n.flaticon-lifebuoy:before { content: \"\\f15c\"; }\r\n.flaticon-cogwheel-1:before { content: \"\\f15d\"; }\r\n.flaticon-paper-plane:before { content: \"\\f15e\"; }\r\n.flaticon-statistics:before { content: \"\\f15f\"; }\r\n.flaticon-diagram:before { content: \"\\f160\"; }\r\n.flaticon-line-graph:before { content: \"\\f161\"; }\r\n.flaticon-customer:before { content: \"\\f162\"; }\r\n.flaticon-visible:before { content: \"\\f163\"; }\r\n.flaticon-shopping-basket:before { content: \"\\f164\"; }\r\n.flaticon-price-tag:before { content: \"\\f165\"; }\r\n.flaticon-businesswoman:before { content: \"\\f166\"; }\r\n.flaticon-medal:before { content: \"\\f167\"; }\r\n.flaticon-like:before { content: \"\\f168\"; }\r\n.flaticon-edit:before { content: \"\\f169\"; }\r\n.flaticon-avatar:before { content: \"\\f16a\"; }\r\n.flaticon-download:before { content: \"\\f16b\"; }\r\n.flaticon-home-1:before { content: \"\\f16c\"; }\r\n.flaticon-mail:before { content: \"\\f16d\"; }\r\n.flaticon-mail-1:before { content: \"\\f16e\"; }\r\n.flaticon-warning:before { content: \"\\f16f\"; }\r\n.flaticon-cart:before { content: \"\\f170\"; }\r\n.flaticon-bag:before { content: \"\\f171\"; }\r\n.flaticon-pie-chart:before { content: \"\\f172\"; }\r\n.flaticon-graph:before { content: \"\\f173\"; }\r\n.flaticon-interface-2:before { content: \"\\f174\"; }\r\n.flaticon-chat:before { content: \"\\f175\"; }\r\n.flaticon-envelope:before { content: \"\\f176\"; }\r\n.flaticon-chat-1:before { content: \"\\f177\"; }\r\n.flaticon-interface-3:before { content: \"\\f178\"; }\r\n.flaticon-background:before { content: \"\\f179\"; }\r\n.flaticon-file-1:before { content: \"\\f17a\"; }\r\n.flaticon-interface-4:before { content: \"\\f17b\"; }\r\n.flaticon-multimedia-3:before { content: \"\\f17c\"; }\r\n.flaticon-list:before { content: \"\\f17d\"; }\r\n.flaticon-time:before { content: \"\\f17e\"; }\r\n.flaticon-profile:before { content: \"\\f17f\"; }\r\n.flaticon-imac:before { content: \"\\f180\"; }\r\n.flaticon-medical:before { content: \"\\f181\"; }\r\n.flaticon-music:before { content: \"\\f182\"; }\r\n.flaticon-plus:before { content: \"\\f183\"; }\r\n.flaticon-exclamation-1:before { content: \"\\f184\"; }\r\n.flaticon-info:before { content: \"\\f185\"; }\r\n.flaticon-menu-1:before { content: \"\\f186\"; }\r\n.flaticon-menu-2:before { content: \"\\f187\"; }\r\n.flaticon-share:before { content: \"\\f188\"; }\r\n.flaticon-interface-5:before { content: \"\\f189\"; }\r\n.flaticon-signs:before { content: \"\\f18a\"; }\r\n.flaticon-tabs:before { content: \"\\f18b\"; }\r\n.flaticon-multimedia-4:before { content: \"\\f18c\"; }\r\n.flaticon-upload-1:before { content: \"\\f18d\"; }\r\n.flaticon-web:before { content: \"\\f18e\"; }\r\n.flaticon-placeholder:before { content: \"\\f18f\"; }\r\n.flaticon-placeholder-1:before { content: \"\\f190\"; }\r\n.flaticon-layers:before { content: \"\\f191\"; }\r\n.flaticon-interface-6:before { content: \"\\f192\"; }\r\n.flaticon-interface-7:before { content: \"\\f193\"; }\r\n.flaticon-interface-8:before { content: \"\\f194\"; }\r\n.flaticon-tool-1:before { content: \"\\f195\"; }\r\n.flaticon-settings-1:before { content: \"\\f196\"; }\r\n.flaticon-alarm:before { content: \"\\f197\"; }\r\n.flaticon-search-1:before { content: \"\\f198\"; }\r\n.flaticon-time-1:before { content: \"\\f199\"; }\r\n.flaticon-stopwatch:before { content: \"\\f19a\"; }\r\n.flaticon-folder:before { content: \"\\f19b\"; }\r\n.flaticon-folder-1:before { content: \"\\f19c\"; }\r\n.flaticon-folder-2:before { content: \"\\f19d\"; }\r\n.flaticon-folder-3:before { content: \"\\f19e\"; }\r\n.flaticon-file-2:before { content: \"\\f19f\"; }\r\n.flaticon-list-1:before { content: \"\\f1a0\"; }\r\n.flaticon-list-2:before { content: \"\\f1a1\"; }\r\n.flaticon-calendar-1:before { content: \"\\f1a2\"; }\r\n.flaticon-time-2:before { content: \"\\f1a3\"; }\r\n.flaticon-interface-9:before { content: \"\\f1a4\"; }\r\n.flaticon-app:before { content: \"\\f1a5\"; }\r\n.flaticon-suitcase:before { content: \"\\f1a6\"; }\r\n.flaticon-grid-menu-v2:before { content: \"\\f1a7\"; }\r\n.flaticon-more-v6:before { content: \"\\f1a8\"; }\r\n.flaticon-more-v5:before { content: \"\\f1a9\"; }\r\n.flaticon-add:before { content: \"\\f1aa\"; }\r\n.flaticon-multimedia-5:before { content: \"\\f1ab\"; }\r\n.flaticon-more-v4:before { content: \"\\f1ac\"; }\r\n.flaticon-placeholder-2:before { content: \"\\f1ad\"; }\r\n.flaticon-map-location:before { content: \"\\f1ae\"; }\r\n.flaticon-users:before { content: \"\\f1af\"; }\r\n.flaticon-profile-1:before { content: \"\\f1b0\"; }\r\n.flaticon-lock:before { content: \"\\f1b1\"; }\r\n.flaticon-sound:before { content: \"\\f1b2\"; }\r\n.flaticon-star:before { content: \"\\f1b3\"; }\r\n.flaticon-placeholder-3:before { content: \"\\f1b4\"; }\r\n.flaticon-bell:before { content: \"\\f1b5\"; }\r\n.flaticon-paper-plane-1:before { content: \"\\f1b6\"; }\r\n.flaticon-users-1:before { content: \"\\f1b7\"; }\r\n.flaticon-more-1:before { content: \"\\f1b8\"; }\r\n.flaticon-up-arrow-1:before { content: \"\\f1b9\"; }\r\n.flaticon-grid-menu:before { content: \"\\f1ba\"; }\r\n.flaticon-alarm-1:before { content: \"\\f1bb\"; }\r\n.flaticon-earth-globe:before { content: \"\\f1bc\"; }\r\n.flaticon-alert-1:before { content: \"\\f1bd\"; }\r\n.flaticon-internet:before { content: \"\\f1be\"; }\r\n.flaticon-user-ok:before { content: \"\\f1bf\"; }\r\n.flaticon-user-add:before { content: \"\\f1c0\"; }\r\n.flaticon-user-settings:before { content: \"\\f1c1\"; }\r\n.flaticon-truck:before { content: \"\\f1c2\"; }\r\n.flaticon-analytics:before { content: \"\\f1c3\"; }\r\n.flaticon-notes:before { content: \"\\f1c4\"; }\r\n.flaticon-tea-cup:before { content: \"\\f1c5\"; }\r\n.flaticon-exclamation-2:before { content: \"\\f1c6\"; }\r\n.flaticon-technology-2:before { content: \"\\f1c7\"; }\r\n.flaticon-location:before { content: \"\\f1c8\"; }\r\n.flaticon-edit-1:before { content: \"\\f1c9\"; }\r\n.flaticon-home-2:before { content: \"\\f1ca\"; }\r\n.flaticon-dashboard:before { content: \"\\f1cb\"; }\r\n.flaticon-information:before { content: \"\\f1cc\"; }\r\n.flaticon-light:before { content: \"\\f1cd\"; }\r\n.flaticon-car:before { content: \"\\f1ce\"; }\r\n.flaticon-business:before { content: \"\\f1cf\"; }\r\n.flaticon-squares-2:before { content: \"\\f1d0\"; }\r\n.flaticon-signs-1:before { content: \"\\f1d1\"; }\r\n.flaticon-mark:before { content: \"\\f1d2\"; }\r\n.flaticon-squares-3:before { content: \"\\f1d3\"; }\r\n.flaticon-comment:before { content: \"\\f1d4\"; }\r\n.flaticon-shapes:before { content: \"\\f1d5\"; }\r\n.flaticon-clipboard:before { content: \"\\f1d6\"; }\r\n.flaticon-squares-4:before { content: \"\\f1d7\"; }\r\n.flaticon-delete-2:before { content: \"\\f1d8\"; }\r\n.flaticon-bell-1:before { content: \"\\f1d9\"; }\r\n.flaticon-list-3:before { content: \"\\f1da\"; }\r\n.flaticon-infinity:before { content: \"\\f1db\"; }\r\n.flaticon-chat-2:before { content: \"\\f1dc\"; }\r\n.flaticon-calendar-2:before { content: \"\\f1dd\"; }\r\n.flaticon-signs-2:before { content: \"\\f1de\"; }\r\n.flaticon-time-3:before { content: \"\\f1df\"; }\r\n.flaticon-calendar-3:before { content: \"\\f1e0\"; }\r\n.flaticon-interface-10:before { content: \"\\f1e1\"; }\r\n.flaticon-interface-11:before { content: \"\\f1e2\"; }\r\n.flaticon-folder-4:before { content: \"\\f1e3\"; }\r\n.flaticon-alert-2:before { content: \"\\f1e4\"; }\r\n.flaticon-cogwheel-2:before { content: \"\\f1e5\"; }\r\n.flaticon-graphic-2:before { content: \"\\f1e6\"; }\r\n.flaticon-rotate:before { content: \"\\f1e7\"; }\r\n.flaticon-feed:before { content: \"\\f1e8\"; }\r\n.flaticon-safe-shield-protection:before { content: \"\\f1e9\"; }\r\n.flaticon-security:before { content: \"\\f1ea\"; }\r\n.flaticon-download-1:before { content: \"\\f1eb\"; }\r\n.flaticon-pie-chart-1:before { content: \"\\f1ec\"; }\r\n.flaticon-notepad:before { content: \"\\f1ed\"; }", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./resources/assets/plugins/flaticon2/flaticon.css":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--16-1!./node_modules/postcss-loader/src??ref--16-2!./resources/assets/plugins/flaticon2/flaticon.css ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ./font/Flaticon2.eot */ "./resources/assets/plugins/flaticon2/font/Flaticon2.eot"));
var ___CSS_LOADER_URL___1___ = getUrl(__webpack_require__(/*! ./font/Flaticon2.eot */ "./resources/assets/plugins/flaticon2/font/Flaticon2.eot"), { hash: "?#iefix" });
var ___CSS_LOADER_URL___2___ = getUrl(__webpack_require__(/*! ./font/Flaticon2.woff */ "./resources/assets/plugins/flaticon2/font/Flaticon2.woff"));
var ___CSS_LOADER_URL___3___ = getUrl(__webpack_require__(/*! ./font/Flaticon2.ttf */ "./resources/assets/plugins/flaticon2/font/Flaticon2.ttf"));
var ___CSS_LOADER_URL___4___ = getUrl(__webpack_require__(/*! ./font/Flaticon2.svg */ "./resources/assets/plugins/flaticon2/font/Flaticon2.svg"), { hash: "#Flaticon2" });
// Module
exports.push([module.i, "  /*\r\n    Flaticon icon font: Flaticon\r\n    Creation date: 20/03/2017 20:02\r\n    */\r\n\r\n@font-face {\r\n  font-family: \"Flaticon2\";\r\n  src: url(" + ___CSS_LOADER_URL___0___ + ");\r\n  src: url(" + ___CSS_LOADER_URL___1___ + ") format(\"embedded-opentype\"),\r\n       url(" + ___CSS_LOADER_URL___2___ + ") format(\"woff\"),\r\n       url(" + ___CSS_LOADER_URL___3___ + ") format(\"truetype\"),\r\n       url(" + ___CSS_LOADER_URL___4___ + ") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n@media screen and (-webkit-min-device-pixel-ratio:0) {\r\n  @font-face {\r\n    font-family: \"Flaticon2\";\r\n    src: url(" + ___CSS_LOADER_URL___4___ + ") format(\"svg\");\r\n  }\r\n}\r\n\r\n[class^=\"flaticon2-\"]:before,\r\n[class*=\" flaticon2-\"]:before {\r\n    font-family: Flaticon2;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-variant: normal;\r\n    line-height: 1;\r\n    text-decoration: inherit;\r\n    text-rendering: optimizeLegibility;\r\n    text-transform: none;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-font-smoothing: antialiased;\r\n    font-smoothing: antialiased;\r\n}\r\n\r\n.flaticon2-notification:before { content: \"\\f100\"; }\r\n.flaticon2-settings:before { content: \"\\f101\"; }\r\n.flaticon2-search:before { content: \"\\f102\"; }\r\n.flaticon2-delete:before { content: \"\\f103\"; }\r\n.flaticon2-psd:before { content: \"\\f104\"; }\r\n.flaticon2-list:before { content: \"\\f105\"; }\r\n.flaticon2-box:before { content: \"\\f106\"; }\r\n.flaticon2-download:before { content: \"\\f107\"; }\r\n.flaticon2-shield:before { content: \"\\f108\"; }\r\n.flaticon2-paperplane:before { content: \"\\f109\"; }\r\n.flaticon2-avatar:before { content: \"\\f10a\"; }\r\n.flaticon2-bell:before { content: \"\\f10b\"; }\r\n.flaticon2-fax:before { content: \"\\f10c\"; }\r\n.flaticon2-chart2:before { content: \"\\f10d\"; }\r\n.flaticon2-supermarket:before { content: \"\\f10e\"; }\r\n.flaticon2-phone:before { content: \"\\f10f\"; }\r\n.flaticon2-envelope:before { content: \"\\f110\"; }\r\n.flaticon2-pin:before { content: \"\\f111\"; }\r\n.flaticon2-chat:before { content: \"\\f112\"; }\r\n.flaticon2-chart:before { content: \"\\f113\"; }\r\n.flaticon2-infographic:before { content: \"\\f114\"; }\r\n.flaticon2-grids:before { content: \"\\f115\"; }\r\n.flaticon2-menu:before { content: \"\\f116\"; }\r\n.flaticon2-plus:before { content: \"\\f117\"; }\r\n.flaticon2-list-1:before { content: \"\\f118\"; }\r\n.flaticon2-talk:before { content: \"\\f119\"; }\r\n.flaticon2-file:before { content: \"\\f11a\"; }\r\n.flaticon2-user:before { content: \"\\f11b\"; }\r\n.flaticon2-line-chart:before { content: \"\\f11c\"; }\r\n.flaticon2-percentage:before { content: \"\\f11d\"; }\r\n.flaticon2-menu-1:before { content: \"\\f11e\"; }\r\n.flaticon2-paper-plane:before { content: \"\\f11f\"; }\r\n.flaticon2-menu-2:before { content: \"\\f120\"; }\r\n.flaticon2-shopping-cart:before { content: \"\\f121\"; }\r\n.flaticon2-pie-chart:before { content: \"\\f122\"; }\r\n.flaticon2-box-1:before { content: \"\\f123\"; }\r\n.flaticon2-map:before { content: \"\\f124\"; }\r\n.flaticon2-favourite:before { content: \"\\f125\"; }\r\n.flaticon2-checking:before { content: \"\\f126\"; }\r\n.flaticon2-safe:before { content: \"\\f127\"; }\r\n.flaticon2-heart-rate-monitor:before { content: \"\\f128\"; }\r\n.flaticon2-layers:before { content: \"\\f129\"; }\r\n.flaticon2-delivery-package:before { content: \"\\f12a\"; }\r\n.flaticon2-sms:before { content: \"\\f12b\"; }\r\n.flaticon2-image-file:before { content: \"\\f12c\"; }\r\n.flaticon2-plus-1:before { content: \"\\f12d\"; }\r\n.flaticon2-send:before { content: \"\\f12e\"; }\r\n.flaticon2-graphic-design:before { content: \"\\f12f\"; }\r\n.flaticon2-cup:before { content: \"\\f130\"; }\r\n.flaticon2-website:before { content: \"\\f131\"; }\r\n.flaticon2-gift:before { content: \"\\f132\"; }\r\n.flaticon2-chronometer:before { content: \"\\f133\"; }\r\n.flaticon2-browser:before { content: \"\\f134\"; }\r\n.flaticon2-digital-marketing:before { content: \"\\f135\"; }\r\n.flaticon2-calendar:before { content: \"\\f136\"; }\r\n.flaticon2-calendar-1:before { content: \"\\f137\"; }\r\n.flaticon2-rocket:before { content: \"\\f138\"; }\r\n.flaticon2-analytics:before { content: \"\\f139\"; }\r\n.flaticon2-pie-chart-1:before { content: \"\\f13a\"; }\r\n.flaticon2-pie-chart-2:before { content: \"\\f13b\"; }\r\n.flaticon2-analytics-1:before { content: \"\\f13c\"; }\r\n.flaticon2-google-drive-file:before { content: \"\\f13d\"; }\r\n.flaticon2-pie-chart-3:before { content: \"\\f13e\"; }\r\n.flaticon2-poll-symbol:before { content: \"\\f13f\"; }\r\n.flaticon2-gear:before { content: \"\\f140\"; }\r\n.flaticon2-magnifier-tool:before { content: \"\\f141\"; }\r\n.flaticon2-add:before { content: \"\\f142\"; }\r\n.flaticon2-cube:before { content: \"\\f143\"; }\r\n.flaticon2-gift-1:before { content: \"\\f144\"; }\r\n.flaticon2-list-2:before { content: \"\\f145\"; }\r\n.flaticon2-shopping-cart-1:before { content: \"\\f146\"; }\r\n.flaticon2-calendar-2:before { content: \"\\f147\"; }\r\n.flaticon2-laptop:before { content: \"\\f148\"; }\r\n.flaticon2-cube-1:before { content: \"\\f149\"; }\r\n.flaticon2-layers-1:before { content: \"\\f14a\"; }\r\n.flaticon2-chat-1:before { content: \"\\f14b\"; }\r\n.flaticon2-copy:before { content: \"\\f14c\"; }\r\n.flaticon2-paper:before { content: \"\\f14d\"; }\r\n.flaticon2-hospital:before { content: \"\\f14e\"; }\r\n.flaticon2-calendar-3:before { content: \"\\f14f\"; }\r\n.flaticon2-speaker:before { content: \"\\f150\"; }\r\n.flaticon2-pie-chart-4:before { content: \"\\f151\"; }\r\n.flaticon2-schedule:before { content: \"\\f152\"; }\r\n.flaticon2-expand:before { content: \"\\f153\"; }\r\n.flaticon2-menu-3:before { content: \"\\f154\"; }\r\n.flaticon2-download-1:before { content: \"\\f155\"; }\r\n.flaticon2-help:before { content: \"\\f156\"; }\r\n.flaticon2-list-3:before { content: \"\\f157\"; }\r\n.flaticon2-notepad:before { content: \"\\f158\"; }\r\n.flaticon2-graph:before { content: \"\\f159\"; }\r\n.flaticon2-browser-1:before { content: \"\\f15a\"; }\r\n.flaticon2-photograph:before { content: \"\\f15b\"; }\r\n.flaticon2-browser-2:before { content: \"\\f15c\"; }\r\n.flaticon2-hourglass:before { content: \"\\f15d\"; }\r\n.flaticon2-mail:before { content: \"\\f15e\"; }\r\n.flaticon2-cardiogram:before { content: \"\\f15f\"; }\r\n.flaticon2-document:before { content: \"\\f160\"; }\r\n.flaticon2-contract:before { content: \"\\f161\"; }\r\n.flaticon2-graph-1:before { content: \"\\f162\"; }\r\n.flaticon2-graphic:before { content: \"\\f163\"; }\r\n.flaticon2-position:before { content: \"\\f164\"; }\r\n.flaticon2-soft-icons:before { content: \"\\f165\"; }\r\n.flaticon2-circle-vol-2:before { content: \"\\f166\"; }\r\n.flaticon2-rocket-1:before { content: \"\\f167\"; }\r\n.flaticon2-lorry:before { content: \"\\f168\"; }\r\n.flaticon2-cd:before { content: \"\\f169\"; }\r\n.flaticon2-file-1:before { content: \"\\f16a\"; }\r\n.flaticon2-reload:before { content: \"\\f16b\"; }\r\n.flaticon2-placeholder:before { content: \"\\f16c\"; }\r\n.flaticon2-refresh:before { content: \"\\f16d\"; }\r\n.flaticon2-medical-records:before { content: \"\\f16e\"; }\r\n.flaticon2-rectangular:before { content: \"\\f16f\"; }\r\n.flaticon2-medical-records-1:before { content: \"\\f170\"; }\r\n.flaticon2-indent-dots:before { content: \"\\f171\"; }\r\n.flaticon2-search-1:before { content: \"\\f172\"; }\r\n.flaticon2-edit:before { content: \"\\f173\"; }\r\n.flaticon2-new-email:before { content: \"\\f174\"; }\r\n.flaticon2-calendar-4:before { content: \"\\f175\"; }\r\n.flaticon2-console:before { content: \"\\f176\"; }\r\n.flaticon2-open-text-book:before { content: \"\\f177\"; }\r\n.flaticon2-download-2:before { content: \"\\f178\"; }\r\n.flaticon2-zig-zag-line-sign:before { content: \"\\f179\"; }\r\n.flaticon2-tools-and-utensils:before { content: \"\\f17a\"; }\r\n.flaticon2-crisp-icons:before { content: \"\\f17b\"; }\r\n.flaticon2-trash:before { content: \"\\f17c\"; }\r\n.flaticon2-lock:before { content: \"\\f17d\"; }\r\n.flaticon2-bell-1:before { content: \"\\f17e\"; }\r\n.flaticon2-setup:before { content: \"\\f17f\"; }\r\n.flaticon2-menu-4:before { content: \"\\f180\"; }\r\n.flaticon2-architecture-and-city:before { content: \"\\f181\"; }\r\n.flaticon2-shelter:before { content: \"\\f182\"; }\r\n.flaticon2-add-1:before { content: \"\\f183\"; }\r\n.flaticon2-checkmark:before { content: \"\\f184\"; }\r\n.flaticon2-circular-arrow:before { content: \"\\f185\"; }\r\n.flaticon2-user-outline-symbol:before { content: \"\\f186\"; }\r\n.flaticon2-rhombus:before { content: \"\\f187\"; }\r\n.flaticon2-crisp-icons-1:before { content: \"\\f188\"; }\r\n.flaticon2-soft-icons-1:before { content: \"\\f189\"; }\r\n.flaticon2-hexagonal:before { content: \"\\f18a\"; }\r\n.flaticon2-time:before { content: \"\\f18b\"; }\r\n.flaticon2-contrast:before { content: \"\\f18c\"; }\r\n.flaticon2-telegram-logo:before { content: \"\\f18d\"; }\r\n.flaticon2-hangouts-logo:before { content: \"\\f18e\"; }\r\n.flaticon2-analytics-2:before { content: \"\\f18f\"; }\r\n.flaticon2-wifi:before { content: \"\\f190\"; }\r\n.flaticon2-protected:before { content: \"\\f191\"; }\r\n.flaticon2-drop:before { content: \"\\f192\"; }\r\n.flaticon2-mail-1:before { content: \"\\f193\"; }\r\n.flaticon2-delivery-truck:before { content: \"\\f194\"; }\r\n.flaticon2-writing:before { content: \"\\f195\"; }\r\n.flaticon2-calendar-5:before { content: \"\\f196\"; }\r\n.flaticon2-protection:before { content: \"\\f197\"; }\r\n.flaticon2-calendar-6:before { content: \"\\f198\"; }\r\n.flaticon2-calendar-7:before { content: \"\\f199\"; }\r\n.flaticon2-calendar-8:before { content: \"\\f19a\"; }\r\n.flaticon2-bell-2:before { content: \"\\f19b\"; }\r\n.flaticon2-hourglass-1:before { content: \"\\f19c\"; }\r\n.flaticon2-next:before { content: \"\\f19d\"; }\r\n.flaticon2-chat-2:before { content: \"\\f19e\"; }\r\n.flaticon2-correct:before { content: \"\\f19f\"; }\r\n.flaticon2-photo-camera:before { content: \"\\f1a0\"; }\r\n.flaticon2-fast-next:before { content: \"\\f1a1\"; }\r\n.flaticon2-fast-back:before { content: \"\\f1a2\"; }\r\n.flaticon2-down:before { content: \"\\f1a3\"; }\r\n.flaticon2-back:before { content: \"\\f1a4\"; }\r\n.flaticon2-up:before { content: \"\\f1a5\"; }\r\n.flaticon2-arrow-down:before { content: \"\\f1a6\"; }\r\n.flaticon2-arrow-up:before { content: \"\\f1a7\"; }\r\n.flaticon2-accept:before { content: \"\\f1a8\"; }\r\n.flaticon2-sort:before { content: \"\\f1a9\"; }\r\n.flaticon2-arrow:before { content: \"\\f1aa\"; }\r\n.flaticon2-back-1:before { content: \"\\f1ab\"; }\r\n.flaticon2-add-square:before { content: \"\\f1ac\"; }\r\n.flaticon2-quotation-mark:before { content: \"\\f1ad\"; }\r\n.flaticon2-clip-symbol:before { content: \"\\f1ae\"; }\r\n.flaticon2-check-mark:before { content: \"\\f1af\"; }\r\n.flaticon2-folder:before { content: \"\\f1b0\"; }\r\n.flaticon2-cancel-music:before { content: \"\\f1b1\"; }\r\n.flaticon2-cross:before { content: \"\\f1b2\"; }\r\n.flaticon2-pen:before { content: \"\\f1b3\"; }\r\n.flaticon2-email:before { content: \"\\f1b4\"; }\r\n.flaticon2-graph-2:before { content: \"\\f1b5\"; }\r\n.flaticon2-open-box:before { content: \"\\f1b6\"; }\r\n.flaticon2-files-and-folders:before { content: \"\\f1b7\"; }\r\n.flaticon2-ui:before { content: \"\\f1b8\"; }\r\n.flaticon2-sheet:before { content: \"\\f1b9\"; }\r\n.flaticon2-dashboard:before { content: \"\\f1ba\"; }\r\n.flaticon2-user-1:before { content: \"\\f1bb\"; }\r\n.flaticon2-group:before { content: \"\\f1bc\"; }\r\n.flaticon2-black-back-closed-envelope-shape:before { content: \"\\f1bd\"; }\r\n.flaticon2-left-arrow:before { content: \"\\f1be\"; }\r\n.flaticon2-sort-alphabetically:before { content: \"\\f1bf\"; }\r\n.flaticon2-sort-down:before { content: \"\\f1c0\"; }\r\n.flaticon2-rubbish-bin:before { content: \"\\f1c1\"; }\r\n.flaticon2-rubbish-bin-delete-button:before { content: \"\\f1c2\"; }\r\n.flaticon2-calendar-9:before { content: \"\\f1c3\"; }\r\n.flaticon2-tag:before { content: \"\\f1c4\"; }\r\n.flaticon2-refresh-button:before { content: \"\\f1c5\"; }\r\n.flaticon2-refresh-arrow:before { content: \"\\f1c6\"; }\r\n.flaticon2-reload-1:before { content: \"\\f1c7\"; }\r\n.flaticon2-refresh-1:before { content: \"\\f1c8\"; }\r\n.flaticon2-left-arrow-1:before { content: \"\\f1c9\"; }\r\n.flaticon2-reply:before { content: \"\\f1ca\"; }\r\n.flaticon2-reply-1:before { content: \"\\f1cb\"; }\r\n.flaticon2-printer:before { content: \"\\f1cc\"; }\r\n.flaticon2-print:before { content: \"\\f1cd\"; }\r\n.flaticon2-shrink:before { content: \"\\f1ce\"; }\r\n.flaticon2-resize:before { content: \"\\f1cf\"; }\r\n.flaticon2-arrow-1:before { content: \"\\f1d0\"; }\r\n.flaticon2-size:before { content: \"\\f1d1\"; }\r\n.flaticon2-arrow-2:before { content: \"\\f1d2\"; }\r\n.flaticon2-cancel:before { content: \"\\f1d3\"; }\r\n.flaticon2-exclamation:before { content: \"\\f1d4\"; }\r\n.flaticon2-line:before { content: \"\\f1d5\"; }\r\n.flaticon2-warning:before { content: \"\\f1d6\"; }\r\n.flaticon2-information:before { content: \"\\f1d7\"; }\r\n.flaticon2-layers-2:before { content: \"\\f1d8\"; }\r\n.flaticon2-file-2:before { content: \"\\f1d9\"; }\r\n.flaticon2-bell-3:before { content: \"\\f1da\"; }\r\n.flaticon2-bell-4:before { content: \"\\f1db\"; }\r\n.flaticon2-bell-5:before { content: \"\\f1dc\"; }\r\n.flaticon2-bell-alarm-symbol:before { content: \"\\f1dd\"; }\r\n.flaticon2-world:before { content: \"\\f1de\"; }\r\n.flaticon2-graphic-1:before { content: \"\\f1df\"; }\r\n.flaticon2-send-1:before { content: \"\\f1e0\"; }\r\n.flaticon2-location:before { content: \"\\f1e1\"; }\r\n.flaticon2-pin-1:before { content: \"\\f1e2\"; }\r\n.flaticon2-start-up:before { content: \"\\f1e3\"; }\r\n.flaticon2-right-arrow:before { content: \"\\f1e4\"; }\r\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./resources/assets/plugins/line-awesome/css/line-awesome.css":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--16-1!./node_modules/postcss-loader/src??ref--16-2!./resources/assets/plugins/line-awesome/css/line-awesome.css ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ../fonts/line-awesome.eot?v=1.1. */ "./resources/assets/plugins/line-awesome/fonts/line-awesome.eot?v=1.1."));
var ___CSS_LOADER_URL___1___ = getUrl(__webpack_require__(/*! ../fonts/line-awesome.eot??v=1.1. */ "./resources/assets/plugins/line-awesome/fonts/line-awesome.eot?"), { hash: "#iefix" });
var ___CSS_LOADER_URL___2___ = getUrl(__webpack_require__(/*! ../fonts/line-awesome.woff2?v=1.1. */ "./resources/assets/plugins/line-awesome/fonts/line-awesome.woff2?v=1.1."));
var ___CSS_LOADER_URL___3___ = getUrl(__webpack_require__(/*! ../fonts/line-awesome.woff?v=1.1. */ "./resources/assets/plugins/line-awesome/fonts/line-awesome.woff?v=1.1."));
var ___CSS_LOADER_URL___4___ = getUrl(__webpack_require__(/*! ../fonts/line-awesome.ttf?v=1.1. */ "./resources/assets/plugins/line-awesome/fonts/line-awesome.ttf?v=1.1."));
var ___CSS_LOADER_URL___5___ = getUrl(__webpack_require__(/*! ../fonts/line-awesome.svg?v=1.1. */ "./resources/assets/plugins/line-awesome/fonts/line-awesome.svg?v=1.1."), { hash: "#fa" });
// Module
exports.push([module.i, "/*!\r\n *  Line Awesome 1.1.0 by @icons_8 - https://icons8.com/line-awesome\r\n *  License - https://icons8.com/good-boy-license/ (Font: SIL OFL 1.1, CSS: MIT License)\r\n *\r\n * Made with love by Icons8 [ https://icons8.com/ ] using FontCustom [ https://github.com/FontCustom/fontcustom ]\r\n *\r\n * Contacts:\r\n *    [ https://icons8.com/contact ]\r\n *\r\n * Follow Icon8 on\r\n *    Twitter [ https://twitter.com/icons_8 ]\r\n *    Facebook [ https://www.facebook.com/Icons8 ]\r\n *    Google+ [ https://plus.google.com/+Icons8 ]\r\n *    GitHub [ https://github.com/icons8 ]\r\n */\r\n\r\n@font-face {\r\n  font-family: \"LineAwesome\";\r\n  src: url(" + ___CSS_LOADER_URL___0___ + ");\r\n  src: url(" + ___CSS_LOADER_URL___1___ + ") format(\"embedded-opentype\"),\r\n       url(" + ___CSS_LOADER_URL___2___ + ") format(\"woff2\"),\r\n       url(" + ___CSS_LOADER_URL___3___ + ") format(\"woff\"),\r\n       url(" + ___CSS_LOADER_URL___4___ + ") format(\"truetype\"),\r\n       url(" + ___CSS_LOADER_URL___5___ + ") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n@media screen and (-webkit-min-device-pixel-ratio:0) {\r\n  @font-face {\r\n    font-family: \"LineAwesome\";\r\n    src: url(" + ___CSS_LOADER_URL___5___ + ") format(\"svg\");\r\n  }\r\n}\r\n\r\n/* Thanks to http://fontawesome.io @fontawesome and @davegandy */\r\n.la {\r\n    display: inline-block;\r\n    font: normal normal normal 16px/1 \"LineAwesome\";\r\n    font-size: inherit;\r\n    text-decoration: inherit;\r\n    text-rendering: optimizeLegibility;\r\n    text-transform: none;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-font-smoothing: antialiased;\r\n    font-smoothing: antialiased;\r\n}\r\n/* makes the font 33% larger relative to the icon container */\r\n.la-lg {\r\n    font-size: 1.33333333em;\r\n    line-height: 0.75em;\r\n    vertical-align: -15%;\r\n}\r\n.la-2x {\r\n    font-size: 2em;\r\n}\r\n.la-3x {\r\n    font-size: 3em;\r\n}\r\n.la-4x {\r\n    font-size: 4em;\r\n}\r\n.la-5x {\r\n    font-size: 5em;\r\n}\r\n.la-fw {\r\n    width: 1.28571429em;\r\n    text-align: center;\r\n}\r\n.la-ul {\r\n    padding-left: 0;\r\n    margin-left: 2.14285714em;\r\n    list-style-type: none;\r\n}\r\n.la-ul > li {\r\n    position: relative;\r\n}\r\n.la-li {\r\n    position: absolute;\r\n    left: -2.14285714em;\r\n    width: 2.14285714em;\r\n    top: 0.14285714em;\r\n    text-align: center;\r\n}\r\n.la-li.la-lg {\r\n    left: -1.85714286em;\r\n}\r\n.la-border {\r\n    padding: .2em .25em .15em;\r\n    border: solid 0.08em #eeeeee;\r\n    border-radius: .1em;\r\n}\r\n.pull-right {\r\n    float: right;\r\n}\r\n.pull-left {\r\n    float: left;\r\n}\r\n.li.pull-left {\r\n    margin-right: .3em;\r\n}\r\n.li.pull-right {\r\n    margin-left: .3em;\r\n}\r\n.la-spin {\r\n    -webkit-animation: fa-spin 2s infinite linear;\r\n    animation: fa-spin 2s infinite linear;\r\n}\r\n@-webkit-keyframes fa-spin {\r\n    0% {\r\n        -webkit-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        -webkit-transform: rotate(359deg);\r\n        transform: rotate(359deg);\r\n    }\r\n}\r\n@keyframes fa-spin {\r\n    0% {\r\n        -webkit-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        -webkit-transform: rotate(359deg);\r\n        transform: rotate(359deg);\r\n    }\r\n}\r\n.la-rotate-90 {\r\n    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);\r\n    -webkit-transform: rotate(90deg);\r\n    transform: rotate(90deg);\r\n}\r\n.la-rotate-180 {\r\n    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);\r\n    -webkit-transform: rotate(180deg);\r\n    transform: rotate(180deg);\r\n}\r\n.la-rotate-270 {\r\n    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);\r\n    -webkit-transform: rotate(270deg);\r\n    transform: rotate(270deg);\r\n}\r\n.la-flip-horizontal {\r\n    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);\r\n    -webkit-transform: scale(-1, 1);\r\n    transform: scale(-1, 1);\r\n}\r\n.la-flip-vertical {\r\n    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);\r\n    -webkit-transform: scale(1, -1);\r\n    transform: scale(1, -1);\r\n}\r\n:root .la-rotate-90,\r\n:root .la-rotate-180,\r\n:root .la-rotate-270,\r\n:root .la-flip-horizontal,\r\n:root .la-flip-vertical {\r\n    -webkit-filter: none;\r\n            filter: none;\r\n}\r\n.la-stack {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 2em;\r\n    height: 2em;\r\n    line-height: 2em;\r\n    vertical-align: middle;\r\n}\r\n.la-stack-1x,\r\n.la-stack-2x {\r\n    position: absolute;\r\n    left: 0;\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n.la-stack-1x {\r\n    line-height: inherit;\r\n}\r\n.la-stack-2x {\r\n    font-size: 2em;\r\n}\r\n.la-inverse {\r\n    color: #ffffff;\r\n}\r\n/* Thanks to http://fontawesome.io @fontawesome and @davegandy */\r\n\r\n.la-500px:before { content: \"\\f100\"; }\r\n.la-adjust:before { content: \"\\f101\"; }\r\n.la-adn:before { content: \"\\f102\"; }\r\n.la-align-center:before { content: \"\\f103\"; }\r\n.la-align-justify:before { content: \"\\f104\"; }\r\n.la-align-left:before { content: \"\\f105\"; }\r\n.la-align-right:before { content: \"\\f106\"; }\r\n.la-amazon:before { content: \"\\f107\"; }\r\n.la-ambulance:before { content: \"\\f108\"; }\r\n.la-anchor:before { content: \"\\f109\"; }\r\n.la-android:before { content: \"\\f10a\"; }\r\n.la-angellist:before { content: \"\\f10b\"; }\r\n.la-angle-double-down:before { content: \"\\f10c\"; }\r\n.la-angle-double-left:before { content: \"\\f10d\"; }\r\n.la-angle-double-right:before { content: \"\\f10e\"; }\r\n.la-angle-double-up:before { content: \"\\f10f\"; }\r\n.la-angle-down:before { content: \"\\f110\"; }\r\n.la-angle-left:before { content: \"\\f111\"; }\r\n.la-angle-right:before { content: \"\\f112\"; }\r\n.la-angle-up:before { content: \"\\f113\"; }\r\n.la-apple:before { content: \"\\f114\"; }\r\n.la-archive:before { content: \"\\f115\"; }\r\n.la-area-chart:before { content: \"\\f116\"; }\r\n.la-arrow-circle-down:before { content: \"\\f117\"; }\r\n.la-arrow-circle-left:before { content: \"\\f118\"; }\r\n.la-arrow-circle-o-down:before { content: \"\\f119\"; }\r\n.la-arrow-circle-o-left:before { content: \"\\f11a\"; }\r\n.la-arrow-circle-o-right:before { content: \"\\f11b\"; }\r\n.la-arrow-circle-o-up:before { content: \"\\f11c\"; }\r\n.la-arrow-circle-right:before { content: \"\\f11d\"; }\r\n.la-arrow-circle-up:before { content: \"\\f11e\"; }\r\n.la-arrow-down:before { content: \"\\f11f\"; }\r\n.la-arrow-left:before { content: \"\\f120\"; }\r\n.la-arrow-right:before { content: \"\\f121\"; }\r\n.la-arrow-up:before { content: \"\\f122\"; }\r\n.la-arrows:before { content: \"\\f123\"; }\r\n.la-arrows-alt:before { content: \"\\f124\"; }\r\n.la-arrows-h:before { content: \"\\f125\"; }\r\n.la-arrows-v:before { content: \"\\f126\"; }\r\n.la-asterisk:before { content: \"\\f127\"; }\r\n.la-at:before { content: \"\\f128\"; }\r\n.la-automobile:before { content: \"\\f129\"; }\r\n.la-backward:before { content: \"\\f12a\"; }\r\n.la-balance-scale:before { content: \"\\f12b\"; }\r\n.la-ban:before { content: \"\\f12c\"; }\r\n.la-bank:before { content: \"\\f12d\"; }\r\n.la-bar-chart:before { content: \"\\f12e\"; }\r\n.la-bar-chart-o:before { content: \"\\f12f\"; }\r\n.la-barcode:before { content: \"\\f130\"; }\r\n.la-bars:before { content: \"\\f131\"; }\r\n.la-battery-0:before { content: \"\\f132\"; }\r\n.la-battery-1:before { content: \"\\f133\"; }\r\n.la-battery-2:before { content: \"\\f134\"; }\r\n.la-battery-3:before { content: \"\\f135\"; }\r\n.la-battery-4:before { content: \"\\f136\"; }\r\n.la-battery-empty:before { content: \"\\f137\"; }\r\n.la-battery-full:before { content: \"\\f138\"; }\r\n.la-battery-half:before { content: \"\\f139\"; }\r\n.la-battery-quarter:before { content: \"\\f13a\"; }\r\n.la-battery-three-quarters:before { content: \"\\f13b\"; }\r\n.la-bed:before { content: \"\\f13c\"; }\r\n.la-beer:before { content: \"\\f13d\"; }\r\n.la-behance:before { content: \"\\f13e\"; }\r\n.la-behance-square:before { content: \"\\f13f\"; }\r\n.la-bell:before { content: \"\\f140\"; }\r\n.la-bell-o:before { content: \"\\f141\"; }\r\n.la-bell-slash:before { content: \"\\f142\"; }\r\n.la-bell-slash-o:before { content: \"\\f143\"; }\r\n.la-bicycle:before { content: \"\\f144\"; }\r\n.la-binoculars:before { content: \"\\f145\"; }\r\n.la-birthday-cake:before { content: \"\\f146\"; }\r\n.la-bitbucket:before { content: \"\\f147\"; }\r\n.la-bitbucket-square:before { content: \"\\f148\"; }\r\n.la-bitcoin:before { content: \"\\f149\"; }\r\n.la-black-tie:before { content: \"\\f14a\"; }\r\n.la-bold:before { content: \"\\f14b\"; }\r\n.la-bolt:before { content: \"\\f14c\"; }\r\n.la-bomb:before { content: \"\\f14d\"; }\r\n.la-book:before { content: \"\\f14e\"; }\r\n.la-bookmark:before { content: \"\\f14f\"; }\r\n.la-bookmark-o:before { content: \"\\f150\"; }\r\n.la-briefcase:before { content: \"\\f151\"; }\r\n.la-btc:before { content: \"\\f152\"; }\r\n.la-bug:before { content: \"\\f153\"; }\r\n.la-building:before { content: \"\\f154\"; }\r\n.la-building-o:before { content: \"\\f155\"; }\r\n.la-bullhorn:before { content: \"\\f156\"; }\r\n.la-bullseye:before { content: \"\\f157\"; }\r\n.la-bus:before { content: \"\\f158\"; }\r\n.la-buysellads:before { content: \"\\f159\"; }\r\n.la-cab:before { content: \"\\f15a\"; }\r\n.la-calculator:before { content: \"\\f15b\"; }\r\n.la-calendar:before { content: \"\\f15c\"; }\r\n.la-calendar-check-o:before { content: \"\\f15d\"; }\r\n.la-calendar-minus-o:before { content: \"\\f15e\"; }\r\n.la-calendar-o:before { content: \"\\f15f\"; }\r\n.la-calendar-plus-o:before { content: \"\\f160\"; }\r\n.la-calendar-times-o:before { content: \"\\f161\"; }\r\n.la-camera:before { content: \"\\f162\"; }\r\n.la-camera-retro:before { content: \"\\f163\"; }\r\n.la-car:before { content: \"\\f164\"; }\r\n.la-caret-down:before { content: \"\\f165\"; }\r\n.la-caret-left:before { content: \"\\f166\"; }\r\n.la-caret-right:before { content: \"\\f167\"; }\r\n.la-caret-square-o-down:before, .la-toggle-down:before { content: \"\\f168\"; }\r\n.la-caret-square-o-left:before, .la-toggle-left:before { content: \"\\f169\"; }\r\n.la-caret-square-o-right:before, .la-toggle-right:before { content: \"\\f16a\"; }\r\n.la-caret-square-o-up:before, .la-toggle-up:before { content: \"\\f16b\"; }\r\n.la-caret-up:before { content: \"\\f16c\"; }\r\n.la-cart-arrow-down:before { content: \"\\f16d\"; }\r\n.la-cart-plus:before { content: \"\\f16e\"; }\r\n.la-cc:before { content: \"\\f16f\"; }\r\n.la-cc-amex:before { content: \"\\f170\"; }\r\n.la-cc-diners-club:before { content: \"\\f171\"; }\r\n.la-cc-discover:before { content: \"\\f172\"; }\r\n.la-cc-jcb:before { content: \"\\f173\"; }\r\n.la-cc-mastercard:before { content: \"\\f174\"; }\r\n.la-cc-paypal:before { content: \"\\f175\"; }\r\n.la-cc-stripe:before { content: \"\\f176\"; }\r\n.la-cc-visa:before { content: \"\\f177\"; }\r\n.la-certificate:before { content: \"\\f178\"; }\r\n.la-chain:before { content: \"\\f179\"; }\r\n.la-chain-broken:before { content: \"\\f17a\"; }\r\n.la-check:before { content: \"\\f17b\"; }\r\n.la-check-circle:before { content: \"\\f17c\"; }\r\n.la-check-circle-o:before { content: \"\\f17d\"; }\r\n.la-check-square:before { content: \"\\f17e\"; }\r\n.la-check-square-o:before { content: \"\\f17f\"; }\r\n.la-chevron-circle-down:before { content: \"\\f180\"; }\r\n.la-chevron-circle-left:before { content: \"\\f181\"; }\r\n.la-chevron-circle-right:before { content: \"\\f182\"; }\r\n.la-chevron-circle-up:before { content: \"\\f183\"; }\r\n.la-chevron-down:before { content: \"\\f184\"; }\r\n.la-chevron-left:before { content: \"\\f185\"; }\r\n.la-chevron-right:before { content: \"\\f186\"; }\r\n.la-chevron-up:before { content: \"\\f187\"; }\r\n.la-child:before { content: \"\\f188\"; }\r\n.la-chrome:before { content: \"\\f189\"; }\r\n.la-circle:before { content: \"\\f18a\"; }\r\n.la-circle-o:before { content: \"\\f18b\"; }\r\n.la-circle-o-notch:before { content: \"\\f18c\"; }\r\n.la-circle-thin:before { content: \"\\f18d\"; }\r\n.la-clipboard:before { content: \"\\f18e\"; }\r\n.la-clock-o:before { content: \"\\f18f\"; }\r\n.la-clone:before { content: \"\\f190\"; }\r\n.la-close:before { content: \"\\f191\"; }\r\n.la-cloud:before { content: \"\\f192\"; }\r\n.la-cloud-download:before { content: \"\\f193\"; }\r\n.la-cloud-upload:before { content: \"\\f194\"; }\r\n.la-cny:before { content: \"\\f195\"; }\r\n.la-code:before { content: \"\\f196\"; }\r\n.la-code-fork:before { content: \"\\f197\"; }\r\n.la-codepen:before { content: \"\\f198\"; }\r\n.la-coffee:before { content: \"\\f199\"; }\r\n.la-cog:before { content: \"\\f19a\"; }\r\n.la-cogs:before { content: \"\\f19b\"; }\r\n.la-columns:before { content: \"\\f19c\"; }\r\n.la-comment:before { content: \"\\f19d\"; }\r\n.la-comment-o:before { content: \"\\f19e\"; }\r\n.la-commenting:before { content: \"\\f19f\"; }\r\n.la-commenting-o:before { content: \"\\f1a0\"; }\r\n.la-comments:before { content: \"\\f1a1\"; }\r\n.la-comments-o:before { content: \"\\f1a2\"; }\r\n.la-compass:before { content: \"\\f1a3\"; }\r\n.la-compress:before { content: \"\\f1a4\"; }\r\n.la-connectdevelop:before { content: \"\\f1a5\"; }\r\n.la-contao:before { content: \"\\f1a6\"; }\r\n.la-copy:before { content: \"\\f1a7\"; }\r\n.la-copyright:before { content: \"\\f1a8\"; }\r\n.la-creative-commons:before { content: \"\\f1a9\"; }\r\n.la-credit-card:before { content: \"\\f1aa\"; }\r\n.la-crop:before { content: \"\\f1ab\"; }\r\n.la-crosshairs:before { content: \"\\f1ac\"; }\r\n.la-css3:before { content: \"\\f1ad\"; }\r\n.la-cube:before { content: \"\\f1ae\"; }\r\n.la-cubes:before { content: \"\\f1af\"; }\r\n.la-cut:before { content: \"\\f1b0\"; }\r\n.la-cutlery:before { content: \"\\f1b1\"; }\r\n.la-dashboard:before { content: \"\\f1b2\"; }\r\n.la-dashcube:before { content: \"\\f1b3\"; }\r\n.la-database:before { content: \"\\f1b4\"; }\r\n.la-dedent:before { content: \"\\f1b5\"; }\r\n.la-delicious:before { content: \"\\f1b6\"; }\r\n.la-desktop:before { content: \"\\f1b7\"; }\r\n.la-deviantart:before { content: \"\\f1b8\"; }\r\n.la-diamond:before { content: \"\\f1b9\"; }\r\n.la-digg:before { content: \"\\f1ba\"; }\r\n.la-dollar:before { content: \"\\f1bb\"; }\r\n.la-dot-circle-o:before { content: \"\\f1bc\"; }\r\n.la-download:before { content: \"\\f1bd\"; }\r\n.la-dribbble:before { content: \"\\f1be\"; }\r\n.la-dropbox:before { content: \"\\f1bf\"; }\r\n.la-drupal:before { content: \"\\f1c0\"; }\r\n.la-edit:before { content: \"\\f1c1\"; }\r\n.la-eject:before { content: \"\\f1c2\"; }\r\n.la-ellipsis-h:before { content: \"\\f1c3\"; }\r\n.la-ellipsis-v:before { content: \"\\f1c4\"; }\r\n.la-empire:before, .la-ge:before { content: \"\\f1c5\"; }\r\n.la-envelope:before { content: \"\\f1c6\"; }\r\n.la-envelope-o:before { content: \"\\f1c7\"; }\r\n.la-envelope-square:before { content: \"\\f1c8\"; }\r\n.la-eraser:before { content: \"\\f1c9\"; }\r\n.la-eur:before { content: \"\\f1ca\"; }\r\n.la-euro:before { content: \"\\f1cb\"; }\r\n.la-exchange:before { content: \"\\f1cc\"; }\r\n.la-exclamation:before { content: \"\\f1cd\"; }\r\n.la-exclamation-circle:before { content: \"\\f1ce\"; }\r\n.la-exclamation-triangle:before { content: \"\\f1cf\"; }\r\n.la-expand:before { content: \"\\f1d0\"; }\r\n.la-expeditedssl:before { content: \"\\f1d1\"; }\r\n.la-external-link:before { content: \"\\f1d2\"; }\r\n.la-external-link-square:before { content: \"\\f1d3\"; }\r\n.la-eye:before { content: \"\\f1d4\"; }\r\n.la-eye-slash:before { content: \"\\f1d5\"; }\r\n.la-eyedropper:before { content: \"\\f1d6\"; }\r\n.la-facebook:before, .la-facebook-f:before { content: \"\\f1d7\"; }\r\n.la-facebook-official:before { content: \"\\f1d8\"; }\r\n.la-facebook-square:before { content: \"\\f1d9\"; }\r\n.la-fast-backward:before { content: \"\\f1da\"; }\r\n.la-fast-forward:before { content: \"\\f1db\"; }\r\n.la-fax:before { content: \"\\f1dc\"; }\r\n.la-female:before { content: \"\\f1dd\"; }\r\n.la-fighter-jet:before { content: \"\\f1de\"; }\r\n.la-file:before { content: \"\\f1df\"; }\r\n.la-file-archive-o:before { content: \"\\f1e0\"; }\r\n.la-file-audio-o:before { content: \"\\f1e1\"; }\r\n.la-file-code-o:before { content: \"\\f1e2\"; }\r\n.la-file-excel-o:before { content: \"\\f1e3\"; }\r\n.la-file-image-o:before { content: \"\\f1e4\"; }\r\n.la-file-movie-o:before { content: \"\\f1e5\"; }\r\n.la-file-o:before { content: \"\\f1e6\"; }\r\n.la-file-pdf-o:before { content: \"\\f1e7\"; }\r\n.la-file-photo-o:before { content: \"\\f1e8\"; }\r\n.la-file-picture-o:before { content: \"\\f1e9\"; }\r\n.la-file-powerpoint-o:before { content: \"\\f1ea\"; }\r\n.la-file-sound-o:before { content: \"\\f1eb\"; }\r\n.la-file-text:before { content: \"\\f1ec\"; }\r\n.la-file-text-o:before { content: \"\\f1ed\"; }\r\n.la-file-video-o:before { content: \"\\f1ee\"; }\r\n.la-file-word-o:before { content: \"\\f1ef\"; }\r\n.la-file-zip-o:before { content: \"\\f1f0\"; }\r\n.la-files-o:before { content: \"\\f1f1\"; }\r\n.la-film:before { content: \"\\f1f2\"; }\r\n.la-filter:before { content: \"\\f1f3\"; }\r\n.la-fire:before { content: \"\\f1f4\"; }\r\n.la-fire-extinguisher:before { content: \"\\f1f5\"; }\r\n.la-firefox:before { content: \"\\f1f6\"; }\r\n.la-flag:before { content: \"\\f1f7\"; }\r\n.la-flag-checkered:before { content: \"\\f1f8\"; }\r\n.la-flag-o:before { content: \"\\f1f9\"; }\r\n.la-flash:before { content: \"\\f1fa\"; }\r\n.la-flask:before { content: \"\\f1fb\"; }\r\n.la-flickr:before { content: \"\\f1fc\"; }\r\n.la-floppy-o:before { content: \"\\f1fd\"; }\r\n.la-folder:before { content: \"\\f1fe\"; }\r\n.la-folder-o:before { content: \"\\f1ff\"; }\r\n.la-folder-open:before { content: \"\\f200\"; }\r\n.la-folder-open-o:before { content: \"\\f201\"; }\r\n.la-font:before { content: \"\\f202\"; }\r\n.la-fonticons:before { content: \"\\f203\"; }\r\n.la-forumbee:before { content: \"\\f204\"; }\r\n.la-forward:before { content: \"\\f205\"; }\r\n.la-foursquare:before { content: \"\\f206\"; }\r\n.la-frown-o:before { content: \"\\f207\"; }\r\n.la-futbol-o:before, .la-soccer-ball-o:before { content: \"\\f208\"; }\r\n.la-gamepad:before { content: \"\\f209\"; }\r\n.la-gavel:before { content: \"\\f20a\"; }\r\n.la-gbp:before { content: \"\\f20b\"; }\r\n.la-gear:before { content: \"\\f20c\"; }\r\n.la-gears:before { content: \"\\f20d\"; }\r\n.la-genderless:before { content: \"\\f20e\"; }\r\n.la-get-pocket:before { content: \"\\f20f\"; }\r\n.la-gg:before { content: \"\\f210\"; }\r\n.la-gg-circle:before { content: \"\\f211\"; }\r\n.la-gift:before { content: \"\\f212\"; }\r\n.la-git:before { content: \"\\f213\"; }\r\n.la-git-square:before { content: \"\\f214\"; }\r\n.la-github:before { content: \"\\f215\"; }\r\n.la-github-alt:before { content: \"\\f216\"; }\r\n.la-github-square:before { content: \"\\f217\"; }\r\n.la-glass:before { content: \"\\f218\"; }\r\n.la-globe:before { content: \"\\f219\"; }\r\n.la-google:before { content: \"\\f21a\"; }\r\n.la-google-plus:before { content: \"\\f21b\"; }\r\n.la-google-plus-square:before { content: \"\\f21c\"; }\r\n.la-google-wallet:before { content: \"\\f21d\"; }\r\n.la-graduation-cap:before { content: \"\\f21e\"; }\r\n.la-gratipay:before, .la-gittip:before { content: \"\\f21f\"; }\r\n.la-group:before { content: \"\\f220\"; }\r\n.la-h-square:before { content: \"\\f221\"; }\r\n.la-hacker-news:before { content: \"\\f222\"; }\r\n.la-hand-grab-o:before { content: \"\\f223\"; }\r\n.la-hand-lizard-o:before { content: \"\\f224\"; }\r\n.la-hand-o-down:before { content: \"\\f225\"; }\r\n.la-hand-o-left:before { content: \"\\f226\"; }\r\n.la-hand-o-right:before { content: \"\\f227\"; }\r\n.la-hand-o-up:before { content: \"\\f228\"; }\r\n.la-hand-paper-o:before { content: \"\\f229\"; }\r\n.la-hand-peace-o:before { content: \"\\f22a\"; }\r\n.la-hand-pointer-o:before { content: \"\\f22b\"; }\r\n.la-hand-rock-o:before { content: \"\\f22c\"; }\r\n.la-hand-scissors-o:before { content: \"\\f22d\"; }\r\n.la-hand-spock-o:before { content: \"\\f22e\"; }\r\n.la-hand-stop-o:before { content: \"\\f22f\"; }\r\n.la-hdd-o:before { content: \"\\f230\"; }\r\n.la-header:before { content: \"\\f231\"; }\r\n.la-headphones:before { content: \"\\f232\"; }\r\n.la-heart:before { content: \"\\f233\"; }\r\n.la-heart-o:before { content: \"\\f234\"; }\r\n.la-heartbeat:before { content: \"\\f235\"; }\r\n.la-history:before { content: \"\\f236\"; }\r\n.la-home:before { content: \"\\f237\"; }\r\n.la-hospital-o:before { content: \"\\f238\"; }\r\n.la-hotel:before { content: \"\\f239\"; }\r\n.la-hourglass:before { content: \"\\f23a\"; }\r\n.la-hourglass-1:before { content: \"\\f23b\"; }\r\n.la-hourglass-2:before { content: \"\\f23c\"; }\r\n.la-hourglass-3:before { content: \"\\f23d\"; }\r\n.la-hourglass-end:before { content: \"\\f23e\"; }\r\n.la-hourglass-half:before { content: \"\\f23f\"; }\r\n.la-hourglass-o:before { content: \"\\f240\"; }\r\n.la-hourglass-start:before { content: \"\\f241\"; }\r\n.la-houzz:before { content: \"\\f242\"; }\r\n.la-html5:before { content: \"\\f243\"; }\r\n.la-i-cursor:before { content: \"\\f244\"; }\r\n.la-ils:before { content: \"\\f245\"; }\r\n.la-image:before { content: \"\\f246\"; }\r\n.la-inbox:before { content: \"\\f247\"; }\r\n.la-indent:before { content: \"\\f248\"; }\r\n.la-industry:before { content: \"\\f249\"; }\r\n.la-info:before { content: \"\\f24a\"; }\r\n.la-info-circle:before { content: \"\\f24b\"; }\r\n.la-inr:before { content: \"\\f24c\"; }\r\n.la-instagram:before { content: \"\\f24d\"; }\r\n.la-institution:before { content: \"\\f24e\"; }\r\n.la-internet-explorer:before { content: \"\\f24f\"; }\r\n.la-ioxhost:before { content: \"\\f250\"; }\r\n.la-italic:before { content: \"\\f251\"; }\r\n.la-joomla:before { content: \"\\f252\"; }\r\n.la-jpy:before { content: \"\\f253\"; }\r\n.la-jsfiddle:before { content: \"\\f254\"; }\r\n.la-key:before { content: \"\\f255\"; }\r\n.la-keyboard-o:before { content: \"\\f256\"; }\r\n.la-krw:before { content: \"\\f257\"; }\r\n.la-language:before { content: \"\\f258\"; }\r\n.la-laptop:before { content: \"\\f259\"; }\r\n.la-lastfm:before { content: \"\\f25a\"; }\r\n.la-lastfm-square:before { content: \"\\f25b\"; }\r\n.la-leaf:before { content: \"\\f25c\"; }\r\n.la-leanpub:before { content: \"\\f25d\"; }\r\n.la-legal:before { content: \"\\f25e\"; }\r\n.la-lemon-o:before { content: \"\\f25f\"; }\r\n.la-level-down:before { content: \"\\f260\"; }\r\n.la-level-up:before { content: \"\\f261\"; }\r\n.la-life-bouy:before { content: \"\\f262\"; }\r\n.la-life-buoy:before { content: \"\\f263\"; }\r\n.la-life-ring:before, .la-support:before { content: \"\\f264\"; }\r\n.la-life-saver:before { content: \"\\f265\"; }\r\n.la-lightbulb-o:before { content: \"\\f266\"; }\r\n.la-line-chart:before { content: \"\\f267\"; }\r\n.la-link:before { content: \"\\f268\"; }\r\n.la-linkedin:before { content: \"\\f269\"; }\r\n.la-linkedin-square:before { content: \"\\f26a\"; }\r\n.la-linux:before { content: \"\\f26b\"; }\r\n.la-list:before { content: \"\\f26c\"; }\r\n.la-list-alt:before { content: \"\\f26d\"; }\r\n.la-list-ol:before { content: \"\\f26e\"; }\r\n.la-list-ul:before { content: \"\\f26f\"; }\r\n.la-location-arrow:before { content: \"\\f270\"; }\r\n.la-lock:before { content: \"\\f271\"; }\r\n.la-long-arrow-down:before { content: \"\\f272\"; }\r\n.la-long-arrow-left:before { content: \"\\f273\"; }\r\n.la-long-arrow-right:before { content: \"\\f274\"; }\r\n.la-long-arrow-up:before { content: \"\\f275\"; }\r\n.la-magic:before { content: \"\\f276\"; }\r\n.la-magnet:before { content: \"\\f277\"; }\r\n.la-mail-forward:before { content: \"\\f278\"; }\r\n.la-mail-reply:before { content: \"\\f279\"; }\r\n.la-mail-reply-all:before { content: \"\\f27a\"; }\r\n.la-male:before { content: \"\\f27b\"; }\r\n.la-map:before { content: \"\\f27c\"; }\r\n.la-map-marker:before { content: \"\\f27d\"; }\r\n.la-map-o:before { content: \"\\f27e\"; }\r\n.la-map-pin:before { content: \"\\f27f\"; }\r\n.la-map-signs:before { content: \"\\f280\"; }\r\n.la-mars:before { content: \"\\f281\"; }\r\n.la-mars-double:before { content: \"\\f282\"; }\r\n.la-mars-stroke:before { content: \"\\f283\"; }\r\n.la-mars-stroke-h:before { content: \"\\f284\"; }\r\n.la-mars-stroke-v:before { content: \"\\f285\"; }\r\n.la-maxcdn:before { content: \"\\f286\"; }\r\n.la-meanpath:before { content: \"\\f287\"; }\r\n.la-medium:before { content: \"\\f288\"; }\r\n.la-medkit:before { content: \"\\f289\"; }\r\n.la-meh-o:before { content: \"\\f28a\"; }\r\n.la-mercury:before { content: \"\\f28b\"; }\r\n.la-microphone:before { content: \"\\f28c\"; }\r\n.la-microphone-slash:before { content: \"\\f28d\"; }\r\n.la-minus:before { content: \"\\f28e\"; }\r\n.la-minus-circle:before { content: \"\\f28f\"; }\r\n.la-minus-square:before { content: \"\\f290\"; }\r\n.la-minus-square-o:before { content: \"\\f291\"; }\r\n.la-mobile:before { content: \"\\f292\"; }\r\n.la-mobile-phone:before { content: \"\\f293\"; }\r\n.la-money:before { content: \"\\f294\"; }\r\n.la-moon-o:before { content: \"\\f295\"; }\r\n.la-mortar-board:before { content: \"\\f296\"; }\r\n.la-motorcycle:before { content: \"\\f297\"; }\r\n.la-mouse-pointer:before { content: \"\\f298\"; }\r\n.la-music:before { content: \"\\f299\"; }\r\n.la-navicon:before { content: \"\\f29a\"; }\r\n.la-neuter:before { content: \"\\f29b\"; }\r\n.la-newspaper-o:before { content: \"\\f29c\"; }\r\n.la-object-group:before { content: \"\\f29d\"; }\r\n.la-object-ungroup:before { content: \"\\f29e\"; }\r\n.la-odnoklassniki:before { content: \"\\f29f\"; }\r\n.la-odnoklassniki-square:before { content: \"\\f2a0\"; }\r\n.la-opencart:before { content: \"\\f2a1\"; }\r\n.la-openid:before { content: \"\\f2a2\"; }\r\n.la-opera:before { content: \"\\f2a3\"; }\r\n.la-optin-monster:before { content: \"\\f2a4\"; }\r\n.la-outdent:before { content: \"\\f2a5\"; }\r\n.la-pagelines:before { content: \"\\f2a6\"; }\r\n.la-paint-brush:before { content: \"\\f2a7\"; }\r\n.la-paper-plane:before, .la-send:before { content: \"\\f2a8\"; }\r\n.la-paper-plane-o:before, .la-send-o:before { content: \"\\f2a9\"; }\r\n.la-paperclip:before { content: \"\\f2aa\"; }\r\n.la-paragraph:before { content: \"\\f2ab\"; }\r\n.la-paste:before { content: \"\\f2ac\"; }\r\n.la-pause:before { content: \"\\f2ad\"; }\r\n.la-paw:before { content: \"\\f2ae\"; }\r\n.la-paypal:before { content: \"\\f2af\"; }\r\n.la-pencil:before { content: \"\\f2b0\"; }\r\n.la-pencil-square:before { content: \"\\f2b1\"; }\r\n.la-pencil-square-o:before { content: \"\\f2b2\"; }\r\n.la-phone:before { content: \"\\f2b3\"; }\r\n.la-phone-square:before { content: \"\\f2b4\"; }\r\n.la-photo:before { content: \"\\f2b5\"; }\r\n.la-picture-o:before { content: \"\\f2b6\"; }\r\n.la-pie-chart:before { content: \"\\f2b7\"; }\r\n.la-pied-piper:before { content: \"\\f2b8\"; }\r\n.la-pied-piper-alt:before { content: \"\\f2b9\"; }\r\n.la-pinterest:before { content: \"\\f2ba\"; }\r\n.la-pinterest-p:before { content: \"\\f2bb\"; }\r\n.la-pinterest-square:before { content: \"\\f2bc\"; }\r\n.la-plane:before { content: \"\\f2bd\"; }\r\n.la-play:before { content: \"\\f2be\"; }\r\n.la-play-circle:before { content: \"\\f2bf\"; }\r\n.la-play-circle-o:before { content: \"\\f2c0\"; }\r\n.la-plug:before { content: \"\\f2c1\"; }\r\n.la-plus:before { content: \"\\f2c2\"; }\r\n.la-plus-circle:before { content: \"\\f2c3\"; }\r\n.la-plus-square:before { content: \"\\f2c4\"; }\r\n.la-plus-square-o:before { content: \"\\f2c5\"; }\r\n.la-power-off:before { content: \"\\f2c6\"; }\r\n.la-print:before { content: \"\\f2c7\"; }\r\n.la-puzzle-piece:before { content: \"\\f2c8\"; }\r\n.la-qq:before { content: \"\\f2c9\"; }\r\n.la-qrcode:before { content: \"\\f2ca\"; }\r\n.la-question:before { content: \"\\f2cb\"; }\r\n.la-question-circle:before { content: \"\\f2cc\"; }\r\n.la-quote-left:before { content: \"\\f2cd\"; }\r\n.la-quote-right:before { content: \"\\f2ce\"; }\r\n.la-ra:before { content: \"\\f2cf\"; }\r\n.la-random:before { content: \"\\f2d0\"; }\r\n.la-rebel:before { content: \"\\f2d1\"; }\r\n.la-recycle:before { content: \"\\f2d2\"; }\r\n.la-reddit:before { content: \"\\f2d3\"; }\r\n.la-reddit-square:before { content: \"\\f2d4\"; }\r\n.la-refresh:before { content: \"\\f2d5\"; }\r\n.la-registered:before { content: \"\\f2d6\"; }\r\n.la-renren:before { content: \"\\f2d7\"; }\r\n.la-reorder:before { content: \"\\f2d8\"; }\r\n.la-repeat:before { content: \"\\f2d9\"; }\r\n.la-reply:before { content: \"\\f2da\"; }\r\n.la-reply-all:before { content: \"\\f2db\"; }\r\n.la-retweet:before { content: \"\\f2dc\"; }\r\n.la-rmb:before { content: \"\\f2dd\"; }\r\n.la-road:before { content: \"\\f2de\"; }\r\n.la-rocket:before { content: \"\\f2df\"; }\r\n.la-rotate-left:before { content: \"\\f2e0\"; }\r\n.la-rotate-right:before { content: \"\\f2e1\"; }\r\n.la-rouble:before { content: \"\\f2e2\"; }\r\n.la-rss:before, .la-feed:before { content: \"\\f2e3\"; }\r\n.la-rss-square:before { content: \"\\f2e4\"; }\r\n.la-rub:before { content: \"\\f2e5\"; }\r\n.la-ruble:before { content: \"\\f2e6\"; }\r\n.la-rupee:before { content: \"\\f2e7\"; }\r\n.la-safari:before { content: \"\\f2e8\"; }\r\n.la-save:before { content: \"\\f2e9\"; }\r\n.la-scissors:before { content: \"\\f2ea\"; }\r\n.la-search:before { content: \"\\f2eb\"; }\r\n.la-search-minus:before { content: \"\\f2ec\"; }\r\n.la-search-plus:before { content: \"\\f2ed\"; }\r\n.la-sellsy:before { content: \"\\f2ee\"; }\r\n.la-server:before { content: \"\\f2ef\"; }\r\n.la-share:before { content: \"\\f2f0\"; }\r\n.la-share-alt:before { content: \"\\f2f1\"; }\r\n.la-share-alt-square:before { content: \"\\f2f2\"; }\r\n.la-share-square:before { content: \"\\f2f3\"; }\r\n.la-share-square-o:before { content: \"\\f2f4\"; }\r\n.la-shekel:before { content: \"\\f2f5\"; }\r\n.la-sheqel:before { content: \"\\f2f6\"; }\r\n.la-shield:before { content: \"\\f2f7\"; }\r\n.la-ship:before { content: \"\\f2f8\"; }\r\n.la-shirtsinbulk:before { content: \"\\f2f9\"; }\r\n.la-shopping-cart:before { content: \"\\f2fa\"; }\r\n.la-sign-in:before { content: \"\\f2fb\"; }\r\n.la-sign-out:before { content: \"\\f2fc\"; }\r\n.la-signal:before { content: \"\\f2fd\"; }\r\n.la-simplybuilt:before { content: \"\\f2fe\"; }\r\n.la-sitemap:before { content: \"\\f2ff\"; }\r\n.la-skyatlas:before { content: \"\\f300\"; }\r\n.la-skype:before { content: \"\\f301\"; }\r\n.la-slack:before { content: \"\\f302\"; }\r\n.la-sliders:before { content: \"\\f303\"; }\r\n.la-slideshare:before { content: \"\\f304\"; }\r\n.la-smile-o:before { content: \"\\f305\"; }\r\n.la-sort:before, .la-unsorted:before { content: \"\\f306\"; }\r\n.la-sort-alpha-asc:before { content: \"\\f307\"; }\r\n.la-sort-alpha-desc:before { content: \"\\f308\"; }\r\n.la-sort-amount-asc:before { content: \"\\f309\"; }\r\n.la-sort-amount-desc:before { content: \"\\f30a\"; }\r\n.la-sort-asc:before, .la-sort-up:before { content: \"\\f30b\"; }\r\n.la-sort-desc:before, .la-sort-down:before { content: \"\\f30c\"; }\r\n.la-sort-numeric-asc:before { content: \"\\f30d\"; }\r\n.la-sort-numeric-desc:before { content: \"\\f30e\"; }\r\n.la-soundcloud:before { content: \"\\f30f\"; }\r\n.la-space-shuttle:before { content: \"\\f310\"; }\r\n.la-spinner:before { content: \"\\f311\"; }\r\n.la-spoon:before { content: \"\\f312\"; }\r\n.la-spotify:before { content: \"\\f313\"; }\r\n.la-square:before { content: \"\\f314\"; }\r\n.la-square-o:before { content: \"\\f315\"; }\r\n.la-stack-exchange:before { content: \"\\f316\"; }\r\n.la-stack-overflow:before { content: \"\\f317\"; }\r\n.la-star:before { content: \"\\f318\"; }\r\n.la-star-half:before { content: \"\\f319\"; }\r\n.la-star-half-o:before, .la-star-half-full:before, .la-star-half-empty:before { content: \"\\f31a\"; }\r\n.la-star-o:before { content: \"\\f31b\"; }\r\n.la-steam:before { content: \"\\f31c\"; }\r\n.la-steam-square:before { content: \"\\f31d\"; }\r\n.la-step-backward:before { content: \"\\f31e\"; }\r\n.la-step-forward:before { content: \"\\f31f\"; }\r\n.la-stethoscope:before { content: \"\\f320\"; }\r\n.la-sticky-note:before { content: \"\\f321\"; }\r\n.la-sticky-note-o:before { content: \"\\f322\"; }\r\n.la-stop:before { content: \"\\f323\"; }\r\n.la-street-view:before { content: \"\\f324\"; }\r\n.la-strikethrough:before { content: \"\\f325\"; }\r\n.la-stumbleupon:before { content: \"\\f326\"; }\r\n.la-stumbleupon-circle:before { content: \"\\f327\"; }\r\n.la-subscript:before { content: \"\\f328\"; }\r\n.la-subway:before { content: \"\\f329\"; }\r\n.la-suitcase:before { content: \"\\f32a\"; }\r\n.la-sun-o:before { content: \"\\f32b\"; }\r\n.la-superscript:before { content: \"\\f32c\"; }\r\n.la-table:before { content: \"\\f32d\"; }\r\n.la-tablet:before { content: \"\\f32e\"; }\r\n.la-tachometer:before { content: \"\\f32f\"; }\r\n.la-tag:before { content: \"\\f330\"; }\r\n.la-tags:before { content: \"\\f331\"; }\r\n.la-tasks:before { content: \"\\f332\"; }\r\n.la-taxi:before { content: \"\\f333\"; }\r\n.la-television:before, .la-tv:before { content: \"\\f334\"; }\r\n.la-tencent-weibo:before { content: \"\\f335\"; }\r\n.la-terminal:before { content: \"\\f336\"; }\r\n.la-text-height:before { content: \"\\f337\"; }\r\n.la-text-width:before { content: \"\\f338\"; }\r\n.la-th:before { content: \"\\f339\"; }\r\n.la-th-large:before { content: \"\\f33a\"; }\r\n.la-th-list:before { content: \"\\f33b\"; }\r\n.la-thumb-tack:before { content: \"\\f33c\"; }\r\n.la-thumbs-down:before { content: \"\\f33d\"; }\r\n.la-thumbs-o-down:before { content: \"\\f33e\"; }\r\n.la-thumbs-o-up:before { content: \"\\f33f\"; }\r\n.la-thumbs-up:before { content: \"\\f340\"; }\r\n.la-ticket:before { content: \"\\f341\"; }\r\n.la-times:before, .la-remove:before { content: \"\\f342\"; }\r\n.la-times-circle:before { content: \"\\f343\"; }\r\n.la-times-circle-o:before { content: \"\\f344\"; }\r\n.la-tint:before { content: \"\\f345\"; }\r\n.la-toggle-off:before { content: \"\\f346\"; }\r\n.la-toggle-on:before { content: \"\\f347\"; }\r\n.la-trademark:before { content: \"\\f348\"; }\r\n.la-train:before { content: \"\\f349\"; }\r\n.la-transgender:before, .la-intersex:before { content: \"\\f34a\"; }\r\n.la-transgender-alt:before { content: \"\\f34b\"; }\r\n.la-trash:before { content: \"\\f34c\"; }\r\n.la-trash-o:before { content: \"\\f34d\"; }\r\n.la-tree:before { content: \"\\f34e\"; }\r\n.la-trello:before { content: \"\\f34f\"; }\r\n.la-tripadvisor:before { content: \"\\f350\"; }\r\n.la-trophy:before { content: \"\\f351\"; }\r\n.la-truck:before { content: \"\\f352\"; }\r\n.la-try:before { content: \"\\f353\"; }\r\n.la-tty:before { content: \"\\f354\"; }\r\n.la-tumblr:before { content: \"\\f355\"; }\r\n.la-tumblr-square:before { content: \"\\f356\"; }\r\n.la-turkish-lira:before { content: \"\\f357\"; }\r\n.la-twitch:before { content: \"\\f358\"; }\r\n.la-twitter:before { content: \"\\f359\"; }\r\n.la-twitter-square:before { content: \"\\f35a\"; }\r\n.la-umbrella:before { content: \"\\f35b\"; }\r\n.la-underline:before { content: \"\\f35c\"; }\r\n.la-undo:before { content: \"\\f35d\"; }\r\n.la-university:before { content: \"\\f35e\"; }\r\n.la-unlink:before { content: \"\\f35f\"; }\r\n.la-unlock:before { content: \"\\f360\"; }\r\n.la-unlock-alt:before { content: \"\\f361\"; }\r\n.la-upload:before { content: \"\\f362\"; }\r\n.la-usd:before { content: \"\\f363\"; }\r\n.la-user:before { content: \"\\f364\"; }\r\n.la-user-md:before { content: \"\\f365\"; }\r\n.la-user-plus:before { content: \"\\f366\"; }\r\n.la-user-secret:before { content: \"\\f367\"; }\r\n.la-user-times:before { content: \"\\f368\"; }\r\n.la-users:before { content: \"\\f369\"; }\r\n.la-venus:before { content: \"\\f36a\"; }\r\n.la-venus-double:before { content: \"\\f36b\"; }\r\n.la-venus-mars:before { content: \"\\f36c\"; }\r\n.la-viacoin:before { content: \"\\f36d\"; }\r\n.la-video-camera:before { content: \"\\f36e\"; }\r\n.la-vimeo:before { content: \"\\f36f\"; }\r\n.la-vimeo-square:before { content: \"\\f370\"; }\r\n.la-vine:before { content: \"\\f371\"; }\r\n.la-vk:before { content: \"\\f372\"; }\r\n.la-volume-down:before { content: \"\\f373\"; }\r\n.la-volume-off:before { content: \"\\f374\"; }\r\n.la-volume-up:before { content: \"\\f375\"; }\r\n.la-warning:before { content: \"\\f376\"; }\r\n.la-wechat:before { content: \"\\f377\"; }\r\n.la-weibo:before { content: \"\\f378\"; }\r\n.la-weixin:before { content: \"\\f379\"; }\r\n.la-whatsapp:before { content: \"\\f37a\"; }\r\n.la-wheelchair:before { content: \"\\f37b\"; }\r\n.la-wifi:before { content: \"\\f37c\"; }\r\n.la-wikipedia-w:before { content: \"\\f37d\"; }\r\n.la-windows:before { content: \"\\f37e\"; }\r\n.la-won:before { content: \"\\f37f\"; }\r\n.la-wordpress:before { content: \"\\f380\"; }\r\n.la-wrench:before { content: \"\\f381\"; }\r\n.la-xing:before { content: \"\\f382\"; }\r\n.la-xing-square:before { content: \"\\f383\"; }\r\n.la-y-combinator:before { content: \"\\f384\"; }\r\n.la-y-combinator-square:before { content: \"\\f385\"; }\r\n.la-yahoo:before { content: \"\\f386\"; }\r\n.la-yc:before { content: \"\\f387\"; }\r\n.la-yc-square:before { content: \"\\f388\"; }\r\n.la-yelp:before { content: \"\\f389\"; }\r\n.la-yen:before { content: \"\\f38a\"; }\r\n.la-youtube:before { content: \"\\f38b\"; }\r\n.la-youtube-play:before { content: \"\\f38c\"; }\r\n.la-youtube-square:before { content: \"\\f38d\"; }", ""]);


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-SG": "./node_modules/moment/locale/en-SG.js",
	"./en-SG.js": "./node_modules/moment/locale/en-SG.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./resources/assets/js/global/components/base/app.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/global/components/base/app.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @class KApp
 */

var KTApp = function () {
  /** @type {object} colors State colors **/
  var colors = {};

  var _initTooltip = function initTooltip(el) {
    var skin = el.data('skin') ? 'tooltip-' + el.data('skin') : '';
    var width = el.data('width') === 'auto' ? 'tooltop-auto-width' : '';
    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';
    var placement = el.data('placement') ? el.data('placement') : 'left';
    el.tooltip({
      trigger: triggerValue,
      template: '<div class="tooltip ' + skin + ' ' + width + '" role="tooltip">\
                <div class="arrow"></div>\
                <div class="tooltip-inner"></div>\
            </div>'
    });
  };

  var _initTooltips = function initTooltips() {
    // init bootstrap tooltips
    $('[data-toggle="kt-tooltip"]').each(function () {
      _initTooltip($(this));
    });
  };

  var _initPopover = function initPopover(el) {
    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';
    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';
    el.popover({
      trigger: triggerValue,
      template: '\
            <div class="popover ' + skin + '" role="tooltip">\
                <div class="arrow"></div>\
                <h3 class="popover-header"></h3>\
                <div class="popover-body"></div>\
            </div>'
    });
  };

  var _initPopovers = function initPopovers() {
    // init bootstrap popover
    $('[data-toggle="kt-popover"]').each(function () {
      _initPopover($(this));
    });
  };

  var initFileInput = function initFileInput() {
    // init bootstrap popover
    $('.custom-file-input').on('change', function () {
      var fileName = $(this).val();
      $(this).next('.custom-file-label').addClass("selected").html(fileName);
    });
  };

  var _initPortlet = function initPortlet(el, options) {
    // init portlet tools
    var el = $(el);
    var portlet = new KTPortlet(el[0], options);
  };

  var _initPortlets = function initPortlets() {
    // init portlet tools
    $('[data-ktportlet="true"]').each(function () {
      var el = $(this);

      if (el.data('data-ktportlet-initialized') !== true) {
        _initPortlet(el, {});

        el.data('data-ktportlet-initialized', true);
      }
    });
  };

  var initScroll = function initScroll() {
    $('[data-scroll="true"]').each(function () {
      var el = $(this);
      KTUtil.scrollInit(this, {
        mobileNativeScroll: true,
        handleWindowResize: true,
        rememberPosition: el.data('remember-position') == 'true' ? true : false,
        height: function height() {
          if (KTUtil.isInResponsiveRange('tablet-and-mobile') && el.data('mobile-height')) {
            return el.data('mobile-height');
          } else {
            return el.data('height');
          }
        }
      });
    });
  };

  var initAlerts = function initAlerts() {
    // init bootstrap popover
    $('body').on('click', '[data-close=alert]', function () {
      $(this).closest('.alert').hide();
    });
  };

  var _initSticky = function initSticky() {
    var sticky = new Sticky('[data-sticky="true"]');
  };

  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {
    var dropdownMenu;

    if (!context) {
      return;
    }

    $('body').on('show.bs.dropdown', context, function (e) {
      dropdownMenu = $(e.target).find('.dropdown-menu');
      $('body').append(dropdownMenu.detach());
      dropdownMenu.css('display', 'block');
      dropdownMenu.position({
        'my': 'right top',
        'at': 'right bottom',
        'of': $(e.relatedTarget)
      });
    }).on('hide.bs.dropdown', context, function (e) {
      $(e.target).append(dropdownMenu.detach());
      dropdownMenu.hide();
    });
  };

  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {
    $('body').on('show.bs.dropdown', function (e) {
      // e.target is always parent (contains toggler and menu)
      var $toggler = $(e.target).find("[data-attach='body']");

      if ($toggler.length === 0) {
        return;
      }

      var $dropdownMenu = $(e.target).find('.dropdown-menu'); // save detached menu

      var $detachedDropdownMenu = $dropdownMenu.detach(); // save reference to detached menu inside data of toggler

      $toggler.data('dropdown-menu', $detachedDropdownMenu);
      $('body').append($detachedDropdownMenu);
      $detachedDropdownMenu.css('display', 'block');
      $detachedDropdownMenu.position({
        my: 'right top',
        at: 'right bottom',
        of: $(e.relatedTarget)
      });
    });
    $('body').on('hide.bs.dropdown', function (e) {
      var $toggler = $(e.target).find("[data-attach='body']");

      if ($toggler.length === 0) {
        return;
      } // access to reference of detached menu from data of toggler


      var $detachedDropdownMenu = $toggler.data('dropdown-menu'); // re-append detached menu inside parent

      $(e.target).append($detachedDropdownMenu.detach()); // hide dropdown

      $detachedDropdownMenu.hide();
    });
  };

  return {
    init: function init(options) {
      if (options && options.colors) {
        colors = options.colors;
      }

      KTApp.initComponents();
    },
    initComponents: function initComponents() {
      initScroll();

      _initTooltips();

      _initPopovers();

      initAlerts();

      _initPortlets();

      initFileInput();

      _initSticky();

      initAbsoluteDropdowns();
    },
    initTooltips: function initTooltips() {
      _initTooltips();
    },
    initTooltip: function initTooltip(el) {
      _initTooltip(el);
    },
    initPopovers: function initPopovers() {
      _initPopovers();
    },
    initPopover: function initPopover(el) {
      _initPopover(el);
    },
    initPortlet: function initPortlet(el, options) {
      _initPortlet(el, options);
    },
    initPortlets: function initPortlets() {
      _initPortlets();
    },
    initSticky: function initSticky() {
      _initSticky();
    },
    initAbsoluteDropdown: function initAbsoluteDropdown(context) {
      _initAbsoluteDropdown(context);
    },
    block: function block(target, options) {
      var el = $(target);
      options = $.extend(true, {
        opacity: 0.05,
        overlayColor: '#000000',
        type: '',
        size: '',
        state: 'brand',
        centerX: true,
        centerY: true,
        message: '',
        shadow: true,
        width: 'auto'
      }, options);
      var html;
      var version = options.type ? 'kt-spinner--' + options.type : '';
      var state = options.state ? 'kt-spinner--' + options.state : '';
      var size = options.size ? 'kt-spinner--' + options.size : '';
      var spinner = '<div class="kt-spinner ' + version + ' ' + state + ' ' + size + '"></div';

      if (options.message && options.message.length > 0) {
        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');
        html = '<div class="' + classes + '"><span>' + options.message + '</span><span>' + spinner + '</span></div>';
        var el = document.createElement('div');
        KTUtil.get('body').prepend(el);
        KTUtil.addClass(el, classes);
        el.innerHTML = '<span>' + options.message + '</span><span>' + spinner + '</span>';
        options.width = KTUtil.actualWidth(el) + 10;
        KTUtil.remove(el);

        if (target == 'body') {
          html = '<div class="' + classes + '" style="margin-left:-' + options.width / 2 + 'px;"><span>' + options.message + '</span><span>' + spinner + '</span></div>';
        }
      } else {
        html = spinner;
      }

      var params = {
        message: html,
        centerY: options.centerY,
        centerX: options.centerX,
        css: {
          top: '30%',
          left: '50%',
          border: '0',
          padding: '0',
          backgroundColor: 'none',
          width: options.width
        },
        overlayCSS: {
          backgroundColor: options.overlayColor,
          opacity: options.opacity,
          cursor: 'wait',
          zIndex: target == 'body' ? 1100 : 10
        },
        onUnblock: function onUnblock() {
          if (el && el[0]) {
            KTUtil.css(el[0], 'position', '');
            KTUtil.css(el[0], 'zoom', '');
          }
        }
      };

      if (target == 'body') {
        params.css.top = '50%';
        $.blockUI(params);
      } else {
        var el = $(target);
        el.block(params);
      }
    },
    unblock: function unblock(target) {
      if (target && target != 'body') {
        $(target).unblock();
      } else {
        $.unblockUI();
      }
    },
    blockPage: function blockPage(options) {
      return KTApp.block('body', options);
    },
    unblockPage: function unblockPage() {
      return KTApp.unblock('body');
    },
    progress: function progress(target, options) {
      var skin = options && options.skin ? options.skin : 'light';
      var alignment = options && options.alignment ? options.alignment : 'right';
      var size = options && options.size ? ' kt-spinner--' + options.size : '';
      var classes = 'kt-spinner ' + 'kt-spinner--' + skin + ' kt-spinner--' + alignment + size;
      KTApp.unprogress(target);
      KTUtil.attr(target, 'disabled', true);
      $(target).addClass(classes);
      $(target).data('progress-classes', classes);
    },
    unprogress: function unprogress(target) {
      $(target).removeClass($(target).data('progress-classes'));
      KTUtil.removeAttr(target, 'disabled');
    },
    getStateColor: function getStateColor(name) {
      return colors["state"][name];
    },
    getBaseColor: function getBaseColor(type, level) {
      return colors["base"][type][level - 1];
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTApp;
} // Initialize KTApp class on document ready


$(document).ready(function () {
  KTApp.init(KTAppOptions);
});

/***/ }),

/***/ "./resources/assets/js/global/components/base/avatar.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/avatar.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// plugin setup
var KTAvatar = function KTAvatar(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {}; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('avatar')) {
        the = KTUtil.data(element).get('avatar');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('avatar', the);
      }

      return the;
    },

    /**
     * Init avatar
     */
    init: function init(options) {
      the.element = element;
      the.events = [];
      the.input = KTUtil.find(element, 'input[type="file"]');
      the.holder = KTUtil.find(element, '.kt-avatar__holder');
      the.cancel = KTUtil.find(element, '.kt-avatar__cancel');
      the.src = KTUtil.css(the.holder, 'backgroundImage'); // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },

    /**
     * Build Form Wizard
     */
    build: function build() {
      // Handle avatar change
      KTUtil.addEvent(the.input, 'change', function (e) {
        e.preventDefault();

        if (the.input && the.input.files && the.input.files[0]) {
          var reader = new FileReader();

          reader.onload = function (e) {
            KTUtil.css(the.holder, 'background-image', 'url(' + e.target.result + ')');
          };

          reader.readAsDataURL(the.input.files[0]);
          KTUtil.addClass(the.element, 'kt-avatar--changed');
        }
      }); // Handle avatar cancel

      KTUtil.addEvent(the.cancel, 'click', function (e) {
        e.preventDefault();
        KTUtil.removeClass(the.element, 'kt-avatar--changed');
        KTUtil.css(the.holder, 'background-image', the.src);
        the.input.value = "";
      });
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTAvatar;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/datatable/core.datatable.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/js/global/components/base/datatable/core.datatable.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($) {
  var pluginName = 'KTDatatable';
  var pfx = 'kt-';
  var util = KTUtil;
  var app = KTApp;
  if (typeof util === 'undefined') throw new Error('Util class is required and must be included before ' + pluginName); // plugin setup

  $.fn[pluginName] = function (options) {
    if ($(this).length === 0) {
      console.warn('No ' + pluginName + ' element exist.');
      return;
    } // global variables


    var datatable = this; // debug enabled?
    // 1) state will be cleared on each refresh
    // 2) enable some logs
    // 3) etc.

    datatable.debug = false;
    datatable.API = {
      record: null,
      value: null,
      params: null
    };
    var Plugin = {
      /********************
       ** PRIVATE METHODS
       ********************/
      isInit: false,
      cellOffset: 110,
      iconOffset: 15,
      stateId: 'meta',
      ajaxParams: {},
      pagingObject: {},
      init: function init(options) {
        var isHtmlTable = false; // data source option empty is normal table

        if (options.data.source === null) {
          Plugin.extractTable();
          isHtmlTable = true;
        }

        Plugin.setupBaseDOM.call();
        Plugin.setupDOM(datatable.table); // set custom query from options

        Plugin.setDataSourceQuery(Plugin.getOption('data.source.read.params.query')); // on event after layout had done setup, show datatable

        $(datatable).on(pfx + 'datatable--on-layout-updated', Plugin.afterRender);

        if (datatable.debug) {
          Plugin.stateRemove(Plugin.stateId);
        } // initialize extensions


        $.each(Plugin.getOption('extensions'), function (extName, extOptions) {
          if (typeof $.fn[pluginName][extName] === 'function') {
            new $.fn[pluginName][extName](datatable, extOptions);
          }
        });
        Plugin.spinnerCallback(true); // get data

        if (options.data.type === 'remote' || options.data.type === 'local') {
          if (options.data.saveState === false || options.data.saveState.cookie === false && options.data.saveState.webstorage === false) {
            Plugin.stateRemove(Plugin.stateId);
          } // get data for local datatable and local table


          if (options.data.type === 'local' && _typeof(options.data.source) === 'object') {
            datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(options.data.source);
          }

          Plugin.dataRender();
        } // if html table, remove and setup a new header


        if (isHtmlTable) {
          $(datatable.tableHead).find('tr').remove();
          $(datatable.tableFoot).find('tr').remove();
        }

        Plugin.setHeadTitle();

        if (Plugin.getOption('layout.footer')) {
          Plugin.setHeadTitle(datatable.tableFoot);
        } // hide header


        if (typeof options.layout.header !== 'undefined' && options.layout.header === false) {
          $(datatable.table).find('thead').remove();
        } // hide footer


        if (typeof options.layout.footer !== 'undefined' && options.layout.footer === false) {
          $(datatable.table).find('tfoot').remove();
        } // for normal and local data type, run layoutUpdate


        if (options.data.type === null || options.data.type === 'local') {
          Plugin.setupCellField.call();
          Plugin.setupTemplateCell.call(); // setup nested datatable, if option enabled

          Plugin.setupSubDatatable.call(); // setup extra system column properties

          Plugin.setupSystemColumn.call();
          Plugin.redraw();
        }

        var width;
        var initialWidth = false;
        $(window).resize(function () {
          // issue: URL Bar Resizing on mobile, https://developers.google.com/web/updates/2016/12/url-bar-resizing
          // trigger datatable resize on width change only
          if ($(this).width() !== width) {
            width = $(this).width();
            Plugin.fullRender();
          } // get initial width


          if (!initialWidth) {
            width = $(this).width();
            initialWidth = true;
          }
        });
        $(datatable).height('');
        $(Plugin.getOption('search.input')).on('keyup', function (e) {
          if (Plugin.getOption('search.onEnter') && e.which !== 13) return;
          Plugin.search($(this).val());
        });
        return datatable;
      },

      /**
       * Extract static HTML table content into datasource
       */
      extractTable: function extractTable() {
        var columns = [];
        var headers = $(datatable).find('tr:first-child th').get().map(function (cell, i) {
          var field = $(cell).data('field');

          if (typeof field === 'undefined') {
            field = $(cell).text().trim();
          }

          var column = {
            field: field,
            title: field
          };

          for (var ii in options.columns) {
            if (options.columns[ii].field === field) {
              column = $.extend(true, {}, options.columns[ii], column);
            }
          }

          columns.push(column);
          return field;
        }); // auto create columns config

        options.columns = columns;
        var rowProp = [];
        var source = [];
        $(datatable).find('tr').each(function () {
          if ($(this).find('td').length) {
            rowProp.push($(this).prop('attributes'));
          }

          var td = {};
          $(this).find('td').each(function (i, cell) {
            td[headers[i]] = cell.innerHTML.trim();
          });

          if (!util.isEmpty(td)) {
            source.push(td);
          }
        });
        options.data.attr.rowProps = rowProp;
        options.data.source = source;
      },

      /**
       * One time layout update on init
       */
      layoutUpdate: function layoutUpdate() {
        // setup nested datatable, if option enabled
        Plugin.setupSubDatatable.call(); // setup extra system column properties

        Plugin.setupSystemColumn.call(); // setup cell hover event

        Plugin.setupHover.call();

        if (typeof options.detail === 'undefined' // temporary disable lock column in subtable
        && Plugin.getDepth() === 1) {
          // lock columns handler
          Plugin.lockTable.call();
        }

        Plugin.resetScroll(); // check if not is a locked column

        if (!Plugin.isLocked()) {
          Plugin.redraw.call(); // check if its not a subtable and has autoHide option enabled

          if (!Plugin.isSubtable() && Plugin.getOption('rows.autoHide') === true) {
            Plugin.autoHide();
          } // reset row


          $(datatable.table).find('.' + pfx + 'datatable__row').css('height', '');
        }

        Plugin.columnHide.call();
        Plugin.rowEvenOdd.call();
        Plugin.sorting.call();
        Plugin.scrollbar.call();

        if (!Plugin.isInit) {
          // run once dropdown inside datatable
          Plugin.dropdownFix();
          $(datatable).trigger(pfx + 'datatable--on-init', {
            table: $(datatable.wrap).attr('id'),
            options: options
          });
          Plugin.isInit = true;
        }

        $(datatable).trigger(pfx + 'datatable--on-layout-updated', {
          table: $(datatable.wrap).attr('id')
        });
      },
      dropdownFix: function dropdownFix() {
        var dropdownMenu;
        $('body').on('show.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable__body', function (e) {
          dropdownMenu = $(e.target).find('.dropdown-menu');
          $('body').append(dropdownMenu.detach());
          dropdownMenu.css('display', 'block');
          dropdownMenu.position({
            'my': 'right top',
            'at': 'right bottom',
            'of': $(e.relatedTarget)
          }); // if datatable is inside modal

          if (datatable.closest('.modal').length) {
            // increase dropdown z-index
            dropdownMenu.css('z-index', '2000');
          }
        }).on('hide.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable__body', function (e) {
          $(e.target).append(dropdownMenu.detach());
          dropdownMenu.hide();
        });
      },
      lockTable: function lockTable() {
        var lock = {
          lockEnabled: false,
          init: function init() {
            // check if table should be locked columns
            lock.lockEnabled = Plugin.lockEnabledColumns();

            if (lock.lockEnabled.left.length === 0 && lock.lockEnabled.right.length === 0) {
              return;
            }

            lock.enable();
          },
          enable: function enable() {
            var enableLock = function enableLock(tablePart) {
              // check if already has lock column
              if ($(tablePart).find('.' + pfx + 'datatable__lock').length > 0) {
                Plugin.log('Locked container already exist in: ', tablePart);
                return;
              } // check if no rows exists


              if ($(tablePart).find('.' + pfx + 'datatable__row').length === 0) {
                Plugin.log('No row exist in: ', tablePart);
                return;
              } // locked div container


              var lockLeft = $('<div/>').addClass(pfx + 'datatable__lock ' + pfx + 'datatable__lock--left');
              var lockScroll = $('<div/>').addClass(pfx + 'datatable__lock ' + pfx + 'datatable__lock--scroll');
              var lockRight = $('<div/>').addClass(pfx + 'datatable__lock ' + pfx + 'datatable__lock--right');
              $(tablePart).find('.' + pfx + 'datatable__row').each(function () {
                // create new row for lock columns and pass the data
                var rowLeft = $('<tr/>').addClass(pfx + 'datatable__row').data('obj', $(this).data('obj')).appendTo(lockLeft);
                var rowScroll = $('<tr/>').addClass(pfx + 'datatable__row').data('obj', $(this).data('obj')).appendTo(lockScroll);
                var rowRight = $('<tr/>').addClass(pfx + 'datatable__row').data('obj', $(this).data('obj')).appendTo(lockRight);
                $(this).find('.' + pfx + 'datatable__cell').each(function () {
                  var locked = $(this).data('locked');

                  if (typeof locked !== 'undefined') {
                    if (typeof locked.left !== 'undefined' || locked === true) {
                      // default locked to left
                      $(this).appendTo(rowLeft);
                    }

                    if (typeof locked.right !== 'undefined') {
                      $(this).appendTo(rowRight);
                    }
                  } else {
                    $(this).appendTo(rowScroll);
                  }
                }); // remove old row

                $(this).remove();
              });

              if (lock.lockEnabled.left.length > 0) {
                $(datatable.wrap).addClass(pfx + 'datatable--lock');
                $(lockLeft).appendTo(tablePart);
              }

              if (lock.lockEnabled.left.length > 0 || lock.lockEnabled.right.length > 0) {
                $(lockScroll).appendTo(tablePart);
              }

              if (lock.lockEnabled.right.length > 0) {
                $(datatable.wrap).addClass(pfx + 'datatable--lock');
                $(lockRight).appendTo(tablePart);
              }
            };

            $(datatable.table).find('thead,tbody,tfoot').each(function () {
              var tablePart = this;

              if ($(this).find('.' + pfx + 'datatable__lock').length === 0) {
                $(this).ready(function () {
                  enableLock(tablePart);
                });
              }
            });
          }
        };
        lock.init();
        return lock;
      },

      /**
       * Render everything for resize
       */
      fullRender: function fullRender() {
        $(datatable.tableHead).empty();
        Plugin.setHeadTitle();

        if (Plugin.getOption('layout.footer')) {
          $(datatable.tableFoot).empty();
          Plugin.setHeadTitle(datatable.tableFoot);
        }

        Plugin.spinnerCallback(true);
        $(datatable.wrap).removeClass(pfx + 'datatable--loaded');
        Plugin.insertData();
      },
      lockEnabledColumns: function lockEnabledColumns() {
        var screen = $(window).width();
        var columns = options.columns;
        var enabled = {
          left: [],
          right: []
        };
        $.each(columns, function (i, column) {
          if (typeof column.locked !== 'undefined') {
            if (typeof column.locked.left !== 'undefined') {
              if (util.getBreakpoint(column.locked.left) <= screen) {
                enabled['left'].push(column.locked.left);
              }
            }

            if (typeof column.locked.right !== 'undefined') {
              if (util.getBreakpoint(column.locked.right) <= screen) {
                enabled['right'].push(column.locked.right);
              }
            }
          }
        });
        return enabled;
      },

      /**
       * After render event, called by
       * '+pfx+'-datatable--on-layout-updated
       * @param e
       * @param args
       */
      afterRender: function afterRender(e, args) {
        $(datatable).ready(function () {
          // redraw locked columns table
          if (Plugin.isLocked()) {
            Plugin.redraw();
          }

          $(datatable.tableBody).css('visibility', '');
          $(datatable.wrap).addClass(pfx + 'datatable--loaded');
          Plugin.spinnerCallback(false);
        });
      },
      hoverTimer: 0,
      isScrolling: false,
      setupHover: function setupHover() {
        $(window).scroll(function (e) {
          // stop hover when scrolling
          clearTimeout(Plugin.hoverTimer);
          Plugin.isScrolling = true;
        });
        $(datatable.tableBody).find('.' + pfx + 'datatable__cell').off('mouseenter', 'mouseleave').on('mouseenter', function () {
          // reset scroll timer to hover class
          Plugin.hoverTimer = setTimeout(function () {
            Plugin.isScrolling = false;
          }, 200);
          if (Plugin.isScrolling) return; // normal table

          var row = $(this).closest('.' + pfx + 'datatable__row').addClass(pfx + 'datatable__row--hover');
          var index = $(row).index() + 1; // lock table

          $(row).closest('.' + pfx + 'datatable__lock').parent().find('.' + pfx + 'datatable__row:nth-child(' + index + ')').addClass(pfx + 'datatable__row--hover');
        }).on('mouseleave', function () {
          // normal table
          var row = $(this).closest('.' + pfx + 'datatable__row').removeClass(pfx + 'datatable__row--hover');
          var index = $(row).index() + 1; // look table

          $(row).closest('.' + pfx + 'datatable__lock').parent().find('.' + pfx + 'datatable__row:nth-child(' + index + ')').removeClass(pfx + 'datatable__row--hover');
        });
      },

      /**
       * Adjust width of locked table containers by resize handler
       * @returns {number}
       */
      adjustLockContainer: function adjustLockContainer() {
        if (!Plugin.isLocked()) return 0; // refer to head dimension

        var containerWidth = $(datatable.tableHead).width();
        var lockLeft = $(datatable.tableHead).find('.' + pfx + 'datatable__lock--left').width();
        var lockRight = $(datatable.tableHead).find('.' + pfx + 'datatable__lock--right').width();
        if (typeof lockLeft === 'undefined') lockLeft = 0;
        if (typeof lockRight === 'undefined') lockRight = 0;
        var lockScroll = Math.floor(containerWidth - lockLeft - lockRight);
        $(datatable.table).find('.' + pfx + 'datatable__lock--scroll').css('width', lockScroll);
        return lockScroll;
      },

      /**
       * todo; not in use
       */
      dragResize: function dragResize() {
        var pressed = false;
        var start = undefined;
        var startX, startWidth;
        $(datatable.tableHead).find('.' + pfx + 'datatable__cell').mousedown(function (e) {
          start = $(this);
          pressed = true;
          startX = e.pageX;
          startWidth = $(this).width();
          $(start).addClass(pfx + 'datatable__cell--resizing');
        }).mousemove(function (e) {
          if (pressed) {
            var i = $(start).index();
            var tableBody = $(datatable.tableBody);
            var ifLocked = $(start).closest('.' + pfx + 'datatable__lock');

            if (ifLocked) {
              var lockedIndex = $(ifLocked).index();
              tableBody = $(datatable.tableBody).find('.' + pfx + 'datatable__lock').eq(lockedIndex);
            }

            $(tableBody).find('.' + pfx + 'datatable__row').each(function (tri, tr) {
              $(tr).find('.' + pfx + 'datatable__cell').eq(i).width(startWidth + (e.pageX - startX)).children().width(startWidth + (e.pageX - startX));
            });
            $(start).children().css('width', startWidth + (e.pageX - startX));
          }
        }).mouseup(function () {
          $(start).removeClass(pfx + 'datatable__cell--resizing');
          pressed = false;
        });
        $(document).mouseup(function () {
          $(start).removeClass(pfx + 'datatable__cell--resizing');
          pressed = false;
        });
      },

      /**
       * To prepare placeholder for table before content is loading
       */
      initHeight: function initHeight() {
        if (options.layout.height && options.layout.scroll) {
          var theadHeight = $(datatable.tableHead).find('.' + pfx + 'datatable__row').outerHeight();
          var tfootHeight = $(datatable.tableFoot).find('.' + pfx + 'datatable__row').outerHeight();
          var bodyHeight = options.layout.height;

          if (theadHeight > 0) {
            bodyHeight -= theadHeight;
          }

          if (tfootHeight > 0) {
            bodyHeight -= tfootHeight;
          } // scrollbar offset


          bodyHeight -= 2;
          $(datatable.tableBody).css('max-height', Math.floor(parseFloat(bodyHeight))); // set scrollable area fixed height
          // $(datatable.tableBody).find('.' + pfx + 'datatable__lock--scroll').css('height', Math.floor(parseFloat(bodyHeight)));
        }
      },

      /**
       * Setup base DOM (table, thead, tbody, tfoot) and create if not
       * exist.
       */
      setupBaseDOM: function setupBaseDOM() {
        // keep original state before datatable initialize
        datatable.initialDatatable = $(datatable).clone(); // main element

        if ($(datatable).prop('tagName') === 'TABLE') {
          // if main init element is <table>, wrap with div
          datatable.table = $(datatable).removeClass(pfx + 'datatable').addClass(pfx + 'datatable__table');

          if ($(datatable.table).parents('.' + pfx + 'datatable').length === 0) {
            datatable.table.wrap($('<div/>').addClass(pfx + 'datatable').addClass(pfx + 'datatable--' + options.layout.theme));
            datatable.wrap = $(datatable.table).parent();
          }
        } else {
          // create table
          datatable.wrap = $(datatable).addClass(pfx + 'datatable').addClass(pfx + 'datatable--' + options.layout.theme);
          datatable.table = $('<table/>').addClass(pfx + 'datatable__table').appendTo(datatable);
        }

        if (typeof options.layout["class"] !== 'undefined') {
          $(datatable.wrap).addClass(options.layout["class"]);
        }

        $(datatable.table).removeClass(pfx + 'datatable--destroyed').css('display', 'block'); // force disable save state

        if (typeof $(datatable).attr('id') === 'undefined') {
          Plugin.setOption('data.saveState', false);
          $(datatable.table).attr('id', util.getUniqueID(pfx + 'datatable--'));
        } // predefine table height


        if (Plugin.getOption('layout.minHeight')) $(datatable.table).css('min-height', Plugin.getOption('layout.minHeight'));
        if (Plugin.getOption('layout.height')) $(datatable.table).css('max-height', Plugin.getOption('layout.height')); // for normal table load

        if (options.data.type === null) {
          $(datatable.table).css('width', '').css('display', '');
        } // create table head element


        datatable.tableHead = $(datatable.table).find('thead');

        if ($(datatable.tableHead).length === 0) {
          datatable.tableHead = $('<thead/>').prependTo(datatable.table);
        } // create table head element


        datatable.tableBody = $(datatable.table).find('tbody');

        if ($(datatable.tableBody).length === 0) {
          datatable.tableBody = $('<tbody/>').appendTo(datatable.table);
        }

        if (typeof options.layout.footer !== 'undefined' && options.layout.footer) {
          // create table foot element
          datatable.tableFoot = $(datatable.table).find('tfoot');

          if ($(datatable.tableFoot).length === 0) {
            datatable.tableFoot = $('<tfoot/>').appendTo(datatable.table);
          }
        }
      },

      /**
       * Set column data before table manipulation.
       */
      setupCellField: function setupCellField(tableParts) {
        if (typeof tableParts === 'undefined') tableParts = $(datatable.table).children();
        var columns = options.columns;
        $.each(tableParts, function (part, tablePart) {
          $(tablePart).find('.' + pfx + 'datatable__row').each(function (tri, tr) {
            // prepare data
            $(tr).find('.' + pfx + 'datatable__cell').each(function (tdi, td) {
              if (typeof columns[tdi] !== 'undefined') {
                $(td).data(columns[tdi]);
              }
            });
          });
        });
      },

      /**
       * Set column template callback
       * @param tablePart
       */
      setupTemplateCell: function setupTemplateCell(tablePart) {
        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;
        var columns = options.columns;
        $(tablePart).find('.' + pfx + 'datatable__row').each(function (tri, tr) {
          // row data object, if any
          var obj = $(tr).data('obj');

          if (typeof obj === 'undefined') {
            return;
          } // @deprecated in v5.0.6
          // obj['getIndex'] = function() {
          // 	return tri;
          // };
          // @deprecated in v5.0.6
          // obj['getDatatable'] = function() {
          // 	return datatable;
          // };
          // @deprecated in v5.0.6


          var rowCallback = Plugin.getOption('rows.callback');

          if (typeof rowCallback === 'function') {
            rowCallback($(tr), obj, tri);
          } // before template row callback


          var beforeTemplate = Plugin.getOption('rows.beforeTemplate');

          if (typeof beforeTemplate === 'function') {
            beforeTemplate($(tr), obj, tri);
          } // if data object is undefined, collect from table


          if (typeof obj === 'undefined') {
            obj = {};
            $(tr).find('.' + pfx + 'datatable__cell').each(function (tdi, td) {
              // get column settings by field
              var column = $.grep(columns, function (n, i) {
                return $(td).data('field') === n.field;
              })[0];

              if (typeof column !== 'undefined') {
                obj[column['field']] = $(td).text();
              }
            });
          }

          $(tr).find('.' + pfx + 'datatable__cell').each(function (tdi, td) {
            // get column settings by field
            var column = $.grep(columns, function (n, i) {
              return $(td).data('field') === n.field;
            })[0];

            if (typeof column !== 'undefined') {
              // column template
              if (typeof column.template !== 'undefined') {
                var finalValue = ''; // template string

                if (typeof column.template === 'string') {
                  finalValue = Plugin.dataPlaceholder(column.template, obj);
                } // template callback function


                if (typeof column.template === 'function') {
                  finalValue = column.template(obj, tri, datatable);
                } // sanitize using DOMPurify if installed


                if (typeof DOMPurify !== 'undefined') {
                  finalValue = DOMPurify.sanitize(finalValue);
                }

                var span = document.createElement('span');
                span.innerHTML = finalValue; // insert to cell, wrap with span

                $(td).html(span); // set span overflow

                if (typeof column.overflow !== 'undefined') {
                  $(span).css('overflow', column.overflow);
                  $(span).css('position', 'relative');
                }
              }
            }
          }); // after template row callback

          var afterTemplate = Plugin.getOption('rows.afterTemplate');

          if (typeof afterTemplate === 'function') {
            afterTemplate($(tr), obj, tri);
          }
        });
      },

      /**
       * Setup extra system column properties
       * Note: selector checkbox, subtable toggle
       */
      setupSystemColumn: function setupSystemColumn() {
        datatable.dataSet = datatable.dataSet || []; // no records available

        if (datatable.dataSet.length === 0) return;
        var columns = options.columns;
        $(datatable.tableBody).find('.' + pfx + 'datatable__row').each(function (tri, tr) {
          $(tr).find('.' + pfx + 'datatable__cell').each(function (tdi, td) {
            // get column settings by field
            var column = $.grep(columns, function (n, i) {
              return $(td).data('field') === n.field;
            })[0];

            if (typeof column !== 'undefined') {
              var value = $(td).text(); // enable column selector

              if (typeof column.selector !== 'undefined' && column.selector !== false) {
                // check if checkbox exist
                if ($(td).find('.' + pfx + 'checkbox [type="checkbox"]').length > 0) return;
                $(td).addClass(pfx + 'datatable__cell--check'); // append checkbox

                var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox--single').append($('<input/>').attr('type', 'checkbox').attr('value', value).on('click', function () {
                  if ($(this).is(':checked')) {
                    // add checkbox active row class
                    Plugin.setActive(this);
                  } else {
                    // add checkbox active row class
                    Plugin.setInactive(this);
                  }
                })).append('&nbsp;<span></span>'); // checkbox selector has outline style

                if (typeof column.selector["class"] !== 'undefined') {
                  $(chk).addClass(column.selector["class"]);
                }

                $(td).children().html(chk);
              } // enable column subtable toggle


              if (typeof column.subtable !== 'undefined' && column.subtable) {
                // check if subtable toggle exist
                if ($(td).find('.' + pfx + 'datatable__toggle-subtable').length > 0) return; // append subtable toggle

                $(td).children().html($('<a/>').addClass(pfx + 'datatable__toggle-subtable').attr('href', '#').attr('data-value', value).append($('<i/>').addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));
              }
            }
          });
        }); // init checkbox for header/footer

        var initCheckbox = function initCheckbox(tr) {
          // get column settings by field
          var column = $.grep(columns, function (n, i) {
            return typeof n.selector !== 'undefined' && n.selector !== false;
          })[0];

          if (typeof column !== 'undefined') {
            // enable column selector
            if (typeof column.selector !== 'undefined' && column.selector !== false) {
              var td = $(tr).find('[data-field="' + column.field + '"]'); // check if checkbox exist

              if ($(td).find('.' + pfx + 'checkbox [type="checkbox"]').length > 0) return;
              $(td).addClass(pfx + 'datatable__cell--check'); // append checkbox

              var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox--single ' + pfx + 'checkbox--all').append($('<input/>').attr('type', 'checkbox').on('click', function () {
                if ($(this).is(':checked')) {
                  Plugin.setActiveAll(true);
                } else {
                  Plugin.setActiveAll(false);
                }
              })).append('&nbsp;<span></span>'); // checkbox selector has outline style

              if (typeof column.selector["class"] !== 'undefined') {
                $(chk).addClass(column.selector["class"]);
              }

              $(td).children().html(chk);
            }
          }
        };

        if (options.layout.header) {
          initCheckbox($(datatable.tableHead).find('.' + pfx + 'datatable__row').first());
        }

        if (options.layout.footer) {
          initCheckbox($(datatable.tableFoot).find('.' + pfx + 'datatable__row').first());
        }
      },
      maxWidthList: {},

      /**
       * Adjust width to match container size
       */
      adjustCellsWidth: function adjustCellsWidth() {
        // get table width
        var containerWidth = $(datatable.tableBody).innerWidth() - Plugin.iconOffset; // get total number of columns

        var columns = $(datatable.tableBody).find('.' + pfx + 'datatable__row:first-child').find('.' + pfx + 'datatable__cell'). // exclude expand icon
        not('.' + pfx + 'datatable__toggle-detail').not(':hidden').length;

        if (columns > 0) {
          //  remove reserved sort icon width
          containerWidth = containerWidth - Plugin.iconOffset * columns;
          var minWidth = Math.floor(containerWidth / columns); // minimum width

          if (minWidth <= Plugin.cellOffset) {
            minWidth = Plugin.cellOffset;
          }

          $(datatable.table).find('.' + pfx + 'datatable__row').find('.' + pfx + 'datatable__cell'). // exclude expand icon
          not('.' + pfx + 'datatable__toggle-detail').not(':hidden').each(function (tdi, td) {
            var width = minWidth;
            var dataWidth = $(td).data('width');

            if (typeof dataWidth !== 'undefined') {
              if (dataWidth === 'auto') {
                var field = $(td).data('field');

                if (Plugin.maxWidthList[field]) {
                  width = Plugin.maxWidthList[field];
                } else {
                  var cells = $(datatable.table).find('.' + pfx + 'datatable__cell[data-field="' + field + '"]');
                  width = Plugin.maxWidthList[field] = Math.max.apply(null, $(cells).map(function () {
                    return $(this).outerWidth();
                  }).get());
                }
              } else {
                width = dataWidth;
              }
            }

            $(td).children().css('width', Math.ceil(width));
          });
        }

        return datatable;
      },

      /**
       * Adjust height to match container size
       */
      adjustCellsHeight: function adjustCellsHeight() {
        $.each($(datatable.table).children(), function (part, tablePart) {
          var totalRows = $(tablePart).find('.' + pfx + 'datatable__row').first().parent().find('.' + pfx + 'datatable__row').length;

          for (var i = 1; i <= totalRows; i++) {
            var rows = $(tablePart).find('.' + pfx + 'datatable__row:nth-child(' + i + ')');

            if ($(rows).length > 0) {
              var maxHeight = Math.max.apply(null, $(rows).map(function () {
                return $(this).outerHeight();
              }).get());
              $(rows).css('height', Math.ceil(maxHeight));
            }
          }
        });
      },

      /**
       * Setup table DOM and classes
       */
      setupDOM: function setupDOM(table) {
        // set table classes
        $(table).find('> thead').addClass(pfx + 'datatable__head');
        $(table).find('> tbody').addClass(pfx + 'datatable__body');
        $(table).find('> tfoot').addClass(pfx + 'datatable__foot');
        $(table).find('tr').addClass(pfx + 'datatable__row');
        $(table).find('tr > th, tr > td').addClass(pfx + 'datatable__cell');
        $(table).find('tr > th, tr > td').each(function (i, td) {
          if ($(td).find('span').length === 0) {
            $(td).wrapInner($('<span/>').css('width', Plugin.cellOffset));
          }
        });
      },

      /**
       * Default scrollbar
       * @returns {{tableLocked: null, init: init, onScrolling:
       *     onScrolling}}
       */
      scrollbar: function scrollbar() {
        var scroll = {
          scrollable: null,
          tableLocked: null,
          initPosition: null,
          init: function init() {
            var screen = util.getViewPort().width; // setup scrollable datatable

            if (options.layout.scroll) {
              // add scrollable datatable class
              $(datatable.wrap).addClass(pfx + 'datatable--scroll');
              var scrollable = $(datatable.tableBody).find('.' + pfx + 'datatable__lock--scroll'); // check if scrollable area have rows

              if ($(scrollable).find('.' + pfx + 'datatable__row').length > 0 && $(scrollable).length > 0) {
                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable__lock--scroll > .' + pfx + 'datatable__row');
                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable__lock--scroll > .' + pfx + 'datatable__row');
                scroll.tableLocked = $(datatable.tableBody).find('.' + pfx + 'datatable__lock:not(.' + pfx + 'datatable__lock--scroll)');

                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {
                  scroll.initCustomScrollbar(scrollable[0]);
                } else {
                  scroll.initDefaultScrollbar(scrollable);
                }
              } else if ($(datatable.tableBody).find('.' + pfx + 'datatable__row').length > 0) {
                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable__row');
                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable__row');

                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {
                  scroll.initCustomScrollbar(datatable.tableBody);
                } else {
                  scroll.initDefaultScrollbar(datatable.tableBody);
                }
              }
            }
          },
          initDefaultScrollbar: function initDefaultScrollbar(scrollable) {
            // get initial scroll position
            scroll.initPosition = $(scrollable).scrollLeft();
            $(scrollable).css('overflow-y', 'auto').off().on('scroll', scroll.onScrolling);
            $(scrollable).css('overflow-x', 'auto');
          },
          onScrolling: function onScrolling(e) {
            var left = $(this).scrollLeft();
            var top = $(this).scrollTop();

            if (util.isRTL()) {
              // deduct initial position for RTL
              left = left - scroll.initPosition;
            }

            $(scroll.scrollHead).css('left', -left);
            $(scroll.scrollFoot).css('left', -left);
            $(scroll.tableLocked).each(function (i, table) {
              if (Plugin.isLocked()) {
                // scrollbar offset
                top -= 1;
              }

              $(table).css('top', -top);
            });
          },
          initCustomScrollbar: function initCustomScrollbar(scrollable) {
            scroll.scrollable = scrollable; // create a new instance for table body with scrollbar

            Plugin.initScrollbar(scrollable); // get initial scroll position

            scroll.initPosition = $(scrollable).scrollLeft();
            $(scrollable).off().on('scroll', scroll.onScrolling);
          }
        };
        scroll.init();
        return scroll;
      },

      /**
       * Init custom scrollbar and reset position
       * @param element
       * @param options
       */
      initScrollbar: function initScrollbar(element, options) {
        if (!element || !element.nodeName) {
          return;
        }

        $(datatable.tableBody).css('overflow', '');
        var ps = $(element).data('ps');

        if (util.hasClass(element, 'ps') && typeof ps !== 'undefined') {
          ps.update();
        } else {
          ps = new PerfectScrollbar(element, Object.assign({}, {
            wheelSpeed: 0.5,
            swipeEasing: true,
            // wheelPropagation: false,
            minScrollbarLength: 40,
            maxScrollbarLength: 300,
            suppressScrollX: Plugin.getOption('rows.autoHide') && !Plugin.isLocked()
          }, options));
          $(element).data('ps', ps);
        } // reset perfect scrollbar on resize


        $(window).resize(function () {
          ps.update();
        });
      },

      /**
       * Set column title from options.columns settings
       */
      setHeadTitle: function setHeadTitle(tablePart) {
        if (typeof tablePart === 'undefined') tablePart = datatable.tableHead;
        tablePart = $(tablePart)[0];
        var columns = options.columns;
        var row = tablePart.getElementsByTagName('tr')[0];
        var ths = tablePart.getElementsByTagName('td');

        if (typeof row === 'undefined') {
          row = document.createElement('tr');
          tablePart.appendChild(row);
        }

        $.each(columns, function (i, column) {
          var th = ths[i];

          if (typeof th === 'undefined') {
            th = document.createElement('th');
            row.appendChild(th);
          } // set column title


          if (typeof column['title'] !== 'undefined') {
            th.innerHTML = column.title;
            th.setAttribute('data-field', column.field);
            util.addClass(th, column["class"]); // set disable autoHide or force enable

            if (typeof column.autoHide !== 'undefined') {
              if (column.autoHide !== true) {
                th.setAttribute('data-autohide-disabled', column.autoHide);
              } else {
                th.setAttribute('data-autohide-enabled', column.autoHide);
              }
            }

            $(th).data(column);
          } // set header attr option


          if (typeof column.attr !== 'undefined') {
            $.each(column.attr, function (key, val) {
              th.setAttribute(key, val);
            });
          } // apply text align to thead/tfoot


          if (typeof column.textAlign !== 'undefined') {
            var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';
            util.addClass(th, align);
          }
        });
        Plugin.setupDOM(tablePart);
      },

      /**
       * Initiate to get remote or local data via ajax
       */
      dataRender: function dataRender(action) {
        $(datatable.table).siblings('.' + pfx + 'datatable__pager').removeClass(pfx + 'datatable--paging-loaded');

        var buildMeta = function buildMeta() {
          datatable.dataSet = datatable.dataSet || [];
          Plugin.localDataUpdate(); // local pagination meta

          var meta = Plugin.getDataSourceParam('pagination');

          if (meta.perpage === 0) {
            meta.perpage = options.data.pageSize || 10;
          }

          meta.total = datatable.dataSet.length;
          var start = Math.max(meta.perpage * (meta.page - 1), 0);
          var end = Math.min(start + meta.perpage, meta.total);
          datatable.dataSet = $(datatable.dataSet).slice(start, end);
          return meta;
        };

        var afterGetData = function afterGetData(result) {
          var localPagingCallback = function localPagingCallback(ctx, meta) {
            if (!$(ctx.pager).hasClass(pfx + 'datatable--paging-loaded')) {
              $(ctx.pager).remove();
              ctx.init(meta);
            }

            $(ctx.pager).off().on(pfx + 'datatable--on-goto-page', function (e) {
              $(ctx.pager).remove();
              ctx.init(meta);
            });
            var start = Math.max(meta.perpage * (meta.page - 1), 0);
            var end = Math.min(start + meta.perpage, meta.total);
            Plugin.localDataUpdate();
            datatable.dataSet = $(datatable.dataSet).slice(start, end); // insert data into table content

            Plugin.insertData();
          };

          $(datatable.wrap).removeClass(pfx + 'datatable--error'); // pagination enabled

          if (options.pagination) {
            if (options.data.serverPaging && options.data.type !== 'local') {
              // server pagination
              var serverMeta = Plugin.getObject('meta', result || null);

              if (serverMeta !== null) {
                Plugin.pagingObject = Plugin.paging(serverMeta);
              } else {
                // no meta object from server response, fallback to local pagination
                Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);
              }
            } else {
              // local pagination can be used by remote data also
              Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);
            }
          } else {
            // pagination is disabled
            Plugin.localDataUpdate();
          } // insert data into table content


          Plugin.insertData();
        }; // get local datasource


        if (options.data.type === 'local' // for remote json datasource
        // || typeof options.data.source.read === 'undefined' && datatable.dataSet !== null
        // for remote datasource, server sorting is disabled and data already received from remote
        || options.data.serverSorting === false && action === 'sort' || options.data.serverFiltering === false && action === 'search') {
          setTimeout(function () {
            afterGetData();
            Plugin.setAutoColumns();
          });
          return;
        } // getting data from remote only


        Plugin.getData().done(afterGetData);
      },

      /**
       * Process ajax data
       */
      insertData: function insertData() {
        datatable.dataSet = datatable.dataSet || [];
        var params = Plugin.getDataSourceParam(); // get row attributes

        var pagination = params.pagination;
        var start = (Math.max(pagination.page, 1) - 1) * pagination.perpage;
        var end = Math.min(pagination.page, pagination.pages) * pagination.perpage;
        var rowProps = {};

        if (typeof options.data.attr.rowProps !== 'undefined' && options.data.attr.rowProps.length) {
          rowProps = options.data.attr.rowProps.slice(start, end);
        }

        var tableBody = document.createElement('tbody');
        tableBody.style.visibility = 'hidden';
        var colLength = options.columns.length;
        $.each(datatable.dataSet, function (rowIndex, row) {
          var tr = document.createElement('tr');
          tr.setAttribute('data-row', rowIndex); // keep data object to row

          $(tr).data('obj', row);

          if (typeof rowProps[rowIndex] !== 'undefined') {
            $.each(rowProps[rowIndex], function () {
              tr.setAttribute(this.name, this.value);
            });
          }

          var cellIndex = 0;
          var tds = [];

          for (var a = 0; a < colLength; a += 1) {
            var column = options.columns[a];
            var classes = []; // add sorted class to cells

            if (Plugin.getObject('sort.field', params) === column.field) {
              classes.push(pfx + 'datatable__cell--sorted');
            } // apply text align


            if (typeof column.textAlign !== 'undefined') {
              var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';
              classes.push(align);
            } // var classAttr = '';


            if (typeof column["class"] !== 'undefined') {
              classes.push(column["class"]);
            }

            var td = document.createElement('td');
            util.addClass(td, classes.join(' '));
            td.setAttribute('data-field', column.field); // set disable autoHide or force enable

            if (typeof column.autoHide !== 'undefined') {
              if (column.autoHide !== true) {
                td.setAttribute('data-autohide-disabled', column.autoHide);
              } else {
                td.setAttribute('data-autohide-enabled', column.autoHide);
              }
            }

            td.innerHTML = Plugin.getObject(column.field, row);
            tr.appendChild(td);
          }

          tableBody.appendChild(tr);
        }); // display no records message

        if (datatable.dataSet.length === 0) {
          var errorSpan = document.createElement('span');
          util.addClass(errorSpan, pfx + 'datatable--error');
          errorSpan.innerHTML = Plugin.getOption('translate.records.noRecords');
          tableBody.appendChild(errorSpan);
          $(datatable.wrap).addClass(pfx + 'datatable--error ' + pfx + 'datatable--loaded');
          Plugin.spinnerCallback(false);
        } // replace existing table body


        $(datatable.tableBody).replaceWith(tableBody);
        datatable.tableBody = tableBody; // layout update

        Plugin.setupDOM(datatable.table);
        Plugin.setupCellField([datatable.tableBody]);
        Plugin.setupTemplateCell(datatable.tableBody);
        Plugin.layoutUpdate();
      },
      updateTableComponents: function updateTableComponents() {
        datatable.tableHead = $(datatable.table).children('thead').get(0);
        datatable.tableBody = $(datatable.table).children('tbody').get(0);
        datatable.tableFoot = $(datatable.table).children('tfoot').get(0);
      },

      /**
       * Call ajax for raw JSON data
       */
      getData: function getData() {
        // Plugin.spinnerCallback(true);
        var ajaxParams = {
          dataType: 'json',
          method: 'POST',
          data: {},
          timeout: Plugin.getOption('data.source.read.timeout') || 30000
        };

        if (options.data.type === 'local') {
          ajaxParams.url = options.data.source;
        }

        if (options.data.type === 'remote') {
          var data = Plugin.getDataSourceParam(); // remove if server params is not enabled

          if (!Plugin.getOption('data.serverPaging')) {
            delete data['pagination'];
          }

          if (!Plugin.getOption('data.serverSorting')) {
            delete data['sort'];
          }

          ajaxParams.data = $.extend({}, ajaxParams.data, Plugin.getOption('data.source.read.params'), data);
          ajaxParams = $.extend({}, ajaxParams, Plugin.getOption('data.source.read'));
          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source.read');
          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source'); // ajaxParams.data = $.extend(ajaxParams.data, data.pagination);
        }

        return $.ajax(ajaxParams).done(function (response, textStatus, jqXHR) {
          datatable.lastResponse = response; // extendible data map callback for custom datasource

          datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(response);
          Plugin.setAutoColumns();
          $(datatable).trigger(pfx + 'datatable--on-ajax-done', [datatable.dataSet]);
        }).fail(function (jqXHR, textStatus, errorThrown) {
          $(datatable).trigger(pfx + 'datatable--on-ajax-fail', [jqXHR]);
          $(datatable.tableBody).html($('<span/>').addClass(pfx + 'datatable--error').html(Plugin.getOption('translate.records.noRecords')));
          $(datatable.wrap).addClass(pfx + 'datatable--error ' + pfx + 'datatable--loaded');
          Plugin.spinnerCallback(false);
        }).always(function () {});
      },

      /**
       * Pagination object
       * @param meta if null, local pagination, otherwise remote
       *     pagination
       * @param callback for update data when navigating page
       */
      paging: function paging(meta, callback) {
        var pg = {
          meta: null,
          pager: null,
          paginateEvent: null,
          pagerLayout: {
            pagination: null,
            info: null
          },
          callback: null,
          init: function init(meta) {
            pg.meta = meta; // parse pagination meta to integer

            pg.meta.page = parseInt(pg.meta.page);
            pg.meta.pages = parseInt(pg.meta.pages);
            pg.meta.perpage = parseInt(pg.meta.perpage);
            pg.meta.total = parseInt(pg.meta.total); // always recount total pages

            pg.meta.pages = Math.max(Math.ceil(pg.meta.total / pg.meta.perpage), 1); // current page must be not over than total pages

            if (pg.meta.page > pg.meta.pages) pg.meta.page = pg.meta.pages; // set unique event name between tables

            pg.paginateEvent = Plugin.getTablePrefix('paging');
            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable__pager');
            if ($(pg.pager).hasClass(pfx + 'datatable--paging-loaded')) return; // if class .'+pfx+'datatable--paging-loaded not exist, recreate pagination

            $(pg.pager).remove(); // if no pages available

            if (pg.meta.pages === 0) return; // update datasource params

            Plugin.setDataSourceParam('pagination', {
              page: pg.meta.page,
              pages: pg.meta.pages,
              perpage: pg.meta.perpage,
              total: pg.meta.total
            }); // default callback function, contains remote pagination handler

            pg.callback = pg.serverCallback; // custom callback function

            if (typeof callback === 'function') pg.callback = callback;
            pg.addPaginateEvent();
            pg.populate();
            pg.meta.page = Math.max(pg.meta.page || 1, pg.meta.page);
            $(datatable).trigger(pg.paginateEvent, pg.meta);
            pg.pagingBreakpoint.call();
            $(window).resize(pg.pagingBreakpoint);
          },
          serverCallback: function serverCallback(ctx, meta) {
            Plugin.dataRender();
          },
          populate: function populate() {
            var icons = Plugin.getOption('layout.icons.pagination');
            var title = Plugin.getOption('translate.toolbar.pagination.items.default'); // pager root element

            pg.pager = $('<div/>').addClass(pfx + 'datatable__pager ' + pfx + 'datatable--paging-loaded'); // numbering links

            var pagerNumber = $('<ul/>').addClass(pfx + 'datatable__pager-nav');
            pg.pagerLayout['pagination'] = pagerNumber; // pager first/previous button

            $('<li/>').append($('<a/>').attr('title', title.first).addClass(pfx + 'datatable__pager-link ' + pfx + 'datatable__pager-link--first').append($('<i/>').addClass(icons.first)).on('click', pg.gotoMorePage).attr('data-page', 1)).appendTo(pagerNumber);
            $('<li/>').append($('<a/>').attr('title', title.prev).addClass(pfx + 'datatable__pager-link ' + pfx + 'datatable__pager-link--prev').append($('<i/>').addClass(icons.prev)).on('click', pg.gotoMorePage)).appendTo(pagerNumber); // more previous pages

            $('<li/>').append($('<a/>').attr('title', title.more).addClass(pfx + 'datatable__pager-link ' + pfx + 'datatable__pager-link--more-prev').html($('<i/>').addClass(icons.more)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);
            $('<li/>').append($('<input/>').attr('type', 'text').addClass(pfx + 'pager-input form-control').attr('title', title.input).on('keyup', function () {
              // on keyup update [data-page]
              $(this).attr('data-page', Math.abs($(this).val()));
            }).on('keypress', function (e) {
              // on keypressed enter button
              if (e.which === 13) pg.gotoMorePage(e);
            })).appendTo(pagerNumber);
            var pagesNumber = Plugin.getOption('toolbar.items.pagination.pages.desktop.pagesNumber');
            var end = Math.ceil(pg.meta.page / pagesNumber) * pagesNumber;
            var start = end - pagesNumber;

            if (end > pg.meta.pages) {
              end = pg.meta.pages;
            }

            for (var x = start; x < end; x++) {
              var pageNumber = x + 1;
              $('<li/>').append($('<a/>').addClass(pfx + 'datatable__pager-link ' + pfx + 'datatable__pager-link-number').text(pageNumber).attr('data-page', pageNumber).attr('title', pageNumber).on('click', pg.gotoPage)).appendTo(pagerNumber);
            } // more next pages


            $('<li/>').append($('<a/>').attr('title', title.more).addClass(pfx + 'datatable__pager-link ' + pfx + 'datatable__pager-link--more-next').html($('<i/>').addClass(icons.more)).on('click', pg.gotoMorePage)).appendTo(pagerNumber); // pager next/last button

            $('<li/>').append($('<a/>').attr('title', title.next).addClass(pfx + 'datatable__pager-link ' + pfx + 'datatable__pager-link--next').append($('<i/>').addClass(icons.next)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);
            $('<li/>').append($('<a/>').attr('title', title.last).addClass(pfx + 'datatable__pager-link ' + pfx + 'datatable__pager-link--last').append($('<i/>').addClass(icons.last)).on('click', pg.gotoMorePage).attr('data-page', pg.meta.pages)).appendTo(pagerNumber); // page info

            if (Plugin.getOption('toolbar.items.info')) {
              pg.pagerLayout['info'] = $('<div/>').addClass(pfx + 'datatable__pager-info').append($('<span/>').addClass(pfx + 'datatable__pager-detail'));
            }

            $.each(Plugin.getOption('toolbar.layout'), function (i, layout) {
              $(pg.pagerLayout[layout]).appendTo(pg.pager);
            }); // page size select

            var pageSizeSelect = $('<select/>').addClass('selectpicker ' + pfx + 'datatable__pager-size').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select')).attr('data-width', '60px').attr('data-container', 'body').val(pg.meta.perpage).on('change', pg.updatePerpage).prependTo(pg.pagerLayout['info']);
            var pageSizes = Plugin.getOption('toolbar.items.pagination.pageSizeSelect'); // default value here, to fix override option by user

            if (pageSizes.length == 0) pageSizes = [10, 20, 30, 50, 100];
            $.each(pageSizes, function (i, size) {
              var display = size;
              if (size === -1) display = Plugin.getOption('translate.toolbar.pagination.items.default.all');
              $('<option/>').attr('value', size).html(display).appendTo(pageSizeSelect);
            }); // init selectpicker to dropdown

            $(datatable).ready(function () {
              $('.selectpicker').selectpicker().on('hide.bs.select', function () {
                // fix dropup arrow icon on hide
                $(this).closest('.bootstrap-select').removeClass('dropup');
              }).siblings('.dropdown-toggle').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select'));
            });
            pg.paste();
          },
          paste: function paste() {
            // insert pagination based on placement position, top|bottom
            $.each($.unique(Plugin.getOption('toolbar.placement')), function (i, position) {
              if (position === 'bottom') {
                $(pg.pager).clone(true).insertAfter(datatable.table);
              }

              if (position === 'top') {
                // pager top need some extra space
                $(pg.pager).clone(true).addClass(pfx + 'datatable__pager--top').insertBefore(datatable.table);
              }
            });
          },
          gotoMorePage: function gotoMorePage(e) {
            e.preventDefault(); // $(this) is a link of .'+pfx+'datatable__pager-link

            if ($(this).attr('disabled') === 'disabled') return false;
            var page = $(this).attr('data-page'); // event from text input

            if (typeof page === 'undefined') {
              page = $(e.target).attr('data-page');
            }

            pg.openPage(parseInt(page));
            return false;
          },
          gotoPage: function gotoPage(e) {
            e.preventDefault(); // prevent from click same page number

            if ($(this).hasClass(pfx + 'datatable__pager-link--active')) return;
            pg.openPage(parseInt($(this).data('page')));
          },
          openPage: function openPage(page) {
            // currentPage is 1-based index
            pg.meta.page = parseInt(page);
            $(datatable).trigger(pg.paginateEvent, pg.meta);
            pg.callback(pg, pg.meta); // update page callback function

            $(pg.pager).trigger(pfx + 'datatable--on-goto-page', pg.meta);
          },
          updatePerpage: function updatePerpage(e) {
            e.preventDefault(); // if (Plugin.getOption('layout.height') === null) {
            // fix white space, when perpage is set from many records to less records
            // $('html, body').animate({scrollTop: $(datatable).position().top});
            // }

            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable__pager').removeClass(pfx + 'datatable--paging-loaded'); // on change select page size

            if (e.originalEvent) {
              pg.meta.perpage = parseInt($(this).val());
            }

            $(pg.pager).find('select.' + pfx + 'datatable__pager-size').val(pg.meta.perpage).attr('data-selected', pg.meta.perpage); // update datasource params

            Plugin.setDataSourceParam('pagination', {
              page: pg.meta.page,
              pages: pg.meta.pages,
              perpage: pg.meta.perpage,
              total: pg.meta.total
            }); // update page callback function

            $(pg.pager).trigger(pfx + 'datatable--on-update-perpage', pg.meta);
            $(datatable).trigger(pg.paginateEvent, pg.meta);
            pg.callback(pg, pg.meta); // update pagination info

            pg.updateInfo.call();
          },
          addPaginateEvent: function addPaginateEvent(e) {
            // pagination event
            $(datatable).off(pg.paginateEvent).on(pg.paginateEvent, function (e, meta) {
              Plugin.spinnerCallback(true);
              pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable__pager');
              var pagerNumber = $(pg.pager).find('.' + pfx + 'datatable__pager-nav'); // set sync active page class

              $(pagerNumber).find('.' + pfx + 'datatable__pager-link--active').removeClass(pfx + 'datatable__pager-link--active');
              $(pagerNumber).find('.' + pfx + 'datatable__pager-link-number[data-page="' + meta.page + '"]').addClass(pfx + 'datatable__pager-link--active'); // set next and previous link page number

              $(pagerNumber).find('.' + pfx + 'datatable__pager-link--prev').attr('data-page', Math.max(meta.page - 1, 1));
              $(pagerNumber).find('.' + pfx + 'datatable__pager-link--next').attr('data-page', Math.min(meta.page + 1, meta.pages)); // current page input value sync

              $(pg.pager).each(function () {
                $(this).find('.' + pfx + 'pager-input[type="text"]').prop('value', meta.page);
              });
              $(pg.pager).find('.' + pfx + 'datatable__pager-nav').show();

              if (meta.pages <= 1) {
                // hide pager if has 1 page
                $(pg.pager).find('.' + pfx + 'datatable__pager-nav').hide();
              } // update datasource params


              Plugin.setDataSourceParam('pagination', {
                page: pg.meta.page,
                pages: pg.meta.pages,
                perpage: pg.meta.perpage,
                total: pg.meta.total
              });
              $(pg.pager).find('select.' + pfx + 'datatable__pager-size').val(meta.perpage).attr('data-selected', meta.perpage); // clear active rows

              $(datatable.table).find('.' + pfx + 'checkbox > [type="checkbox"]').prop('checked', false);
              $(datatable.table).find('.' + pfx + 'datatable__row--active').removeClass(pfx + 'datatable__row--active');
              pg.updateInfo.call();
              pg.pagingBreakpoint.call(); // Plugin.resetScroll();
            });
          },
          updateInfo: function updateInfo() {
            var start = Math.max(pg.meta.perpage * (pg.meta.page - 1) + 1, 1);
            var end = Math.min(start + pg.meta.perpage - 1, pg.meta.total); // page info update

            $(pg.pager).find('.' + pfx + 'datatable__pager-info').find('.' + pfx + 'datatable__pager-detail').html(Plugin.dataPlaceholder(Plugin.getOption('translate.toolbar.pagination.items.info'), {
              // set start page 0 if the is no records. eg. Showing 0 - 0 of 0
              start: pg.meta.total === 0 ? 0 : start,
              end: pg.meta.perpage === -1 ? pg.meta.total : end,
              pageSize: pg.meta.perpage === -1 || pg.meta.perpage >= pg.meta.total ? pg.meta.total : pg.meta.perpage,
              total: pg.meta.total
            }));
          },

          /**
           * Update pagination layout breakpoint
           */
          pagingBreakpoint: function pagingBreakpoint() {
            // keep page links reference
            var pagerNumber = $(datatable.table).siblings('.' + pfx + 'datatable__pager').find('.' + pfx + 'datatable__pager-nav');
            if ($(pagerNumber).length === 0) return;
            var currentPage = Plugin.getCurrentPage();
            var pagerInput = $(pagerNumber).find('.' + pfx + 'pager-input').closest('li'); // reset

            $(pagerNumber).find('li').show(); // pagination update

            $.each(Plugin.getOption('toolbar.items.pagination.pages'), function (mode, option) {
              if (util.isInResponsiveRange(mode)) {
                switch (mode) {
                  case 'desktop':
                  case 'tablet':
                    var end = Math.ceil(currentPage / option.pagesNumber) * option.pagesNumber;
                    var start = end - option.pagesNumber;
                    $(pagerInput).hide();
                    pg.meta = Plugin.getDataSourceParam('pagination');
                    pg.paginationUpdate();
                    break;

                  case 'mobile':
                    $(pagerInput).show();
                    $(pagerNumber).find('.' + pfx + 'datatable__pager-link--more-prev').closest('li').hide();
                    $(pagerNumber).find('.' + pfx + 'datatable__pager-link--more-next').closest('li').hide();
                    $(pagerNumber).find('.' + pfx + 'datatable__pager-link-number').closest('li').hide();
                    break;
                }

                return false;
              }
            });
          },

          /**
           * Update pagination number and button display
           */
          paginationUpdate: function paginationUpdate() {
            var pager = $(datatable.table).siblings('.' + pfx + 'datatable__pager').find('.' + pfx + 'datatable__pager-nav'),
                pagerMorePrev = $(pager).find('.' + pfx + 'datatable__pager-link--more-prev'),
                pagerMoreNext = $(pager).find('.' + pfx + 'datatable__pager-link--more-next'),
                pagerFirst = $(pager).find('.' + pfx + 'datatable__pager-link--first'),
                pagerPrev = $(pager).find('.' + pfx + 'datatable__pager-link--prev'),
                pagerNext = $(pager).find('.' + pfx + 'datatable__pager-link--next'),
                pagerLast = $(pager).find('.' + pfx + 'datatable__pager-link--last'); // get visible page

            var pagerNumber = $(pager).find('.' + pfx + 'datatable__pager-link-number'); // get page before of first visible

            var morePrevPage = Math.max($(pagerNumber).first().data('page') - 1, 1);
            $(pagerMorePrev).each(function (i, prev) {
              $(prev).attr('data-page', morePrevPage);
            }); // show/hide <li>

            if (morePrevPage === 1) {
              $(pagerMorePrev).parent().hide();
            } else {
              $(pagerMorePrev).parent().show();
            } // get page after of last visible


            var moreNextPage = Math.min($(pagerNumber).last().data('page') + 1, pg.meta.pages);
            $(pagerMoreNext).each(function (i, prev) {
              $(pagerMoreNext).attr('data-page', moreNextPage).show();
            }); // show/hide <li>

            if (moreNextPage === pg.meta.pages // missing dot fix when last hidden page is one left
            && moreNextPage === $(pagerNumber).last().data('page')) {
              $(pagerMoreNext).parent().hide();
            } else {
              $(pagerMoreNext).parent().show();
            } // begin/end of pages


            if (pg.meta.page === 1) {
              $(pagerFirst).attr('disabled', true).addClass(pfx + 'datatable__pager-link--disabled');
              $(pagerPrev).attr('disabled', true).addClass(pfx + 'datatable__pager-link--disabled');
            } else {
              $(pagerFirst).removeAttr('disabled').removeClass(pfx + 'datatable__pager-link--disabled');
              $(pagerPrev).removeAttr('disabled').removeClass(pfx + 'datatable__pager-link--disabled');
            }

            if (pg.meta.page === pg.meta.pages) {
              $(pagerNext).attr('disabled', true).addClass(pfx + 'datatable__pager-link--disabled');
              $(pagerLast).attr('disabled', true).addClass(pfx + 'datatable__pager-link--disabled');
            } else {
              $(pagerNext).removeAttr('disabled').removeClass(pfx + 'datatable__pager-link--disabled');
              $(pagerLast).removeAttr('disabled').removeClass(pfx + 'datatable__pager-link--disabled');
            } // display more buttons


            var nav = Plugin.getOption('toolbar.items.pagination.navigation');
            if (!nav.first) $(pagerFirst).remove();
            if (!nav.prev) $(pagerPrev).remove();
            if (!nav.next) $(pagerNext).remove();
            if (!nav.last) $(pagerLast).remove();

            if (!nav.more) {
              $(pagerMorePrev).remove();
              $(pagerMoreNext).remove();
            }
          }
        };
        pg.init(meta);
        return pg;
      },

      /**
       * Hide/show table cell defined by
       * options[columns][i][responsive][visible/hidden]
       */
      columnHide: function columnHide() {
        var screen = util.getViewPort().width; // foreach columns setting

        $.each(options.columns, function (i, column) {
          if (typeof column.responsive !== 'undefined' || typeof column.visible !== 'undefined') {
            var field = column.field;
            var tds = $.grep($(datatable.table).find('.' + pfx + 'datatable__cell'), function (n, i) {
              return field === $(n).data('field');
            });
            setTimeout(function () {
              // hide by force
              if (Plugin.getObject('visible', column) === false) {
                $(tds).hide();
              } else {
                // show/hide by responsive breakpoint
                if (util.getBreakpoint(Plugin.getObject('responsive.hidden', column)) >= screen) {
                  $(tds).hide();
                } else {
                  $(tds).show();
                }

                if (util.getBreakpoint(Plugin.getObject('responsive.visible', column)) <= screen) {
                  $(tds).show();
                } else {
                  $(tds).hide();
                }
              }
            });
          }
        });
      },

      /**
       * Setup sub datatable
       */
      setupSubDatatable: function setupSubDatatable() {
        var subTableCallback = Plugin.getOption('detail.content');
        if (typeof subTableCallback !== 'function') return; // subtable already exist

        if ($(datatable.table).find('.' + pfx + 'datatable__subtable').length > 0) return;
        $(datatable.wrap).addClass(pfx + 'datatable--subtable');
        options.columns[0]['subtable'] = true; // toggle on open sub table

        var toggleSubTable = function toggleSubTable(e) {
          e.preventDefault(); // get parent row of this subtable

          var parentRow = $(this).closest('.' + pfx + 'datatable__row'); // get subtable row for sub table

          var subTableRow = $(parentRow).next('.' + pfx + 'datatable__row-subtable');

          if ($(subTableRow).length === 0) {
            // prepare DOM for sub table, each <tr> as parent and add <tr> as child table
            subTableRow = $('<tr/>').addClass(pfx + 'datatable__row-subtable ' + pfx + 'datatable__row-loading').hide().append($('<td/>').addClass(pfx + 'datatable__subtable').attr('colspan', Plugin.getTotalColumns()));
            $(parentRow).after(subTableRow); // add class to even row

            if ($(parentRow).hasClass(pfx + 'datatable__row--even')) {
              $(subTableRow).addClass(pfx + 'datatable__row-subtable--even');
            }
          }

          $(subTableRow).toggle();
          var subTable = $(subTableRow).find('.' + pfx + 'datatable__subtable'); // get id from first column of parent row

          var primaryKey = $(this).closest('[data-field]:first-child').find('.' + pfx + 'datatable__toggle-subtable').data('value');
          var icon = $(this).find('i').removeAttr('class'); // prevent duplicate datatable init

          if ($(parentRow).hasClass(pfx + 'datatable__row--subtable-expanded')) {
            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.collapse')); // remove expand class from parent row

            $(parentRow).removeClass(pfx + 'datatable__row--subtable-expanded'); // trigger event on collapse

            $(datatable).trigger(pfx + 'datatable--on-collapse-subtable', [parentRow]);
          } else {
            // expand and run callback function
            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.expand')); // add expand class to parent row

            $(parentRow).addClass(pfx + 'datatable__row--subtable-expanded'); // trigger event on expand

            $(datatable).trigger(pfx + 'datatable--on-expand-subtable', [parentRow]);
          } // prevent duplicate datatable init


          if ($(subTable).find('.' + pfx + 'datatable').length === 0) {
            // get data by primary id
            $.map(datatable.dataSet, function (n, i) {
              // primary id must be at the first column, otherwise e.data will be undefined
              if (primaryKey === n[options.columns[0].field]) {
                e.data = n;
                return true;
              }

              return false;
            }); // deprecated in v5.0.6

            e.detailCell = subTable;
            e.parentRow = parentRow;
            e.subTable = subTable; // run callback with event

            subTableCallback(e);
            $(subTable).children('.' + pfx + 'datatable').on(pfx + 'datatable--on-init', function (e) {
              $(subTableRow).removeClass(pfx + 'datatable__row-loading');
            });

            if (Plugin.getOption('data.type') === 'local') {
              $(subTableRow).removeClass(pfx + 'datatable__row-loading');
            }
          }
        };

        var columns = options.columns;
        $(datatable.tableBody).find('.' + pfx + 'datatable__row').each(function (tri, tr) {
          $(tr).find('.' + pfx + 'datatable__cell').each(function (tdi, td) {
            // get column settings by field
            var column = $.grep(columns, function (n, i) {
              return $(td).data('field') === n.field;
            })[0];

            if (typeof column !== 'undefined') {
              var value = $(td).text(); // enable column subtable toggle

              if (typeof column.subtable !== 'undefined' && column.subtable) {
                // check if subtable toggle exist
                if ($(td).find('.' + pfx + 'datatable__toggle-subtable').length > 0) return; // append subtable toggle

                $(td).html($('<a/>').addClass(pfx + 'datatable__toggle-subtable').attr('href', '#').attr('data-value', value).attr('title', Plugin.getOption('detail.title')).on('click', toggleSubTable).append($('<i/>').css('width', $(td).data('width')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));
              }
            }
          });
        }); // $(datatable.tableHead).find('.'+pfx+'-datatable__row').first()
      },

      /**
       * Datasource mapping callback
       */
      dataMapCallback: function dataMapCallback(raw) {
        // static dataset array
        var dataSet = raw; // dataset mapping callback

        if (typeof Plugin.getOption('data.source.read.map') === 'function') {
          return Plugin.getOption('data.source.read.map')(raw);
        } else {
          // default data mapping fallback
          if (typeof raw !== 'undefined' && typeof raw.data !== 'undefined') {
            dataSet = raw.data;
          }
        }

        return dataSet;
      },
      isSpinning: false,

      /**
       * BlockUI spinner callback
       * @param block
       * @param target
       */
      spinnerCallback: function spinnerCallback(block, target) {
        if (typeof target === 'undefined') target = datatable; // get spinner options

        var spinnerOptions = Plugin.getOption('layout.spinner'); // spinner is disabled

        if (typeof spinnerOptions === 'undefined' || !spinnerOptions) {
          return;
        }

        if (block) {
          if (!Plugin.isSpinning) {
            if (typeof spinnerOptions.message !== 'undefined' && spinnerOptions.message === true) {
              // use default spinner message from translation
              spinnerOptions.message = Plugin.getOption('translate.records.processing');
            }

            Plugin.isSpinning = true;

            if (typeof app !== 'undefined') {
              app.block(target, spinnerOptions);
            }
          }
        } else {
          Plugin.isSpinning = false;

          if (typeof app !== 'undefined') {
            app.unblock(target);
          }
        }
      },

      /**
       * Default sort callback function
       * @param data
       * @param sort
       * @param column
       * @returns {*|Array.<T>|{sort, field}|{asc, desc}}
       */
      sortCallback: function sortCallback(data, sort, column) {
        var type = column['type'] || 'string';
        var format = column['format'] || '';
        var field = column['field'];
        return $(data).sort(function (a, b) {
          var aField = a[field];
          var bField = b[field];

          switch (type) {
            case 'date':
              if (typeof moment === 'undefined') {
                throw new Error('Moment.js is required.');
              }

              var diff = moment(aField, format).diff(moment(bField, format));

              if (sort === 'asc') {
                return diff > 0 ? 1 : diff < 0 ? -1 : 0;
              } else {
                return diff < 0 ? 1 : diff > 0 ? -1 : 0;
              }

              break;

            case 'number':
              if (isNaN(parseFloat(aField)) && aField != null) {
                aField = Number(aField.replace(/[^0-9\.-]+/g, ''));
              }

              if (isNaN(parseFloat(bField)) && bField != null) {
                bField = Number(bField.replace(/[^0-9\.-]+/g, ''));
              }

              aField = parseFloat(aField);
              bField = parseFloat(bField);

              if (sort === 'asc') {
                return aField > bField ? 1 : aField < bField ? -1 : 0;
              } else {
                return aField < bField ? 1 : aField > bField ? -1 : 0;
              }

              break;

            case 'html':
              return $(data).sort(function (a, b) {
                // get the text only from html
                aField = $(a[field]).text();
                bField = $(b[field]).text(); // sort

                if (sort === 'asc') {
                  return aField > bField ? 1 : aField < bField ? -1 : 0;
                } else {
                  return aField < bField ? 1 : aField > bField ? -1 : 0;
                }
              });
              break;

            case 'string':
            default:
              if (sort === 'asc') {
                return aField > bField ? 1 : aField < bField ? -1 : 0;
              } else {
                return aField < bField ? 1 : aField > bField ? -1 : 0;
              }

              break;
          }
        });
      },

      /**
       * Custom debug log
       * @param text
       * @param obj
       */
      log: function log(text, obj) {
        if (typeof obj === 'undefined') obj = '';

        if (datatable.debug) {
          console.log(text, obj);
        }
      },

      /**
       * Auto hide columnds overflow in row
       */
      autoHide: function autoHide() {
        var hiddenExist = false; // force hide enabled

        var hidDefault = $(datatable.table).find('[data-autohide-enabled]');

        if (hidDefault.length) {
          hiddenExist = true;
          hidDefault.hide();
        }

        var toggleHiddenColumns = function toggleHiddenColumns(e) {
          e.preventDefault();
          var row = $(this).closest('.' + pfx + 'datatable__row');
          var detailRow = $(row).next();

          if (!$(detailRow).hasClass(pfx + 'datatable__row-detail')) {
            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.collapse')).addClass(Plugin.getOption('layout.icons.rowDetail.expand'));
            var hiddenCells = $(row).find('.' + pfx + 'datatable__cell:hidden');
            var clonedCells = hiddenCells.clone().show();
            detailRow = $('<tr/>').addClass(pfx + 'datatable__row-detail').insertAfter(row);
            var detailRowTd = $('<td/>').addClass(pfx + 'datatable__detail').attr('colspan', Plugin.getTotalColumns()).appendTo(detailRow);
            var detailSubTable = $('<table/>');
            $(clonedCells).each(function () {
              var field = $(this).data('field');
              var column = $.grep(options.columns, function (n, i) {
                return field === n.field;
              })[0];

              if (typeof column === 'undefined' || column.visible !== false) {
                $(detailSubTable).append($('<tr class="' + pfx + 'datatable__row"></tr>').append($('<td class="' + pfx + 'datatable__cell"></td>').append($('<span/>').append(column.title))).append(this));
              }
            });
            $(detailRowTd).append(detailSubTable);
          } else {
            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.expand')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'));
            $(detailRow).remove();
          }
        };

        setTimeout(function () {
          $(datatable.table).find('.' + pfx + 'datatable__cell').show();
          $(datatable.tableBody).each(function () {
            var recursive = 0;

            while ($(this)[0].offsetWidth < $(this)[0].scrollWidth && recursive < options.columns.length) {
              $(datatable.table).find('.' + pfx + 'datatable__row').each(function (i) {
                var cell = $(this).find('.' + pfx + 'datatable__cell:not(:hidden):not([data-autohide-disabled])').last();
                $(cell).hide();
                hiddenExist = true;
              });
              recursive++;
            }
          });

          if (hiddenExist) {
            // toggle show hidden columns
            $(datatable.tableBody).find('.' + pfx + 'datatable__row').each(function () {
              // if no toggle yet
              if ($(this).find('.' + pfx + 'datatable__toggle-detail').length === 0) {
                // add toggle
                $(this).prepend($('<td/>').addClass(pfx + 'datatable__cell ' + pfx + 'datatable__toggle-detail').append($('<a/>').addClass(pfx + 'datatable__toggle-detail').attr('href', '').on('click', toggleHiddenColumns).append('<i class="' + Plugin.getOption('layout.icons.rowDetail.collapse') + '"></i>')));
              } // check if subtable toggle exist


              if ($(datatable.tableHead).find('.' + pfx + 'datatable__toggle-detail').length === 0) {
                // add empty column to the header and footer
                $(datatable.tableHead).find('.' + pfx + 'datatable__row').first().prepend('<th class="' + pfx + 'datatable__cell ' + pfx + 'datatable__toggle-detail"><span></span></th>');
                $(datatable.tableFoot).find('.' + pfx + 'datatable__row').first().prepend('<th class="' + pfx + 'datatable__cell ' + pfx + 'datatable__toggle-detail"><span></span></th>');
              } else {
                $(datatable.tableHead).find('.' + pfx + 'datatable__toggle-detail').find('span');
              }
            });
          }
        });
        Plugin.adjustCellsWidth.call();
      },

      /**
       * To enable auto columns features for remote data source
       */
      setAutoColumns: function setAutoColumns() {
        if (Plugin.getOption('data.autoColumns')) {
          $.each(datatable.dataSet[0], function (k, v) {
            var found = $.grep(options.columns, function (n, i) {
              return k === n.field;
            });

            if (found.length === 0) {
              options.columns.push({
                field: k,
                title: k
              });
            }
          });
          $(datatable.tableHead).find('.' + pfx + 'datatable__row').remove();
          Plugin.setHeadTitle();

          if (Plugin.getOption('layout.footer')) {
            $(datatable.tableFoot).find('.' + pfx + 'datatable__row').remove();
            Plugin.setHeadTitle(datatable.tableFoot);
          }
        }
      },

      /********************
       ** HELPERS
       ********************/

      /**
       * Check if table is a locked colums table
       */
      isLocked: function isLocked() {
        var isLocked = Plugin.lockEnabledColumns();
        return isLocked.left.length > 0 || isLocked.right.length > 0;
      },
      isSubtable: function isSubtable() {
        return util.hasClass(datatable.wrap[0], pfx + 'datatable--subtable') || false;
      },

      /**
       * Get total extra space of an element for width calculation,
       * including padding, margin, border
       * @param element
       * @returns {number}
       */
      getExtraSpace: function getExtraSpace(element) {
        var padding = parseInt($(element).css('paddingRight')) + parseInt($(element).css('paddingLeft'));
        var margin = parseInt($(element).css('marginRight')) + parseInt($(element).css('marginLeft'));
        var border = Math.ceil($(element).css('border-right-width').replace('px', ''));
        return padding + margin + border;
      },

      /**
       * Insert data of array into {{ }} template placeholder
       * @param template
       * @param data
       * @returns {*}
       */
      dataPlaceholder: function dataPlaceholder(template, data) {
        var result = template;
        $.each(data, function (key, val) {
          result = result.replace('{{' + key + '}}', val);
        });
        return result;
      },

      /**
       * Get table unique ID
       * Note: table unique change each time refreshed
       * @param suffix
       * @returns {*}
       */
      getTableId: function getTableId(suffix) {
        if (typeof suffix === 'undefined') suffix = '';
        var id = $(datatable).attr('id');

        if (typeof id === 'undefined') {
          id = $(datatable).attr('class').split(' ')[0];
        }

        return id + suffix;
      },

      /**
       * Get table prefix with depth number
       */
      getTablePrefix: function getTablePrefix(suffix) {
        if (typeof suffix !== 'undefined') suffix = '-' + suffix;
        return Plugin.getTableId() + '-' + Plugin.getDepth() + suffix;
      },

      /**
       * Get current table depth of sub table
       * @returns {number}
       */
      getDepth: function getDepth() {
        var depth = 0;
        var table = datatable.table;

        do {
          table = $(table).parents('.' + pfx + 'datatable__table');
          depth++;
        } while ($(table).length > 0);

        return depth;
      },

      /**
       * Keep state item
       * @param key
       * @param value
       */
      stateKeep: function stateKeep(key, value) {
        key = Plugin.getTablePrefix(key);
        if (Plugin.getOption('data.saveState') === false) return;

        if (Plugin.getOption('data.saveState.webstorage') && localStorage) {
          localStorage.setItem(key, JSON.stringify(value));
        }

        if (Plugin.getOption('data.saveState.cookie')) {
          Cookies.set(key, JSON.stringify(value));
        }
      },

      /**
       * Get state item
       * @param key
       * @param defValue
       */
      stateGet: function stateGet(key, defValue) {
        key = Plugin.getTablePrefix(key);
        if (Plugin.getOption('data.saveState') === false) return;
        var value = null;

        if (Plugin.getOption('data.saveState.webstorage') && localStorage) {
          value = localStorage.getItem(key);
        } else {
          value = Cookies.get(key);
        }

        if (typeof value !== 'undefined' && value !== null) {
          return JSON.parse(value);
        }
      },

      /**
       * Update data in state without clear existing
       * @param key
       * @param value
       */
      stateUpdate: function stateUpdate(key, value) {
        var ori = Plugin.stateGet(key);
        if (typeof ori === 'undefined' || ori === null) ori = {};
        Plugin.stateKeep(key, $.extend({}, ori, value));
      },

      /**
       * Remove state item
       * @param key
       */
      stateRemove: function stateRemove(key) {
        key = Plugin.getTablePrefix(key);

        if (localStorage) {
          localStorage.removeItem(key);
        }

        Cookies.remove(key);
      },

      /**
       * Get total columns.
       */
      getTotalColumns: function getTotalColumns(tablePart) {
        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;
        return $(tablePart).find('.' + pfx + 'datatable__row').first().find('.' + pfx + 'datatable__cell').length;
      },

      /**
       * Get table row. Useful to get row when current table is in lock
       * mode. Can be used for both lock and normal table mode. By
       * default, returning result will be in a list of <td>.
       * @param tablePart
       * @param row 1-based index
       * @param tdOnly Optional. Default true
       * @returns {*}
       */
      getOneRow: function getOneRow(tablePart, row, tdOnly) {
        if (typeof tdOnly === 'undefined') tdOnly = true; // get list of <tr>

        var result = $(tablePart).find('.' + pfx + 'datatable__row:not(.' + pfx + 'datatable__row-detail):nth-child(' + row + ')');

        if (tdOnly) {
          // get list of <td> or <th>
          result = result.find('.' + pfx + 'datatable__cell');
        }

        return result;
      },

      /**
       * Sort table row at HTML level by column index.
       * todo; Not in use.
       * @param header Header sort clicked
       * @param sort asc|desc. Optional. Default asc
       * @param int Boolean. Optional. Comparison value parse to integer.
       *     Default false
       */
      sortColumn: function sortColumn(header, sort, _int) {
        if (typeof sort === 'undefined') sort = 'asc'; // desc

        if (typeof _int === 'undefined') _int = false;
        var column = $(header).index();
        var rows = $(datatable.tableBody).find('.' + pfx + 'datatable__row');
        var hIndex = $(header).closest('.' + pfx + 'datatable__lock').index();

        if (hIndex !== -1) {
          rows = $(datatable.tableBody).find('.' + pfx + 'datatable__lock:nth-child(' + (hIndex + 1) + ')').find('.' + pfx + 'datatable__row');
        }

        var container = $(rows).parent();
        $(rows).sort(function (a, b) {
          var tda = $(a).find('td:nth-child(' + column + ')').text();
          var tdb = $(b).find('td:nth-child(' + column + ')').text();

          if (_int) {
            // useful for integer type sorting
            tda = parseInt(tda);
            tdb = parseInt(tdb);
          }

          if (sort === 'asc') {
            return tda > tdb ? 1 : tda < tdb ? -1 : 0;
          } else {
            return tda < tdb ? 1 : tda > tdb ? -1 : 0;
          }
        }).appendTo(container);
      },

      /**
       * Perform sort remote and local
       */
      sorting: function sorting() {
        var sortObj = {
          init: function init() {
            if (options.sortable) {
              $(datatable.tableHead).find('.' + pfx + 'datatable__cell:not(.' + pfx + 'datatable__cell--check)').addClass(pfx + 'datatable__cell--sort').off('click').on('click', sortObj.sortClick); // first init

              sortObj.setIcon();
            }
          },
          setIcon: function setIcon() {
            var meta = Plugin.getDataSourceParam('sort');
            if ($.isEmptyObject(meta)) return;
            var column = Plugin.getColumnByField(meta.field); // sort is disabled for this column

            if (typeof column !== 'undefined' && typeof column.sortable !== 'undefined' && column.sortable === false) return; // sort icon beside column header

            var td = $(datatable.tableHead).find('.' + pfx + 'datatable__cell[data-field="' + meta.field + '"]').attr('data-sort', meta.sort);
            var sorting = $(td).find('span');
            var icon = $(sorting).find('i');
            var icons = Plugin.getOption('layout.icons.sort'); // update sort icon; desc & asc

            if ($(icon).length > 0) {
              $(icon).removeAttr('class').addClass(icons[meta.sort]);
            } else {
              $(sorting).append($('<i/>').addClass(icons[meta.sort]));
            } // set sorted class to header on init


            $(td).addClass(pfx + 'datatable__cell--sorted');
          },
          sortClick: function sortClick(e) {
            var meta = Plugin.getDataSourceParam('sort');
            var field = $(this).data('field');
            var column = Plugin.getColumnByField(field); // sort is disabled for this column

            if (typeof column.sortable !== 'undefined' && column.sortable === false) return; // set sorted class to header

            $(datatable.tableHead).find('th').removeClass(pfx + 'datatable__cell--sorted');
            util.addClass(this, pfx + 'datatable__cell--sorted');
            $(datatable.tableHead).find('.' + pfx + 'datatable__cell > span > i').remove();

            if (options.sortable) {
              Plugin.spinnerCallback(true);
              var sort = 'desc';

              if (Plugin.getObject('field', meta) === field) {
                sort = Plugin.getObject('sort', meta);
              } // toggle sort


              sort = typeof sort === 'undefined' || sort === 'desc' ? 'asc' : 'desc'; // update field and sort params

              meta = {
                field: field,
                sort: sort
              };
              Plugin.setDataSourceParam('sort', meta);
              sortObj.setIcon();
              setTimeout(function () {
                Plugin.dataRender('sort');
                $(datatable).trigger(pfx + 'datatable--on-sort', meta);
              }, 300);
            }
          }
        };
        sortObj.init();
      },

      /**
       * Update JSON data list linked with sort, filter and pagination.
       * Call this method, before using dataSet variable.
       * @returns {*|null}
       */
      localDataUpdate: function localDataUpdate() {
        var params = Plugin.getDataSourceParam();

        if (typeof datatable.originalDataSet === 'undefined') {
          datatable.originalDataSet = datatable.dataSet;
        }

        var field = Plugin.getObject('sort.field', params);
        var sort = Plugin.getObject('sort.sort', params);
        var column = Plugin.getColumnByField(field);

        if (typeof column !== 'undefined' && Plugin.getOption('data.serverSorting') !== true) {
          if (typeof column.sortCallback === 'function') {
            datatable.dataSet = column.sortCallback(datatable.originalDataSet, sort, column);
          } else {
            datatable.dataSet = Plugin.sortCallback(datatable.originalDataSet, sort, column);
          }
        } else {
          datatable.dataSet = datatable.originalDataSet;
        } // if server filter enable, don't pass local filter


        if (_typeof(params.query) === 'object' && !Plugin.getOption('data.serverFiltering')) {
          params.query = params.query || {};

          var nestedSearch = function nestedSearch(obj) {
            for (var field in obj) {
              if (!obj.hasOwnProperty(field)) continue;

              if (typeof obj[field] === 'string') {
                if (obj[field].toLowerCase() == search || obj[field].toLowerCase().indexOf(search) !== -1) {
                  return true;
                }
              } else if (typeof obj[field] === 'number') {
                if (obj[field] === search) {
                  return true;
                }
              } else if (_typeof(obj[field]) === 'object') {
                if (nestedSearch(obj[field])) {
                  return true;
                }
              }
            }

            return false;
          };

          var search = $(Plugin.getOption('search.input')).val();

          if (typeof search !== 'undefined' && search !== '') {
            search = search.toLowerCase();
            datatable.dataSet = $.grep(datatable.dataSet, nestedSearch); // remove generalSearch as we don't need this for next columns filter

            delete params.query[Plugin.getGeneralSearchKey()];
          } // remove empty element from array


          $.each(params.query, function (k, v) {
            if (v === '') {
              delete params.query[k];
            }
          }); // filter array by query

          datatable.dataSet = Plugin.filterArray(datatable.dataSet, params.query); // reset array index

          datatable.dataSet = datatable.dataSet.filter(function () {
            return true;
          });
        }

        return datatable.dataSet;
      },

      /**
       * Utility helper to filter array by object pair of {key:value}
       * @param list
       * @param args
       * @param operator
       * @returns {*}
       */
      filterArray: function filterArray(list, args, operator) {
        if (_typeof(list) !== 'object') {
          return [];
        }

        if (typeof operator === 'undefined') operator = 'AND';

        if (_typeof(args) !== 'object') {
          return list;
        }

        operator = operator.toUpperCase();

        if ($.inArray(operator, ['AND', 'OR', 'NOT']) === -1) {
          return [];
        }

        var count = Object.keys(args).length;
        var filtered = [];
        $.each(list, function (key, obj) {
          var to_match = obj;
          var matched = 0;
          $.each(args, function (m_key, m_value) {
            m_value = m_value instanceof Array ? m_value : [m_value];
            var match_property = Plugin.getObject(m_key, to_match);

            if (typeof match_property !== 'undefined' && match_property) {
              var lhs = match_property.toString().toLowerCase();
              m_value.forEach(function (item, index) {
                if (item.toString().toLowerCase() == lhs || lhs.indexOf(item.toString().toLowerCase()) !== -1) {
                  matched++;
                }
              });
            }
          });

          if ('AND' == operator && matched == count || 'OR' == operator && matched > 0 || 'NOT' == operator && 0 == matched) {
            filtered[key] = obj;
          }
        });
        list = filtered;
        return list;
      },

      /**
       * Reset lock column scroll to 0 when resize
       */
      resetScroll: function resetScroll() {
        if (typeof options.detail === 'undefined' && Plugin.getDepth() === 1) {
          $(datatable.table).find('.' + pfx + 'datatable__row').css('left', 0);
          $(datatable.table).find('.' + pfx + 'datatable__lock').css('top', 0);
          $(datatable.tableBody).scrollTop(0);
        }
      },

      /**
       * Get column options by field
       * @param field
       * @returns {boolean}
       */
      getColumnByField: function getColumnByField(field) {
        if (typeof field === 'undefined') return;
        var result;
        $.each(options.columns, function (i, column) {
          if (field === column.field) {
            result = column;
            return false;
          }
        });
        return result;
      },

      /**
       * Get default sort column
       */
      getDefaultSortColumn: function getDefaultSortColumn() {
        var result;
        $.each(options.columns, function (i, column) {
          if (typeof column.sortable !== 'undefined' && $.inArray(column.sortable, ['asc', 'desc']) !== -1) {
            result = {
              sort: column.sortable,
              field: column.field
            };
            return false;
          }
        });
        return result;
      },

      /**
       * Helper to get element dimensions, when the element is hidden
       * @param element
       * @param includeMargin
       * @returns {{width: number, height: number, innerWidth: number,
       *     innerHeight: number, outerWidth: number, outerHeight:
       *     number}}
       */
      getHiddenDimensions: function getHiddenDimensions(element, includeMargin) {
        var props = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        },
            dim = {
          width: 0,
          height: 0,
          innerWidth: 0,
          innerHeight: 0,
          outerWidth: 0,
          outerHeight: 0
        },
            hiddenParents = $(element).parents().addBack().not(':visible');
        includeMargin = typeof includeMargin === 'boolean' ? includeMargin : false;
        var oldProps = [];
        hiddenParents.each(function () {
          var old = {};

          for (var name in props) {
            old[name] = this.style[name];
            this.style[name] = props[name];
          }

          oldProps.push(old);
        });
        dim.width = $(element).width();
        dim.outerWidth = $(element).outerWidth(includeMargin);
        dim.innerWidth = $(element).innerWidth();
        dim.height = $(element).height();
        dim.innerHeight = $(element).innerHeight();
        dim.outerHeight = $(element).outerHeight(includeMargin);
        hiddenParents.each(function (i) {
          var old = oldProps[i];

          for (var name in props) {
            this.style[name] = old[name];
          }
        });
        return dim;
      },
      getGeneralSearchKey: function getGeneralSearchKey() {
        var searchInput = $(Plugin.getOption('search.input'));
        return $(searchInput).prop('name') || $(searchInput).prop('id');
      },

      /**
       * Get value by dot notation path string and to prevent undefined
       * errors
       * @param path String Dot notation path in string
       * @param object Object to iterate
       * @returns {*}
       */
      getObject: function getObject(path, object) {
        return path.split('.').reduce(function (obj, i) {
          return obj !== null && typeof obj[i] !== 'undefined' ? obj[i] : null;
        }, object);
      },

      /**
       * Extend object
       * @param obj
       * @param path
       * @param value
       * @returns {*}
       */
      extendObj: function extendObj(obj, path, value) {
        var levels = path.split('.'),
            i = 0;

        function createLevel(child) {
          var name = levels[i++];

          if (typeof child[name] !== 'undefined' && child[name] !== null) {
            if (_typeof(child[name]) !== 'object' && typeof child[name] !== 'function') {
              child[name] = {};
            }
          } else {
            child[name] = {};
          }

          if (i === levels.length) {
            child[name] = value;
          } else {
            createLevel(child[name]);
          }
        }

        createLevel(obj);
        return obj;
      },
      rowEvenOdd: function rowEvenOdd() {
        // row even class
        $(datatable.tableBody).find('.' + pfx + 'datatable__row').removeClass(pfx + 'datatable__row--even');

        if ($(datatable.wrap).hasClass(pfx + 'datatable--subtable')) {
          $(datatable.tableBody).find('.' + pfx + 'datatable__row:not(.' + pfx + 'datatable__row-detail):even').addClass(pfx + 'datatable__row--even');
        } else {
          $(datatable.tableBody).find('.' + pfx + 'datatable__row:nth-child(even)').addClass(pfx + 'datatable__row--even');
        }
      },

      /********************
       ** PUBLIC API METHODS
       ********************/
      // delay timer
      timer: 0,

      /**
       * Redraw datatable by recalculating its DOM elements, etc.
       * @returns {jQuery}
       */
      redraw: function redraw() {
        Plugin.adjustCellsWidth.call();

        if (Plugin.isLocked()) {
          // fix hiding cell width issue
          Plugin.scrollbar();
          Plugin.resetScroll();
          Plugin.adjustCellsHeight.call();
        }

        Plugin.adjustLockContainer.call();
        Plugin.initHeight.call();
        return datatable;
      },

      /**
       * Shortcode to reload
       * @returns {jQuery}
       */
      load: function load() {
        Plugin.reload();
        return datatable;
      },

      /**
       * Datasource reload
       * @returns {jQuery}
       */
      reload: function reload() {
        var delay = function () {
          return function (callback, ms) {
            clearTimeout(Plugin.timer);
            Plugin.timer = setTimeout(callback, ms);
          };
        }();

        delay(function () {
          // local only. remote pagination will skip this block
          if (!options.data.serverFiltering) {
            Plugin.localDataUpdate();
          }

          Plugin.dataRender();
          $(datatable).trigger(pfx + 'datatable--on-reloaded');
        }, Plugin.getOption('search.delay'));
        return datatable;
      },

      /**
       * Get record by record ID
       * @param id
       * @returns {jQuery}
       */
      getRecord: function getRecord(id) {
        if (typeof datatable.tableBody === 'undefined') datatable.tableBody = $(datatable.table).children('tbody');
        $(datatable.tableBody).find('.' + pfx + 'datatable__cell:first-child').each(function (i, cell) {
          if (id == $(cell).text()) {
            var rowNumber = $(cell).closest('.' + pfx + 'datatable__row').index() + 1;
            datatable.API.record = datatable.API.value = Plugin.getOneRow(datatable.tableBody, rowNumber);
            return datatable;
          }
        });
        return datatable;
      },

      /**
       * @deprecated in v5.0.6
       * Get column of current record ID
       * @param columnName
       * @returns {jQuery}
       */
      getColumn: function getColumn(columnName) {
        Plugin.setSelectedRecords();
        datatable.API.value = $(datatable.API.record).find('[data-field="' + columnName + '"]');
        return datatable;
      },

      /**
       * Destroy datatable to original DOM state before datatable was
       * initialized
       * @returns {jQuery}
       */
      destroy: function destroy() {
        $(datatable).parent().find('.' + pfx + 'datatable__pager').remove();
        var initialDatatable = $(datatable.initialDatatable).addClass(pfx + 'datatable--destroyed').show();
        $(datatable).replaceWith(initialDatatable);
        datatable = initialDatatable;
        $(datatable).trigger(pfx + 'datatable--on-destroy');
        Plugin.isInit = false;
        initialDatatable = null;
        return initialDatatable;
      },

      /**
       * Sort by column field
       * @param field
       * @param sort
       */
      sort: function sort(field, _sort) {
        // toggle sort
        _sort = typeof _sort === 'undefined' ? 'asc' : _sort;
        Plugin.spinnerCallback(true); // update field and sort params

        var meta = {
          field: field,
          sort: _sort
        };
        Plugin.setDataSourceParam('sort', meta);
        setTimeout(function () {
          Plugin.dataRender('sort');
          $(datatable).trigger(pfx + 'datatable--on-sort', meta);
          $(datatable.tableHead).find('.' + pfx + 'datatable__cell > span > i').remove();
        }, 300);
        return datatable;
      },

      /**
       * @deprecated in v5.0.6
       * Get current selected column value
       * @returns {jQuery}
       */
      getValue: function getValue() {
        return $(datatable.API.value).text();
      },

      /**
       * Set checkbox active
       * @param cell JQuery selector or checkbox ID
       */
      setActive: function setActive(cell) {
        if (typeof cell === 'string') {
          // set by checkbox id
          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox--single > [type="checkbox"][value="' + cell + '"]');
        }

        $(cell).prop('checked', true);
        var ids = [];
        $(cell).each(function (i, td) {
          // normal table
          var row = $(td).closest('tr').addClass(pfx + 'datatable__row--active');
          var id = $(td).attr('value');

          if (typeof id !== 'undefined') {
            ids.push(id);
          }
        });
        $(datatable).trigger(pfx + 'datatable--on-check', [ids]);
      },

      /**
       * Set checkbox inactive
       * @param cell JQuery selector or checkbox ID
       */
      setInactive: function setInactive(cell) {
        if (typeof cell === 'string') {
          // set by checkbox id
          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox--single > [type="checkbox"][value="' + cell + '"]');
        }

        $(cell).prop('checked', false);
        var ids = [];
        $(cell).each(function (i, td) {
          // normal table
          var row = $(td).closest('tr').removeClass(pfx + 'datatable__row--active');
          var id = $(td).attr('value');

          if (typeof id !== 'undefined') {
            ids.push(id);
          }
        });
        $(datatable).trigger(pfx + 'datatable--on-uncheck', [ids]);
      },

      /**
       * Set all checkboxes active or inactive
       * @param active
       */
      setActiveAll: function setActiveAll(active) {
        var checkboxes = $(datatable.table).find('> tbody, > thead').find('tr').not('.' + pfx + 'datatable__row-subtable').find('.' + pfx + 'datatable__cell--check [type="checkbox"]');

        if (active) {
          Plugin.setActive(checkboxes);
        } else {
          Plugin.setInactive(checkboxes);
        }
      },

      /**
       * @deprecated in v5.0.6
       * Get selected rows which are active
       * @returns {jQuery}
       */
      setSelectedRecords: function setSelectedRecords() {
        datatable.API.record = $(datatable.tableBody).find('.' + pfx + 'datatable__row--active');
        return datatable;
      },

      /**
       * Get selected records
       * @returns {null}
       */
      getSelectedRecords: function getSelectedRecords() {
        // support old method
        Plugin.setSelectedRecords();
        datatable.API.record = datatable.rows('.' + pfx + 'datatable__row--active').nodes();
        return datatable.API.record;
      },

      /**
       * Get options by dots notation path
       * @param path String Dot notation path in string
       * @returns {*}
       */
      getOption: function getOption(path) {
        return Plugin.getObject(path, options);
      },

      /**
       * Set global options nodes by dots notation path
       * @param path
       * @param object
       */
      setOption: function setOption(path, object) {
        options = Plugin.extendObj(options, path, object);
      },

      /**
       * Search filter for local & remote
       * @param value
       * @param columns. Optional list of columns to be filtered.
       */
      search: function search(value, columns) {
        if (typeof columns !== 'undefined') columns = $.makeArray(columns);

        var delay = function () {
          return function (callback, ms) {
            clearTimeout(Plugin.timer);
            Plugin.timer = setTimeout(callback, ms);
          };
        }();

        delay(function () {
          // get query parameters
          var query = Plugin.getDataSourceQuery(); // search not by columns

          if (typeof columns === 'undefined' && typeof value !== 'undefined') {
            var key = Plugin.getGeneralSearchKey();
            query[key] = value;
          } // search by columns, support multiple columns


          if (_typeof(columns) === 'object') {
            $.each(columns, function (k, column) {
              query[column] = value;
            }); // remove empty element from arrays

            $.each(query, function (k, v) {
              if (v === '' || $.isEmptyObject(v)) {
                delete query[k];
              }
            });
          }

          Plugin.setDataSourceQuery(query); // reset pagination to 1 when doing seearching

          datatable.setDataSourceParam('pagination', Object.assign({}, datatable.getDataSourceParam('pagination'), {
            page: 1
          })); // local filter only. remote pagination will skip this block

          if (!options.data.serverFiltering) {
            Plugin.localDataUpdate();
          }

          Plugin.dataRender('search');
        }, Plugin.getOption('search.delay'));
      },

      /**
       * Set datasource params extract
       * @param param
       * @param value
       */
      setDataSourceParam: function setDataSourceParam(param, value) {
        datatable.API.params = $.extend({}, {
          pagination: {
            page: 1,
            perpage: Plugin.getOption('data.pageSize')
          },
          sort: Plugin.getDefaultSortColumn(),
          query: {}
        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));
        datatable.API.params = Plugin.extendObj(datatable.API.params, param, value);
        Plugin.stateKeep(Plugin.stateId, datatable.API.params);
      },

      /**
       * Get datasource params
       * @param param
       */
      getDataSourceParam: function getDataSourceParam(param) {
        datatable.API.params = $.extend({}, {
          pagination: {
            page: 1,
            perpage: Plugin.getOption('data.pageSize')
          },
          sort: Plugin.getDefaultSortColumn(),
          query: {}
        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));

        if (typeof param === 'string') {
          return Plugin.getObject(param, datatable.API.params);
        }

        return datatable.API.params;
      },

      /**
       * Shortcode to datatable.getDataSourceParam('query');
       * @returns {*}
       */
      getDataSourceQuery: function getDataSourceQuery() {
        return Plugin.getDataSourceParam('query') || {};
      },

      /**
       * Shortcode to datatable.setDataSourceParam('query', query);
       * @param query
       */
      setDataSourceQuery: function setDataSourceQuery(query) {
        Plugin.setDataSourceParam('query', query);
      },

      /**
       * Get current page number
       * @returns {number}
       */
      getCurrentPage: function getCurrentPage() {
        return $(datatable.table).siblings('.' + pfx + 'datatable__pager').last().find('.' + pfx + 'datatable__pager-nav').find('.' + pfx + 'datatable__pager-link.' + pfx + 'datatable__pager-link--active').data('page') || 1;
      },

      /**
       * Get selected dropdown page size
       * @returns {*|number}
       */
      getPageSize: function getPageSize() {
        return $(datatable.table).siblings('.' + pfx + 'datatable__pager').last().find('select.' + pfx + 'datatable__pager-size').val() || 10;
      },

      /**
       * Get total rows
       */
      getTotalRows: function getTotalRows() {
        return datatable.API.params.pagination.total;
      },

      /**
       * Get full dataset in grid
       * @returns {*|null|Array}
       */
      getDataSet: function getDataSet() {
        return datatable.originalDataSet;
      },
      nodeTr: [],
      nodeTd: [],
      nodeCols: [],
      recentNode: [],
      table: function table() {
        if (typeof datatable.table !== 'undefined') {
          return datatable.table;
        }
      },

      /**
       * Select a single row from the table
       * @param selector
       * @returns {jQuery}
       */
      row: function row(selector) {
        Plugin.rows(selector);
        Plugin.nodeTr = Plugin.recentNode = $(Plugin.nodeTr).first();
        return datatable;
      },

      /**
       * Select multiple rows from the table
       * @param selector
       * @returns {jQuery}
       */
      rows: function rows(selector) {
        if (Plugin.isLocked()) {
          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable__lock--scroll > .' + pfx + 'datatable__row');
        } else {
          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable__row');
        }

        return datatable;
      },

      /**
       * Select a single column from the table
       * @param index zero-based index
       * @returns {jQuery}
       */
      column: function column(index) {
        Plugin.nodeCols = Plugin.recentNode = $(datatable.tableBody).find('.' + pfx + 'datatable__cell:nth-child(' + (index + 1) + ')');
        return datatable;
      },

      /**
       * Select multiple columns from the table
       * @param selector
       * @returns {jQuery}
       */
      columns: function columns(selector) {
        var context = datatable.table;

        if (Plugin.nodeTr === Plugin.recentNode) {
          context = Plugin.nodeTr;
        }

        var columns = $(context).find('.' + pfx + 'datatable__cell[data-field="' + selector + '"]');

        if (columns.length > 0) {
          Plugin.nodeCols = Plugin.recentNode = columns;
        } else {
          Plugin.nodeCols = Plugin.recentNode = $(context).find(selector).filter('.' + pfx + 'datatable__cell');
        }

        return datatable;
      },
      cell: function cell(selector) {
        Plugin.cells(selector);
        Plugin.nodeTd = Plugin.recentNode = $(Plugin.nodeTd).first();
        return datatable;
      },
      cells: function cells(selector) {
        var cells = $(datatable.tableBody).find('.' + pfx + 'datatable__cell');

        if (typeof selector !== 'undefined') {
          cells = $(cells).filter(selector);
        }

        Plugin.nodeTd = Plugin.recentNode = cells;
        return datatable;
      },

      /**
       * Delete the selected row from the table
       * @returns {jQuery}
       */
      remove: function remove() {
        if ($(Plugin.nodeTr.length) && Plugin.nodeTr === Plugin.recentNode) {
          $(Plugin.nodeTr).remove();
        }

        Plugin.layoutUpdate();
        return datatable;
      },

      /**
       * Show or hide the columns or rows
       */
      visible: function visible(bool) {
        if ($(Plugin.recentNode.length)) {
          var locked = Plugin.lockEnabledColumns();

          if (Plugin.recentNode === Plugin.nodeCols) {
            var index = Plugin.recentNode.index();

            if (Plugin.isLocked()) {
              var scrollColumns = $(Plugin.recentNode).closest('.' + pfx + 'datatable__lock--scroll').length;

              if (scrollColumns) {
                // is at center of scrollable area
                index += locked.left.length + 1;
              } else if ($(Plugin.recentNode).closest('.' + pfx + 'datatable__lock--right').length) {
                // is at the right locked table
                index += locked.left.length + scrollColumns + 1;
              }
            }
          }

          if (bool) {
            if (Plugin.recentNode === Plugin.nodeCols) {
              delete options.columns[index].visible;
            }

            $(Plugin.recentNode).show();
          } else {
            if (Plugin.recentNode === Plugin.nodeCols) {
              Plugin.setOption('columns.' + index + '.visible', false);
            }

            $(Plugin.recentNode).hide();
          }

          Plugin.columnHide();
          Plugin.redraw();
        }
      },

      /**
       * Get the the DOM element for the selected rows or columns
       * @returns {Array}
       */
      nodes: function nodes() {
        return Plugin.recentNode;
      },

      /**
       * will be implemented soon
       * @returns {jQuery}
       */
      dataset: function dataset() {
        return datatable;
      },

      /**
       * Open page by number
       * @param page number
       */
      gotoPage: function gotoPage(page) {
        if (typeof Plugin.pagingObject !== 'undefined') {
          Plugin.isInit = true;
          Plugin.pagingObject.openPage(page);
        }
      }
    };
    /**
     * Public API methods can be used directly by datatable
     */

    $.each(Plugin, function (funcName, func) {
      datatable[funcName] = func;
    }); // initialize main datatable plugin

    if (typeof options !== 'undefined') {
      if (typeof options === 'string') {
        var method = options;
        datatable = $(this).data(pluginName);

        if (typeof datatable !== 'undefined') {
          options = datatable.options;
          Plugin[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }
      } else {
        if (!datatable.data(pluginName) && !$(this).hasClass(pfx + 'datatable--loaded')) {
          datatable.dataSet = null;
          datatable.textAlign = {
            left: pfx + 'datatable__cell--left',
            center: pfx + 'datatable__cell--center',
            right: pfx + 'datatable__cell--right'
          }; // merge default and user defined options

          options = $.extend(true, {}, $.fn[pluginName].defaults, options);
          datatable.options = options; // init plugin process

          Plugin.init.apply(this, [options]);
          $(datatable.wrap).data(pluginName, datatable);
        }
      }
    } else {
      // get existing instance datatable
      datatable = $(this).data(pluginName);

      if (typeof datatable === 'undefined') {
        $.error(pluginName + ' not initialized');
      }

      options = datatable.options;
    }

    return datatable;
  }; // default options


  $.fn[pluginName].defaults = {
    // datasource definition
    data: {
      type: 'local',
      source: null,
      pageSize: 10,
      // display records per page
      saveState: {
        // save datatable state(pagination, filtering, sorting, etc) in cookie or browser webstorage
        cookie: false,
        webstorage: true
      },
      serverPaging: false,
      serverFiltering: false,
      serverSorting: false,
      autoColumns: false,
      attr: {
        rowProps: []
      }
    },
    // layout definition
    layout: {
      theme: 'default',
      // datatable will support multiple themes and designs
      "class": pfx + 'datatable--brand',
      // custom wrapper class
      scroll: false,
      // enable/disable datatable scroll both horizontal and vertical when needed.
      height: null,
      // datatable's body's fixed height
      minHeight: null,
      footer: false,
      // display/hide footer
      header: true,
      // display/hide header
      customScrollbar: true,
      // set false to disable custom scrollbar
      // datatable spinner
      spinner: {
        overlayColor: '#000000',
        opacity: 0,
        type: 'loader',
        state: 'brand',
        message: true
      },
      // datatable UI icons
      icons: {
        sort: {
          asc: 'flaticon2-arrow-up',
          desc: 'flaticon2-arrow-down'
        },
        pagination: {
          next: 'flaticon2-next',
          prev: 'flaticon2-back',
          first: 'flaticon2-fast-back',
          last: 'flaticon2-fast-next',
          more: 'flaticon-more-1'
        },
        rowDetail: {
          expand: 'fa fa-caret-down',
          collapse: 'fa fa-caret-right'
        }
      }
    },
    // column sorting
    sortable: true,
    // resize column size with mouse drag coming soon)
    resizable: false,
    // column based filtering (coming soon)
    filterable: false,
    pagination: true,
    // inline and bactch editing (cooming soon)
    editable: false,
    // columns definition
    columns: [],
    search: {
      // enable trigger search by keyup enter
      onEnter: false,
      // input text for search
      input: null,
      // search delay in milliseconds
      delay: 400
    },
    rows: {
      // deprecated
      callback: function callback() {},
      // call before row template
      beforeTemplate: function beforeTemplate() {},
      // call after row template
      afterTemplate: function afterTemplate() {},
      autoHide: true
    },
    // toolbar
    toolbar: {
      // place pagination and displayInfo blocks according to the array order
      layout: ['pagination', 'info'],
      // toolbar placement can be at top or bottom or both top and bottom repeated
      placement: ['bottom'],
      //'top', 'bottom'
      // toolbar items
      items: {
        // pagination
        pagination: {
          // pagination type(default or scroll)
          type: 'default',
          // number of pages to display by breakpoints
          pages: {
            desktop: {
              layout: 'default',
              pagesNumber: 5
            },
            tablet: {
              layout: 'default',
              pagesNumber: 3
            },
            mobile: {
              layout: 'compact'
            }
          },
          // navigation buttons
          navigation: {
            prev: true,
            // display prev button
            next: true,
            // display next button
            first: true,
            // display first button
            last: true,
            // display last button
            more: false // display more button

          },
          // page size select
          pageSizeSelect: [] // display dropdown to select pagination size. -1 is used for "ALl" option

        },
        // records info
        info: true
      }
    },
    // here we will keep all strings and message used by datatable UI so developer can easiliy translate to any language.
    // By default the stirngs will be in the plugin source and here can override it
    translate: {
      records: {
        processing: 'Please wait...',
        noRecords: 'No records found'
      },
      toolbar: {
        pagination: {
          items: {
            "default": {
              first: 'First',
              prev: 'Previous',
              next: 'Next',
              last: 'Last',
              more: 'More pages',
              input: 'Page number',
              select: 'Select page size',
              all: 'all'
            },
            info: 'Showing {{start}} - {{end}} of {{total}}'
          }
        }
      }
    },
    extensions: {}
  };
})(jQuery);

/***/ }),

/***/ "./resources/assets/js/global/components/base/datatable/datatable.checkbox.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/js/global/components/base/datatable/datatable.checkbox.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($) {
  var pluginName = 'KTDatatable';
  var pfx = 'kt-';
  $.fn[pluginName] = $.fn[pluginName] || {};
  /**
   * @param datatable Main datatable plugin instance
   * @param options Extension options
   * @returns {*}
   */

  $.fn[pluginName].checkbox = function (datatable, options) {
    var Extension = {
      selectedAllRows: false,
      selectedRows: [],
      unselectedRows: [],
      init: function init() {
        if (Extension.selectorEnabled()) {
          // reset
          datatable.setDataSourceParam(options.vars.selectedAllRows, false);
          datatable.stateRemove('checkbox'); // requestIds is not null

          if (options.vars.requestIds) {
            // request ids in response
            datatable.setDataSourceParam(options.vars.requestIds, true);
          } // remove selected checkbox on datatable reload


          $(datatable).on(pfx + 'datatable--on-reloaded', function () {
            datatable.stateRemove('checkbox');
            datatable.setDataSourceParam(options.vars.selectedAllRows, false);
            Extension.selectedAllRows = false;
            Extension.selectedRows = [];
            Extension.unselectedRows = [];
          }); // select all on extension init

          Extension.selectedAllRows = datatable.getDataSourceParam(options.vars.selectedAllRows);
          $(datatable).on(pfx + 'datatable--on-layout-updated', function (e, args) {
            if (args.table != $(datatable.wrap).attr('id')) {
              return;
            }

            datatable.ready(function () {
              Extension.initVars();
              Extension.initEvent();
              Extension.initSelect();
            });
          });
          $(datatable).on(pfx + 'datatable--on-check', function (e, ids) {
            ids.forEach(function (id) {
              Extension.selectedRows.push(id); // // remove from unselected rows

              Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);
            });
            var storage = {};
            storage['selectedRows'] = $.unique(Extension.selectedRows);
            storage['unselectedRows'] = $.unique(Extension.unselectedRows);
            datatable.stateKeep('checkbox', storage);
          });
          $(datatable).on(pfx + 'datatable--on-uncheck', function (e, ids) {
            ids.forEach(function (id) {
              Extension.unselectedRows.push(id); // // remove from selected rows

              Extension.selectedRows = Extension.remove(Extension.selectedRows, id);
            });
            var storage = {};
            storage['selectedRows'] = $.unique(Extension.selectedRows);
            storage['unselectedRows'] = $.unique(Extension.unselectedRows);
            datatable.stateKeep('checkbox', storage);
          });
        }
      },

      /**
       * Init checkbox clicks event
       */
      initEvent: function initEvent() {
        // select all checkbox click
        $(datatable.tableHead).find('.' + pfx + 'checkbox--all > [type="checkbox"]').click(function (e) {
          // clear selected and unselected rows
          Extension.selectedRows = Extension.unselectedRows = [];
          datatable.stateRemove('checkbox'); // select all rows

          if ($(this).is(':checked')) {
            Extension.selectedAllRows = true;
          } else {
            Extension.selectedAllRows = false;
          } // local select all current page rows


          if (!options.vars.requestIds) {
            if ($(this).is(':checked')) {
              Extension.selectedRows = $.makeArray($(datatable.tableBody).find('.' + pfx + 'checkbox--single > [type="checkbox"]').map(function (i, chk) {
                return $(chk).val();
              }));
            }

            var storage = {};
            storage['selectedRows'] = $.unique(Extension.selectedRows);
            datatable.stateKeep('checkbox', storage);
          } // keep selectedAllRows in datasource params


          datatable.setDataSourceParam(options.vars.selectedAllRows, Extension.selectedAllRows);
          $(datatable).trigger(pfx + 'datatable--on-click-checkbox', [$(this)]);
        }); // single row checkbox click

        $(datatable.tableBody).find('.' + pfx + 'checkbox--single > [type="checkbox"]').click(function (e) {
          var id = $(this).val();

          if ($(this).is(':checked')) {
            Extension.selectedRows.push(id); // remove from unselected rows

            Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);
          } else {
            Extension.unselectedRows.push(id); // remove from selected rows

            Extension.selectedRows = Extension.remove(Extension.selectedRows, id);
          } // local checkbox header check


          if (!options.vars.requestIds && Extension.selectedRows.length < 1) {
            // remove select all checkbox, if there is no checked checkbox left
            $(datatable.tableHead).find('.' + pfx + 'checkbox--all > [type="checkbox"]').prop('checked', false);
          }

          var storage = {};
          storage['selectedRows'] = $.unique(Extension.selectedRows);
          storage['unselectedRows'] = $.unique(Extension.unselectedRows);
          datatable.stateKeep('checkbox', storage);
          $(datatable).trigger(pfx + 'datatable--on-click-checkbox', [$(this)]);
        });
      },
      initSelect: function initSelect() {
        // selected all rows from server
        if (Extension.selectedAllRows && options.vars.requestIds) {
          if (!datatable.hasClass(pfx + 'datatable--error')) {
            // set header select all checkbox checked
            $(datatable.tableHead).find('.' + pfx + 'checkbox--all > [type="checkbox"]').prop('checked', true);
          } // set all checkbox in table body


          datatable.setActiveAll(true); // remove unselected rows

          Extension.unselectedRows.forEach(function (id) {
            datatable.setInactive(id);
          });
        } else {
          // single check for server and local
          Extension.selectedRows.forEach(function (id) {
            datatable.setActive(id);
          }); // local checkbox; check if all checkboxes of currect page are checked

          if (!datatable.hasClass(pfx + 'datatable--error') && $(datatable.tableBody).find('.' + pfx + 'checkbox--single > [type="checkbox"]').not(':checked').length < 1) {
            // set header select all checkbox checked
            $(datatable.tableHead).find('.' + pfx + 'checkbox--all > [type="checkbox"]').prop('checked', true);
          }
        }
      },

      /**
       * Check if selector is enabled from options
       */
      selectorEnabled: function selectorEnabled() {
        return $.grep(datatable.options.columns, function (n, i) {
          return n.selector || false;
        })[0];
      },
      initVars: function initVars() {
        // get single select/unselect from localstorage
        var storage = datatable.stateGet('checkbox');

        if (typeof storage !== 'undefined') {
          Extension.selectedRows = storage['selectedRows'] || [];
          Extension.unselectedRows = storage['unselectedRows'] || [];
        }
      },
      getSelectedId: function getSelectedId(path) {
        Extension.initVars(); // server selected all rows

        if (Extension.selectedAllRows && options.vars.requestIds) {
          if (typeof path === 'undefined') {
            path = options.vars.rowIds;
          } // if selected all rows, return id from response meta


          var selectedAllRows = datatable.getObject(path, datatable.lastResponse) || [];

          if (selectedAllRows.length > 0) {
            // remove single unselected rows from selectedAllRows ids from server response emta
            Extension.unselectedRows.forEach(function (id) {
              selectedAllRows = Extension.remove(selectedAllRows, parseInt(id));
            });
          }

          return selectedAllRows;
        } // else return single checked selected rows


        return Extension.selectedRows;
      },
      remove: function remove(array, element) {
        return array.filter(function (e) {
          return e !== element;
        });
      }
    }; // make the extension accessible from datatable init

    datatable.checkbox = function () {
      return Extension;
    };

    if (_typeof(options) === 'object') {
      options = $.extend(true, {}, $.fn[pluginName].checkbox["default"], options);
      Extension.init.apply(this, [options]);
    }

    return datatable;
  };

  $.fn[pluginName].checkbox["default"] = {
    vars: {
      // select all rows flag to be sent to the server
      selectedAllRows: 'selectedAllRows',
      // request id parameter's name
      requestIds: 'requestIds',
      // response path to all rows id
      rowIds: 'meta.rowIds'
    }
  };
})(jQuery);

/***/ }),

/***/ "./resources/assets/js/global/components/base/datatable/datatable.rtl.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/js/global/components/base/datatable/datatable.rtl.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var defaults = {
  layout: {
    icons: {
      pagination: {
        next: 'flaticon2-next',
        prev: 'flaticon2-back',
        first: 'flaticon2-fast-back',
        last: 'flaticon2-fast-next',
        more: 'flaticon-more-1'
      },
      rowDetail: {
        expand: 'fa fa-caret-down',
        collapse: 'fa fa-caret-right'
      }
    }
  }
};

if (KTUtil.isRTL()) {
  defaults = {
    layout: {
      icons: {
        pagination: {
          next: 'flaticon2-back',
          prev: 'flaticon2-next',
          first: 'flaticon2-fast-next',
          last: 'flaticon2-fast-back'
        },
        rowDetail: {
          collapse: 'fa fa-caret-down',
          expand: 'fa fa-caret-right'
        }
      }
    }
  };
}

$.extend(true, $.fn.KTDatatable.defaults, defaults);

/***/ }),

/***/ "./resources/assets/js/global/components/base/dialog.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/dialog.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // plugin setup

var KTDialog = function KTDialog(options) {
  // Main object
  var the = this; // Get element object

  var element;
  var body = KTUtil.get('body'); // Default options

  var defaultOptions = {
    'placement': 'top center',
    'type': 'loader',
    'width': 100,
    'state': 'default',
    'message': 'Loading...'
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      Plugin.init(options);
      return the;
    },

    /**
     * Handles subtoggle click toggle
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.state = false;
    },

    /**
     * Show dialog
     */
    show: function show() {
      Plugin.eventTrigger('show');
      element = document.createElement("DIV");
      KTUtil.setHTML(element, the.options.message);
      KTUtil.addClass(element, 'kt-dialog kt-dialog--shown');
      KTUtil.addClass(element, 'kt-dialog--' + the.options.state);
      KTUtil.addClass(element, 'kt-dialog--' + the.options.type);

      if (the.options.placement == 'top center') {
        KTUtil.addClass(element, 'kt-dialog--top-center');
      }

      body.appendChild(element);
      the.state = 'shown';
      Plugin.eventTrigger('shown');
      return the;
    },

    /**
     * Hide dialog
     */
    hide: function hide() {
      if (element) {
        Plugin.eventTrigger('hide');
        element.remove();
        the.state = 'hidden';
        Plugin.eventTrigger('hidden');
      }

      return the;
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options 
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Check shown state 
   */


  the.shown = function () {
    return the.state == 'shown';
  };
  /**
   * Check hidden state 
   */


  the.hidden = function () {
    return the.state == 'hidden';
  };
  /**
   * Show dialog 
   */


  the.show = function () {
    return Plugin.show();
  };
  /**
   * Hide dialog
   */


  the.hide = function () {
    return Plugin.hide();
  };
  /**
   * Attach event
   * @returns {KTToggle}
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   * @returns {KTToggle}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTDialog;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/header.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/header.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTHeader = function KTHeader(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (element === undefined) {
    return;
  } // Default options


  var defaultOptions = {
    classic: false,
    offset: {
      mobile: 150,
      desktop: 200
    },
    minimize: {
      mobile: false,
      desktop: false
    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {KTHeader}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('header')) {
        the = KTUtil.data(element).get('header');
      } else {
        // reset header
        Plugin.init(options); // build header

        Plugin.build();
        KTUtil.data(element).set('header', the);
      }

      return the;
    },

    /**
     * Handles subheader click toggle
     * @returns {KTHeader}
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },

    /**
     * Reset header
     * @returns {KTHeader}
     */
    build: function build() {
      var lastScrollTop = 0;
      var eventTriggerState = true;
      var viewportHeight = KTUtil.getViewPort().height;
      var documentHeight = KTUtil.getDocumentHeight();

      if (the.options.minimize.mobile === false && the.options.minimize.desktop === false) {
        return;
      }

      window.addEventListener('scroll', function () {
        var offset = 0,
            on,
            off,
            st;

        if (KTUtil.isInResponsiveRange('desktop')) {
          offset = the.options.offset.desktop;
          on = the.options.minimize.desktop.on;
          off = the.options.minimize.desktop.off;
        } else if (KTUtil.isInResponsiveRange('tablet-and-mobile')) {
          offset = the.options.offset.mobile;
          on = the.options.minimize.mobile.on;
          off = the.options.minimize.mobile.off;
        }

        st = KTUtil.getScrollTop();

        if (KTUtil.isInResponsiveRange('tablet-and-mobile') && the.options.classic && the.options.classic.mobile || KTUtil.isInResponsiveRange('desktop') && the.options.classic && the.options.classic.desktop) {
          if (st > offset) {
            // down scroll mode
            KTUtil.addClass(body, on);
            KTUtil.removeClass(body, off);

            if (eventTriggerState) {
              Plugin.eventTrigger('minimizeOn', the);
              eventTriggerState = false;
            }
          } else {
            // back scroll mode
            KTUtil.addClass(body, off);
            KTUtil.removeClass(body, on);

            if (eventTriggerState == false) {
              Plugin.eventTrigger('minimizeOff', the);
              eventTriggerState = true;
            }
          }
        } else {
          if (st > offset && lastScrollTop < st) {
            // down scroll mode
            KTUtil.addClass(body, on);
            KTUtil.removeClass(body, off);

            if (eventTriggerState) {
              Plugin.eventTrigger('minimizeOn', the);
              eventTriggerState = false;
            }
          } else {
            // back scroll mode
            KTUtil.addClass(body, off);
            KTUtil.removeClass(body, on);

            if (eventTriggerState == false) {
              Plugin.eventTrigger('minimizeOff', the);
              eventTriggerState = true;
            }
          }

          lastScrollTop = st;
        }
      });
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Register event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTHeader;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/menu.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/global/components/base/menu.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTMenu = function KTMenu(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    // scrollable area with Perfect Scroll
    scroll: {
      rememberPosition: false
    },
    // accordion submenu mode
    accordion: {
      slideSpeed: 200,
      // accordion toggle slide speed in milliseconds
      autoScroll: false,
      // enable auto scrolling(focus) to the clicked menu item
      autoScrollSpeed: 1200,
      expandAll: true // allow having multiple expanded accordions in the menu

    },
    // dropdown submenu mode
    dropdown: {
      timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown

    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {KTMenu}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('menu')) {
        the = KTUtil.data(element).get('menu');
      } else {
        // reset menu
        Plugin.init(options); // reset menu

        Plugin.reset(); // build menu

        Plugin.build();
        KTUtil.data(element).set('menu', the);
      }

      return the;
    },

    /**
     * Handles submenu click toggle
     * @returns {KTMenu}
     */
    init: function init(options) {
      the.events = [];
      the.eventHandlers = {}; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu

      the.pauseDropdownHoverTime = 0;
      the.uid = KTUtil.getUniqueID();
    },
    update: function update(options) {
      // merge default and user defined options
      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu

      the.pauseDropdownHoverTime = 0; // reset menu

      Plugin.reset();
      the.eventHandlers = {}; // build menu

      Plugin.build();
      KTUtil.data(element).set('menu', the);
    },
    reload: function reload() {
      // reset menu
      Plugin.reset(); // build menu

      Plugin.build(); // reset submenu props

      Plugin.resetSubmenuProps();
    },

    /**
     * Reset menu
     * @returns {KTMenu}
     */
    build: function build() {
      // General accordion submenu toggle
      the.eventHandlers['event_1'] = KTUtil.on(element, '.kt-menu__toggle', 'click', Plugin.handleSubmenuAccordion); // Dropdown mode(hoverable)

      if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {
        // dropdown submenu - hover toggle
        the.eventHandlers['event_2'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="hover"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);
        the.eventHandlers['event_3'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="hover"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit); // dropdown submenu - click toggle

        the.eventHandlers['event_4'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="click"] > .kt-menu__toggle, [data-ktmenu-submenu-toggle="click"] > .kt-menu__link .kt-menu__toggle', 'click', Plugin.handleSubmenuDropdownClick);
        the.eventHandlers['event_5'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="tab"] > .kt-menu__toggle, [data-ktmenu-submenu-toggle="tab"] > .kt-menu__link .kt-menu__toggle', 'click', Plugin.handleSubmenuDropdownTabClick);
      } // handle link click


      the.eventHandlers['event_6'] = KTUtil.on(element, '.kt-menu__item > .kt-menu__link:not(.kt-menu__toggle):not(.kt-menu__link--toggle-skip)', 'click', Plugin.handleLinkClick); // Init scrollable menu

      if (the.options.scroll && the.options.scroll.height) {
        Plugin.scrollInit();
      }
    },

    /**
     * Reset menu
     * @returns {KTMenu}
     */
    reset: function reset() {
      KTUtil.off(element, 'click', the.eventHandlers['event_1']); // dropdown submenu - hover toggle

      KTUtil.off(element, 'mouseover', the.eventHandlers['event_2']);
      KTUtil.off(element, 'mouseout', the.eventHandlers['event_3']); // dropdown submenu - click toggle

      KTUtil.off(element, 'click', the.eventHandlers['event_4']);
      KTUtil.off(element, 'click', the.eventHandlers['event_5']); // handle link click

      KTUtil.off(element, 'click', the.eventHandlers['event_6']);
    },

    /**
     * Init scroll menu
     *
    */
    scrollInit: function scrollInit() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollDestroy(element);
        KTUtil.scrollInit(element, {
          mobileNativeScroll: true,
          windowScroll: false,
          resetHeightOnDestroy: true,
          handleWindowResize: true,
          height: the.options.scroll.height,
          rememberPosition: the.options.scroll.rememberPosition
        });
      } else {
        KTUtil.scrollDestroy(element);
      }
    },

    /**
     * Update scroll menu
    */
    scrollUpdate: function scrollUpdate() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollUpdate(element);
      }
    },

    /**
     * Scroll top
    */
    scrollTop: function scrollTop() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollTop(element);
      }
    },

    /**
     * Get submenu mode for current breakpoint and menu state
     * @returns {KTMenu}
     */
    getSubmenuMode: function getSubmenuMode(el) {
      if (KTUtil.isInResponsiveRange('desktop')) {
        if (el && KTUtil.hasAttr(el, 'data-ktmenu-submenu-toggle') && KTUtil.attr(el, 'data-ktmenu-submenu-toggle') == 'hover') {
          return 'dropdown';
        }

        if (KTUtil.isset(the.options.submenu, 'desktop.state.body')) {
          if (KTUtil.hasClasses(body, the.options.submenu.desktop.state.body)) {
            return the.options.submenu.desktop.state.mode;
          } else {
            return the.options.submenu.desktop["default"];
          }
        } else if (KTUtil.isset(the.options.submenu, 'desktop')) {
          return the.options.submenu.desktop;
        }
      } else if (KTUtil.isInResponsiveRange('tablet') && KTUtil.isset(the.options.submenu, 'tablet')) {
        return the.options.submenu.tablet;
      } else if (KTUtil.isInResponsiveRange('mobile') && KTUtil.isset(the.options.submenu, 'mobile')) {
        return the.options.submenu.mobile;
      } else {
        return false;
      }
    },

    /**
     * Get submenu mode for current breakpoint and menu state
     * @returns {KTMenu}
     */
    isConditionalSubmenuDropdown: function isConditionalSubmenuDropdown() {
      if (KTUtil.isInResponsiveRange('desktop') && KTUtil.isset(the.options.submenu, 'desktop.state.body')) {
        return true;
      } else {
        return false;
      }
    },

    /**
     * Reset submenu attributes
     * @returns {KTMenu}
     */
    resetSubmenuProps: function resetSubmenuProps(e) {
      var submenus = KTUtil.findAll(element, '.kt-menu__submenu');

      if (submenus) {
        for (var i = 0, len = submenus.length; i < len; i++) {
          KTUtil.css(submenus[0], 'display', '');
          KTUtil.css(submenus[0], 'overflow', '');
        }
      }
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    handleSubmenuDrodownHoverEnter: function handleSubmenuDrodownHoverEnter(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      if (the.resumeDropdownHover() === false) {
        return;
      }

      var item = this;

      if (item.getAttribute('data-hover') == '1') {
        item.removeAttribute('data-hover');
        clearTimeout(item.getAttribute('data-timeout'));
        item.removeAttribute('data-timeout');
      }

      Plugin.showSubmenuDropdown(item);
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    handleSubmenuDrodownHoverExit: function handleSubmenuDrodownHoverExit(e) {
      if (the.resumeDropdownHover() === false) {
        return;
      }

      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this;
      var time = the.options.dropdown.timeout;
      var timeout = setTimeout(function () {
        if (item.getAttribute('data-hover') == '1') {
          Plugin.hideSubmenuDropdown(item, true);
        }
      }, time);
      item.setAttribute('data-hover', '1');
      item.setAttribute('data-timeout', timeout);
    },

    /**
     * Handles submenu click toggle
     * @returns {KTMenu}
     */
    handleSubmenuDropdownClick: function handleSubmenuDropdownClick(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this.closest('.kt-menu__item');

      if (item.getAttribute('data-ktmenu-submenu-mode') == 'accordion') {
        return;
      }

      if (KTUtil.hasClass(item, 'kt-menu__item--hover') === false) {
        KTUtil.addClass(item, 'kt-menu__item--open-dropdown');
        Plugin.showSubmenuDropdown(item);
      } else {
        KTUtil.removeClass(item, 'kt-menu__item--open-dropdown');
        Plugin.hideSubmenuDropdown(item, true);
      }

      e.preventDefault();
    },

    /**
     * Handles tab click toggle
     * @returns {KTMenu}
     */
    handleSubmenuDropdownTabClick: function handleSubmenuDropdownTabClick(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this.closest('.kt-menu__item');

      if (item.getAttribute('data-ktmenu-submenu-mode') == 'accordion') {
        return;
      }

      if (KTUtil.hasClass(item, 'kt-menu__item--hover') == false) {
        KTUtil.addClass(item, 'kt-menu__item--open-dropdown');
        Plugin.showSubmenuDropdown(item);
      }

      e.preventDefault();
    },

    /**
     * Handles link click
     * @returns {KTMenu}
     */
    handleLinkClick: function handleLinkClick(e) {
      var submenu = this.closest('.kt-menu__item.kt-menu__item--submenu'); //

      var result = Plugin.eventTrigger('linkClick', this, e);

      if (result === false) {
        return;
      }

      if (submenu && Plugin.getSubmenuMode(submenu) === 'dropdown') {
        Plugin.hideSubmenuDropdowns();
      }
    },

    /**
     * Handles submenu dropdown close on link click
     * @returns {KTMenu}
     */
    handleSubmenuDropdownClose: function handleSubmenuDropdownClose(e, el) {
      // exit if its not submenu dropdown mode
      if (Plugin.getSubmenuMode(el) === 'accordion') {
        return;
      }

      var shown = element.querySelectorAll('.kt-menu__item.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs)'); // check if currently clicked link's parent item ha

      if (shown.length > 0 && KTUtil.hasClass(el, 'kt-menu__toggle') === false && el.querySelectorAll('.kt-menu__toggle').length === 0) {
        // close opened dropdown menus
        for (var i = 0, len = shown.length; i < len; i++) {
          Plugin.hideSubmenuDropdown(shown[0], true);
        }
      }
    },

    /**
     * helper functions
     * @returns {KTMenu}
     */
    handleSubmenuAccordion: function handleSubmenuAccordion(e, el) {
      var query;
      var item = el ? el : this;

      if (Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.kt-menu__item'))) {
        if (query.getAttribute('data-ktmenu-submenu-mode') != 'accordion') {
          e.preventDefault();
          return;
        }
      }

      var li = item.closest('.kt-menu__item');
      var submenu = KTUtil.child(li, '.kt-menu__submenu, .kt-menu__inner');

      if (KTUtil.hasClass(item.closest('.kt-menu__item'), 'kt-menu__item--open-always')) {
        return;
      }

      if (li && submenu) {
        e.preventDefault();
        var speed = the.options.accordion.slideSpeed;
        var hasClosables = false;

        if (KTUtil.hasClass(li, 'kt-menu__item--open') === false) {
          // hide other accordions
          if (the.options.accordion.expandAll === false) {
            var subnav = item.closest('.kt-menu__nav, .kt-menu__subnav');
            var closables = KTUtil.children(subnav, '.kt-menu__item.kt-menu__item--open.kt-menu__item--submenu:not(.kt-menu__item--here):not(.kt-menu__item--open-always)');

            if (subnav && closables) {
              for (var i = 0, len = closables.length; i < len; i++) {
                var el_ = closables[0];
                var submenu_ = KTUtil.child(el_, '.kt-menu__submenu');

                if (submenu_) {
                  KTUtil.slideUp(submenu_, speed, function () {
                    Plugin.scrollUpdate();
                    KTUtil.removeClass(el_, 'kt-menu__item--open');
                  });
                }
              }
            }
          }

          KTUtil.slideDown(submenu, speed, function () {
            Plugin.scrollToItem(item);
            Plugin.scrollUpdate();
            Plugin.eventTrigger('submenuToggle', submenu, e);
          });
          KTUtil.addClass(li, 'kt-menu__item--open');
        } else {
          KTUtil.slideUp(submenu, speed, function () {
            Plugin.scrollToItem(item);
            Plugin.eventTrigger('submenuToggle', submenu, e);
          });
          KTUtil.removeClass(li, 'kt-menu__item--open');
        }
      }
    },

    /**
     * scroll to item function
     * @returns {KTMenu}
     */
    scrollToItem: function scrollToItem(item) {
      // handle auto scroll for accordion submenus
      if (KTUtil.isInResponsiveRange('desktop') && the.options.accordion.autoScroll && element.getAttribute('data-ktmenu-scroll') !== '1') {
        KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);
      }
    },

    /**
     * Hide submenu dropdown
     * @returns {KTMenu}
     */
    hideSubmenuDropdown: function hideSubmenuDropdown(item, classAlso) {
      // remove submenu activation class
      if (classAlso) {
        KTUtil.removeClass(item, 'kt-menu__item--hover');
        KTUtil.removeClass(item, 'kt-menu__item--active-tab');
      } // clear timeout


      item.removeAttribute('data-hover');

      if (item.getAttribute('data-ktmenu-dropdown-toggle-class')) {
        KTUtil.removeClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));
      }

      var timeout = item.getAttribute('data-timeout');
      item.removeAttribute('data-timeout');
      clearTimeout(timeout);
    },

    /**
     * Hide submenu dropdowns
     * @returns {KTMenu}
     */
    hideSubmenuDropdowns: function hideSubmenuDropdowns() {
      var items;

      if (items = element.querySelectorAll('.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs):not([data-ktmenu-submenu-toggle="tab"])')) {
        for (var j = 0, cnt = items.length; j < cnt; j++) {
          Plugin.hideSubmenuDropdown(items[j], true);
        }
      }
    },

    /**
     * helper functions
     * @returns {KTMenu}
     */
    showSubmenuDropdown: function showSubmenuDropdown(item) {
      // close active submenus
      var list = element.querySelectorAll('.kt-menu__item--submenu.kt-menu__item--hover, .kt-menu__item--submenu.kt-menu__item--active-tab');

      if (list) {
        for (var i = 0, len = list.length; i < len; i++) {
          var el = list[i];

          if (item !== el && el.contains(item) === false && item.contains(el) === false) {
            Plugin.hideSubmenuDropdown(el, true);
          }
        }
      } // add submenu activation class


      KTUtil.addClass(item, 'kt-menu__item--hover');

      if (item.getAttribute('data-ktmenu-dropdown-toggle-class')) {
        KTUtil.addClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));
      }
    },

    /**
     * Handles submenu slide toggle
     * @returns {KTMenu}
     */
    createSubmenuDropdownClickDropoff: function createSubmenuDropdownClickDropoff(el) {
      var query;
      var zIndex = (query = KTUtil.child(el, '.kt-menu__submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;
      var dropoff = document.createElement('<div class="kt-menu__dropoff" style="background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '"></div>');
      body.appendChild(dropoff);
      KTUtil.addEvent(dropoff, 'click', function (e) {
        e.stopPropagation();
        e.preventDefault();
        KTUtil.remove(this);
        Plugin.hideSubmenuDropdown(el, true);
      });
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    pauseDropdownHover: function pauseDropdownHover(time) {
      var date = new Date();
      the.pauseDropdownHoverTime = date.getTime() + time;
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    resumeDropdownHover: function resumeDropdownHover() {
      var date = new Date();
      return date.getTime() > the.pauseDropdownHoverTime ? true : false;
    },

    /**
     * Reset menu's current active item
     * @returns {KTMenu}
     */
    resetActiveItem: function resetActiveItem(item) {
      var list;
      var parents;
      list = element.querySelectorAll('.kt-menu__item--active');

      for (var i = 0, len = list.length; i < len; i++) {
        var el = list[0];
        KTUtil.removeClass(el, 'kt-menu__item--active');
        KTUtil.hide(KTUtil.child(el, '.kt-menu__submenu'));
        parents = KTUtil.parents(el, '.kt-menu__item--submenu') || [];

        for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {
          var el_ = parents[i];
          KTUtil.removeClass(el_, 'kt-menu__item--open');
          KTUtil.hide(KTUtil.child(el_, '.kt-menu__submenu'));
        }
      } // close open submenus


      if (the.options.accordion.expandAll === false) {
        if (list = element.querySelectorAll('.kt-menu__item--open')) {
          for (var i = 0, len = list.length; i < len; i++) {
            KTUtil.removeClass(parents[0], 'kt-menu__item--open');
          }
        }
      }
    },

    /**
     * Sets menu's active item
     * @returns {KTMenu}
     */
    setActiveItem: function setActiveItem(item) {
      // reset current active item
      Plugin.resetActiveItem();
      var parents = KTUtil.parents(item, '.kt-menu__item--submenu') || [];

      for (var i = 0, len = parents.length; i < len; i++) {
        KTUtil.addClass(KTUtil.get(parents[i]), 'kt-menu__item--open');
      }

      KTUtil.addClass(KTUtil.get(item), 'kt-menu__item--active');
    },

    /**
     * Returns page breadcrumbs for the menu's active item
     * @returns {KTMenu}
     */
    getBreadcrumbs: function getBreadcrumbs(item) {
      var query;
      var breadcrumbs = [];
      var link = KTUtil.child(item, '.kt-menu__link');
      breadcrumbs.push({
        text: query = KTUtil.child(link, '.kt-menu__link-text') ? query.innerHTML : '',
        title: link.getAttribute('title'),
        href: link.getAttribute('href')
      });
      var parents = KTUtil.parents(item, '.kt-menu__item--submenu');

      for (var i = 0, len = parents.length; i < len; i++) {
        var submenuLink = KTUtil.child(parents[i], '.kt-menu__link');
        breadcrumbs.push({
          text: query = KTUtil.child(submenuLink, '.kt-menu__link-text') ? query.innerHTML : '',
          title: submenuLink.getAttribute('title'),
          href: submenuLink.getAttribute('href')
        });
      }

      return breadcrumbs.reverse();
    },

    /**
     * Returns page title for the menu's active item
     * @returns {KTMenu}
     */
    getPageTitle: function getPageTitle(item) {
      var query;
      return query = KTUtil.child(item, '.kt-menu__link-text') ? query.innerHTML : '';
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, target, e) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, target, e);
            }
          } else {
            return event.handler.call(this, target, e);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    },
    removeEvent: function removeEvent(name) {
      if (the.events[name]) {
        delete the.events[name];
      }
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Update scroll
   */


  the.scrollUpdate = function () {
    return Plugin.scrollUpdate();
  };
  /**
   * Re-init scroll
   */


  the.scrollReInit = function () {
    return Plugin.scrollInit();
  };
  /**
   * Scroll top
   */


  the.scrollTop = function () {
    return Plugin.scrollTop();
  };
  /**
   * Set active menu item
   */


  the.setActiveItem = function (item) {
    return Plugin.setActiveItem(item);
  };

  the.reload = function () {
    return Plugin.reload();
  };

  the.update = function (options) {
    return Plugin.update(options);
  };
  /**
   * Set breadcrumb for menu item
   */


  the.getBreadcrumbs = function (item) {
    return Plugin.getBreadcrumbs(item);
  };
  /**
   * Set page title for menu item
   */


  the.getPageTitle = function (item) {
    return Plugin.getPageTitle(item);
  };
  /**
   * Get submenu mode
   */


  the.getSubmenuMode = function (el) {
    return Plugin.getSubmenuMode(el);
  };
  /**
   * Hide dropdown
   * @returns {Object}
   */


  the.hideDropdown = function (item) {
    Plugin.hideSubmenuDropdown(item, true);
  };
  /**
   * Hide dropdowns
   * @returns {Object}
   */


  the.hideDropdowns = function () {
    Plugin.hideSubmenuDropdowns();
  };
  /**
   * Disable menu for given time
   * @returns {Object}
   */


  the.pauseDropdownHover = function (time) {
    Plugin.pauseDropdownHover(time);
  };
  /**
   * Disable menu for given time
   * @returns {Object}
   */


  the.resumeDropdownHover = function () {
    return Plugin.resumeDropdownHover();
  };
  /**
   * Register event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };

  the.off = function (name) {
    return Plugin.removeEvent(name);
  };

  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Handle plugin on window resize

  KTUtil.addResizeHandler(function () {
    if (init) {
      the.reload();
    }
  }); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTMenu;
} // Plugin global lazy initialization


document.addEventListener("click", function (e) {
  var body = KTUtil.get('body');
  var query;

  if (query = body.querySelectorAll('.kt-menu__nav .kt-menu__item.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs)[data-ktmenu-submenu-toggle="click"]')) {
    for (var i = 0, len = query.length; i < len; i++) {
      var element = query[i].closest('.kt-menu__nav').parentNode;

      if (element) {
        var the = KTUtil.data(element).get('menu');

        if (!the) {
          break;
        }

        if (!the || the.getSubmenuMode() !== 'dropdown') {
          break;
        }

        if (e.target !== element && element.contains(e.target) === false) {
          the.hideDropdowns();
        }
      }
    }
  }
});

/***/ }),

/***/ "./resources/assets/js/global/components/base/offcanvas.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/global/components/base/offcanvas.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTOffcanvas = function KTOffcanvas(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {}; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    construct: function construct(options) {
      if (KTUtil.data(element).has('offcanvas')) {
        the = KTUtil.data(element).get('offcanvas');
      } else {
        // reset offcanvas
        Plugin.init(options); // build offcanvas

        Plugin.build();
        KTUtil.data(element).set('offcanvas', the);
      }

      return the;
    },
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.overlay;
      the.classBase = the.options.baseClass;
      the.classShown = the.classBase + '--on';
      the.classOverlay = the.classBase + '-overlay';
      the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';
    },
    build: function build() {
      // offcanvas toggle
      if (the.options.toggleBy) {
        if (typeof the.options.toggleBy === 'string') {
          KTUtil.addEvent(the.options.toggleBy, 'click', function (e) {
            e.preventDefault();
            Plugin.toggle();
          });
        } else if (the.options.toggleBy && the.options.toggleBy[0]) {
          if (the.options.toggleBy[0].target) {
            for (var i in the.options.toggleBy) {
              KTUtil.addEvent(the.options.toggleBy[i].target, 'click', function (e) {
                e.preventDefault();
                Plugin.toggle();
              });
            }
          } else {
            for (var i in the.options.toggleBy) {
              KTUtil.addEvent(the.options.toggleBy[i], 'click', function (e) {
                e.preventDefault();
                Plugin.toggle();
              });
            }
          }
        } else if (the.options.toggleBy && the.options.toggleBy.target) {
          KTUtil.addEvent(the.options.toggleBy.target, 'click', function (e) {
            e.preventDefault();
            Plugin.toggle();
          });
        }
      } // offcanvas close


      var closeBy = KTUtil.get(the.options.closeBy);

      if (closeBy) {
        KTUtil.addEvent(closeBy, 'click', function (e) {
          e.preventDefault();
          Plugin.hide();
        });
      } // Window resize

      /*
      KTUtil.addResizeHandler(function() {
          if (parseInt(KTUtil.css(element, 'left')) >= 0 || parseInt(KTUtil.css(element, 'right') >= 0) || KTUtil.css(element, 'position') != 'fixed') {
              KTUtil.css(element, 'opacity', '1');
          }
      });
      */

    },
    isShown: function isShown(target) {
      return the.state == 'shown' ? true : false;
    },
    toggle: function toggle() {
      ;
      Plugin.eventTrigger('toggle');

      if (the.state == 'shown') {
        Plugin.hide(this);
      } else {
        Plugin.show(this);
      }
    },
    show: function show(target) {
      if (the.state == 'shown') {
        return;
      }

      Plugin.eventTrigger('beforeShow');
      Plugin.togglerClass(target, 'show'); // Offcanvas panel

      KTUtil.addClass(body, the.classShown);
      KTUtil.addClass(element, the.classShown); //KTUtil.css(element, 'opacity', '1');

      the.state = 'shown';

      if (the.options.overlay) {
        the.overlay = KTUtil.insertAfter(document.createElement('DIV'), element);
        KTUtil.addClass(the.overlay, the.classOverlay);
        KTUtil.addEvent(the.overlay, 'click', function (e) {
          e.stopPropagation();
          e.preventDefault();
          Plugin.hide(target);
        });
      }

      Plugin.eventTrigger('afterShow');
    },
    hide: function hide(target) {
      if (the.state == 'hidden') {
        return;
      }

      Plugin.eventTrigger('beforeHide');
      Plugin.togglerClass(target, 'hide');
      KTUtil.removeClass(body, the.classShown);
      KTUtil.removeClass(element, the.classShown);
      the.state = 'hidden';

      if (the.options.overlay && the.overlay) {
        KTUtil.remove(the.overlay);
      }
      /*
      KTUtil.transitionEnd(element, function() {
          KTUtil.css(element, 'opacity', '0');
      });
      */


      Plugin.eventTrigger('afterHide');
    },
    togglerClass: function togglerClass(target, mode) {
      // Toggler
      var id = KTUtil.attr(target, 'id');
      var toggleBy;

      if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {
        for (var i in the.options.toggleBy) {
          if (the.options.toggleBy[i].target === id) {
            toggleBy = the.options.toggleBy[i];
          }
        }
      } else if (the.options.toggleBy && the.options.toggleBy.target) {
        toggleBy = the.options.toggleBy;
      }

      if (toggleBy) {
        var el = KTUtil.get(toggleBy.target);

        if (mode === 'show') {
          KTUtil.addClass(el, toggleBy.state);
        }

        if (mode === 'hide') {
          KTUtil.removeClass(el, toggleBy.state);
        }
      }
    },
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  the.setDefaults = function (options) {
    defaultOptions = options;
  };

  the.isShown = function () {
    return Plugin.isShown();
  };

  the.hide = function () {
    return Plugin.hide();
  };

  the.show = function () {
    return Plugin.show();
  };

  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };

  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTOffcanvas;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/portlet.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/global/components/base/portlet.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // plugin setup

var KTPortlet = function KTPortlet(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    bodyToggleSpeed: 400,
    tooltips: true,
    tools: {
      toggle: {
        collapse: 'Colapsar',
        expand: 'Expander'
      },
      reload: 'Refrescar',
      remove: 'Remover',
      fullscreen: {
        on: 'Encender Fullscreen',
        off: 'Apagar Fullscreen'
      }
    },
    sticky: {
      offset: 300,
      zIndex: 101
    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('portlet')) {
        the = KTUtil.data(element).get('portlet');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('portlet', the);
      }

      return the;
    },

    /**
     * Init portlet
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.head = KTUtil.child(element, '.kt-portlet__head');
      the.foot = KTUtil.child(element, '.kt-portlet__foot');

      if (KTUtil.child(element, '.kt-portlet__body')) {
        the.body = KTUtil.child(element, '.kt-portlet__body');
      } else if (KTUtil.child(element, '.kt-form')) {
        the.body = KTUtil.child(element, '.kt-form');
      }
    },

    /**
     * Build Form Wizard
     */
    build: function build() {
      // Remove
      var remove = KTUtil.find(the.head, '[data-ktportlet-tool=remove]');

      if (remove) {
        KTUtil.addEvent(remove, 'click', function (e) {
          e.preventDefault();
          Plugin.remove();
        });
      } // Reload


      var reload = KTUtil.find(the.head, '[data-ktportlet-tool=reload]');

      if (reload) {
        KTUtil.addEvent(reload, 'click', function (e) {
          e.preventDefault();
          Plugin.reload();
        });
      } // Toggle


      var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

      if (toggle) {
        KTUtil.addEvent(toggle, 'click', function (e) {
          e.preventDefault();
          Plugin.toggle();
        });
      } //== Fullscreen


      var fullscreen = KTUtil.find(the.head, '[data-ktportlet-tool=fullscreen]');

      if (fullscreen) {
        KTUtil.addEvent(fullscreen, 'click', function (e) {
          e.preventDefault();
          Plugin.fullscreen();
        });
      }

      Plugin.setupTooltips();
    },

    /**
     * Enable stickt mode
     */
    initSticky: function initSticky() {
      var lastScrollTop = 0;
      var offset = the.options.sticky.offset;

      if (!the.head) {
        return;
      }

      window.addEventListener('scroll', Plugin.onScrollSticky);
    },

    /**
     * Window scroll handle event for sticky portlet
     */
    onScrollSticky: function onScrollSticky(e) {
      var offset = the.options.sticky.offset;
      if (isNaN(offset)) return;
      var st = KTUtil.getScrollTop();

      if (st >= offset && KTUtil.hasClass(body, 'kt-portlet--sticky') === false) {
        Plugin.eventTrigger('stickyOn');
        KTUtil.addClass(body, 'kt-portlet--sticky');
        KTUtil.addClass(element, 'kt-portlet--sticky');
        Plugin.updateSticky();
      } else if (st * 1.5 <= offset && KTUtil.hasClass(body, 'kt-portlet--sticky')) {
        // back scroll mode
        Plugin.eventTrigger('stickyOff');
        KTUtil.removeClass(body, 'kt-portlet--sticky');
        KTUtil.removeClass(element, 'kt-portlet--sticky');
        Plugin.resetSticky();
      }
    },
    updateSticky: function updateSticky() {
      if (!the.head) {
        return;
      }

      var top;

      if (KTUtil.hasClass(body, 'kt-portlet--sticky')) {
        if (the.options.sticky.position.top instanceof Function) {
          top = parseInt(the.options.sticky.position.top.call(this, the));
        } else {
          top = parseInt(the.options.sticky.position.top);
        }

        var left;

        if (the.options.sticky.position.left instanceof Function) {
          left = parseInt(the.options.sticky.position.left.call(this, the));
        } else {
          left = parseInt(the.options.sticky.position.left);
        }

        var right;

        if (the.options.sticky.position.right instanceof Function) {
          right = parseInt(the.options.sticky.position.right.call(this, the));
        } else {
          right = parseInt(the.options.sticky.position.right);
        }

        KTUtil.css(the.head, 'z-index', the.options.sticky.zIndex);
        KTUtil.css(the.head, 'top', top + 'px');
        KTUtil.css(the.head, 'left', left + 'px');
        KTUtil.css(the.head, 'right', right + 'px');
      }
    },
    resetSticky: function resetSticky() {
      if (!the.head) {
        return;
      }

      if (KTUtil.hasClass(body, 'kt-portlet--sticky') === false) {
        KTUtil.css(the.head, 'z-index', '');
        KTUtil.css(the.head, 'top', '');
        KTUtil.css(the.head, 'left', '');
        KTUtil.css(the.head, 'right', '');
      }
    },

    /**
     * Remove portlet
     */
    remove: function remove() {
      if (Plugin.eventTrigger('beforeRemove') === false) {
        return;
      }

      if (KTUtil.hasClass(body, 'kt-portlet--fullscreen') && KTUtil.hasClass(element, 'kt-portlet--fullscreen')) {
        Plugin.fullscreen('off');
      }

      Plugin.removeTooltips();
      KTUtil.remove(element);
      Plugin.eventTrigger('afterRemove');
    },

    /**
     * Set content
     */
    setContent: function setContent(html) {
      if (html) {
        the.body.innerHTML = html;
      }
    },

    /**
     * Get body
     */
    getBody: function getBody() {
      return the.body;
    },

    /**
     * Get self
     */
    getSelf: function getSelf() {
      return element;
    },

    /**
     * Setup tooltips
     */
    setupTooltips: function setupTooltips() {
      if (the.options.tooltips) {
        var collapsed = KTUtil.hasClass(element, 'kt-portlet--collapse') || KTUtil.hasClass(element, 'kt-portlet--collapsed');
        var fullscreenOn = KTUtil.hasClass(body, 'kt-portlet--fullscreen') && KTUtil.hasClass(element, 'kt-portlet--fullscreen'); //== Remove

        var remove = KTUtil.find(the.head, '[data-ktportlet-tool=remove]');

        if (remove) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(remove, {
            title: the.options.tools.remove,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(remove).set('tooltip', tip);
        } //== Reload


        var reload = KTUtil.find(the.head, '[data-ktportlet-tool=reload]');

        if (reload) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(reload, {
            title: the.options.tools.reload,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(reload).set('tooltip', tip);
        } //== Toggle


        var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

        if (toggle) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(toggle, {
            title: collapsed ? the.options.tools.toggle.expand : the.options.tools.toggle.collapse,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(toggle).set('tooltip', tip);
        } //== Fullscreen


        var fullscreen = KTUtil.find(the.head, '[data-ktportlet-tool=fullscreen]');

        if (fullscreen) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(fullscreen, {
            title: fullscreenOn ? the.options.tools.fullscreen.off : the.options.tools.fullscreen.on,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(fullscreen).set('tooltip', tip);
        }
      }
    },

    /**
     * Setup tooltips
     */
    removeTooltips: function removeTooltips() {
      if (the.options.tooltips) {
        //== Remove
        var remove = KTUtil.find(the.head, '[data-ktportlet-tool=remove]');

        if (remove && KTUtil.data(remove).has('tooltip')) {
          KTUtil.data(remove).get('tooltip').dispose();
        } //== Reload


        var reload = KTUtil.find(the.head, '[data-ktportlet-tool=reload]');

        if (reload && KTUtil.data(reload).has('tooltip')) {
          KTUtil.data(reload).get('tooltip').dispose();
        } //== Toggle


        var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

        if (toggle && KTUtil.data(toggle).has('tooltip')) {
          KTUtil.data(toggle).get('tooltip').dispose();
        } //== Fullscreen


        var fullscreen = KTUtil.find(the.head, '[data-ktportlet-tool=fullscreen]');

        if (fullscreen && KTUtil.data(fullscreen).has('tooltip')) {
          KTUtil.data(fullscreen).get('tooltip').dispose();
        }
      }
    },

    /**
     * Reload
     */
    reload: function reload() {
      Plugin.eventTrigger('reload');
    },

    /**
     * Toggle
     */
    toggle: function toggle() {
      if (KTUtil.hasClass(element, 'kt-portlet--collapse') || KTUtil.hasClass(element, 'kt-portlet--collapsed')) {
        Plugin.expand();
      } else {
        Plugin.collapse();
      }
    },

    /**
     * Collapse
     */
    collapse: function collapse() {
      if (Plugin.eventTrigger('beforeCollapse') === false) {
        return;
      }

      KTUtil.slideUp(the.body, the.options.bodyToggleSpeed, function () {
        Plugin.eventTrigger('afterCollapse');
      });
      KTUtil.addClass(element, 'kt-portlet--collapse');
      var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

      if (toggle && KTUtil.data(toggle).has('tooltip')) {
        KTUtil.data(toggle).get('tooltip').updateTitleContent(the.options.tools.toggle.expand);
      }
    },

    /**
     * Expand
     */
    expand: function expand() {
      if (Plugin.eventTrigger('beforeExpand') === false) {
        return;
      }

      KTUtil.slideDown(the.body, the.options.bodyToggleSpeed, function () {
        Plugin.eventTrigger('afterExpand');
      });
      KTUtil.removeClass(element, 'kt-portlet--collapse');
      KTUtil.removeClass(element, 'kt-portlet--collapsed');
      var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

      if (toggle && KTUtil.data(toggle).has('tooltip')) {
        KTUtil.data(toggle).get('tooltip').updateTitleContent(the.options.tools.toggle.collapse);
      }
    },

    /**
     * fullscreen
     */
    fullscreen: function fullscreen(mode) {
      var d = {};
      var speed = 300;

      if (mode === 'off' || KTUtil.hasClass(body, 'kt-portlet--fullscreen') && KTUtil.hasClass(element, 'kt-portlet--fullscreen')) {
        Plugin.eventTrigger('beforeFullscreenOff');
        KTUtil.removeClass(body, 'kt-portlet--fullscreen');
        KTUtil.removeClass(element, 'kt-portlet--fullscreen');
        Plugin.removeTooltips();
        Plugin.setupTooltips();

        if (the.foot) {
          KTUtil.css(the.body, 'margin-bottom', '');
          KTUtil.css(the.foot, 'margin-top', '');
        }

        Plugin.eventTrigger('afterFullscreenOff');
      } else {
        Plugin.eventTrigger('beforeFullscreenOn');
        KTUtil.addClass(element, 'kt-portlet--fullscreen');
        KTUtil.addClass(body, 'kt-portlet--fullscreen');
        Plugin.removeTooltips();
        Plugin.setupTooltips();

        if (the.foot) {
          var height1 = parseInt(KTUtil.css(the.foot, 'height'));
          var height2 = parseInt(KTUtil.css(the.foot, 'height')) + parseInt(KTUtil.css(the.head, 'height'));
          KTUtil.css(the.body, 'margin-bottom', height1 + 'px');
          KTUtil.css(the.foot, 'margin-top', '-' + height2 + 'px');
        }

        Plugin.eventTrigger('afterFullscreenOn');
      }
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.remove = function () {
    return Plugin.remove(html);
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.initSticky = function () {
    return Plugin.initSticky();
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.updateSticky = function () {
    return Plugin.updateSticky();
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.resetSticky = function () {
    return Plugin.resetSticky();
  };
  /**
   * Destroy sticky portlet
   */


  the.destroySticky = function () {
    Plugin.resetSticky();
    window.removeEventListener('scroll', Plugin.onScrollSticky);
  };
  /**
   * Reload portlet
   * @returns {KTPortlet}
   */


  the.reload = function () {
    return Plugin.reload();
  };
  /**
   * Set portlet content
   * @returns {KTPortlet}
   */


  the.setContent = function (html) {
    return Plugin.setContent(html);
  };
  /**
   * Toggle portlet
   * @returns {KTPortlet}
   */


  the.toggle = function () {
    return Plugin.toggle();
  };
  /**
   * Collapse portlet
   * @returns {KTPortlet}
   */


  the.collapse = function () {
    return Plugin.collapse();
  };
  /**
   * Expand portlet
   * @returns {KTPortlet}
   */


  the.expand = function () {
    return Plugin.expand();
  };
  /**
   * Fullscreen portlet
   * @returns {MPortlet}
   */


  the.fullscreen = function () {
    return Plugin.fullscreen('on');
  };
  /**
   * Fullscreen portlet
   * @returns {MPortlet}
   */


  the.unFullscreen = function () {
    return Plugin.fullscreen('off');
  };
  /**
   * Get portletbody
   * @returns {jQuery}
   */


  the.getBody = function () {
    return Plugin.getBody();
  };
  /**
   * Get portletbody
   * @returns {jQuery}
   */


  the.getSelf = function () {
    return Plugin.getSelf();
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTPortlet;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/scrolltop.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/global/components/base/scrolltop.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTScrolltop = function KTScrolltop(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    offset: 300,
    speed: 600,
    toggleClass: 'kt-scrolltop--on'
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {mscrolltop}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('scrolltop')) {
        the = KTUtil.data(element).get('scrolltop');
      } else {
        // reset scrolltop
        Plugin.init(options); // build scrolltop

        Plugin.build();
        KTUtil.data(element).set('scrolltop', the);
      }

      return the;
    },

    /**
     * Handles subscrolltop click toggle
     * @returns {mscrolltop}
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },
    build: function build() {
      // handle window scroll
      if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
        window.addEventListener('touchend', function () {
          Plugin.handle();
        });
        window.addEventListener('touchcancel', function () {
          Plugin.handle();
        });
        window.addEventListener('touchleave', function () {
          Plugin.handle();
        });
      } else {
        window.addEventListener('scroll', function () {
          Plugin.handle();
        });
      } // handle button click 


      KTUtil.addEvent(element, 'click', Plugin.scroll);
    },

    /**
     * Handles scrolltop click scrollTop
     */
    handle: function handle() {
      var pos = window.pageYOffset; // current vertical position

      if (pos > the.options.offset) {
        KTUtil.addClass(body, the.options.toggleClass);
      } else {
        KTUtil.removeClass(body, the.options.toggleClass);
      }
    },

    /**
     * Handles scrolltop click scrollTop
     */
    scroll: function scroll(e) {
      e.preventDefault();
      KTUtil.scrollTop(0, the.options.speed);
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options 
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Get subscrolltop mode
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Set scrolltop content
   * @returns {mscrolltop}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTScrolltop;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/toggle.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/toggle.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // plugin setup

var KTToggle = function KTToggle(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    togglerState: '',
    targetState: ''
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('toggle')) {
        the = KTUtil.data(element).get('toggle');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('toggle', the);
      }

      return the;
    },

    /**
     * Handles subtoggle click toggle
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.target = KTUtil.get(the.options.target);
      the.targetState = the.options.targetState;
      the.togglerState = the.options.togglerState;
      the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';
    },

    /**
     * Setup toggle
     */
    build: function build() {
      KTUtil.addEvent(element, 'mouseup', Plugin.toggle);
    },

    /**
     * Handles offcanvas click toggle
     */
    toggle: function toggle(e) {
      Plugin.eventTrigger('beforeToggle');

      if (the.state == 'off') {
        Plugin.toggleOn();
      } else {
        Plugin.toggleOff();
      }

      Plugin.eventTrigger('afterToggle');
      e.preventDefault();
      return the;
    },

    /**
     * Handles toggle click toggle
     */
    toggleOn: function toggleOn() {
      Plugin.eventTrigger('beforeOn');
      KTUtil.addClass(the.target, the.targetState);

      if (the.togglerState) {
        KTUtil.addClass(element, the.togglerState);
      }

      the.state = 'on';
      Plugin.eventTrigger('afterOn');
      Plugin.eventTrigger('toggle');
      return the;
    },

    /**
     * Handles toggle click toggle
     */
    toggleOff: function toggleOff() {
      Plugin.eventTrigger('beforeOff');
      KTUtil.removeClass(the.target, the.targetState);

      if (the.togglerState) {
        KTUtil.removeClass(element, the.togglerState);
      }

      the.state = 'off';
      Plugin.eventTrigger('afterOff');
      Plugin.eventTrigger('toggle');
      return the;
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options 
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Get toggle state 
   */


  the.getState = function () {
    return the.state;
  };
  /**
   * Toggle 
   */


  the.toggle = function () {
    return Plugin.toggle();
  };
  /**
   * Toggle on 
   */


  the.toggleOn = function () {
    return Plugin.toggleOn();
  };
  /**
   * Toggle off 
   */


  the.toggleOff = function () {
    return Plugin.toggleOff();
  };
  /**
   * Attach event
   * @returns {KTToggle}
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   * @returns {KTToggle}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTToggle;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/util.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/global/components/base/util.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @class KTUtil  base utilize class that privides helper functions
 */
// Polyfills

/**
 * Element.matches() polyfill (simple version)
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}
/**
 * Element.closest() polyfill
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
 */


if (!Element.prototype.closest) {
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  }

  Element.prototype.closest = function (s) {
    var el = this;
    var ancestor = this;
    if (!document.documentElement.contains(el)) return null;

    do {
      if (ancestor.matches(s)) return ancestor;
      ancestor = ancestor.parentElement;
    } while (ancestor !== null);

    return null;
  };
}
/**
 * ChildNode.remove() polyfill
 * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/
 * @author Chris Ferdinandi
 * @license MIT
 */


(function (elem) {
  for (var i = 0; i < elem.length; i++) {
    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;

    window[elem[i]].prototype.remove = function () {
      this.parentNode.removeChild(this);
    };
  }
})(['Element', 'CharacterData', 'DocumentType']); //
// requestAnimationFrame polyfill by Erik Möller.
//  With fixes from Paul Irish and Tino Zijdel
//
//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/
//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
//
//  MIT license
//


(function () {
  var lastTime = 0;
  var vendors = ['webkit', 'moz'];

  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id = window.setTimeout(function () {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
    clearTimeout(id);
  };
})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md


(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('prepend')) {
      return;
    }

    Object.defineProperty(item, 'prepend', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function prepend() {
        var argArr = Array.prototype.slice.call(arguments),
            docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.insertBefore(docFrag, this.firstChild);
      }
    });
  });
})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // Global variables


window.KTUtilElementDataStore = {};
window.KTUtilElementDataStoreID = 0;
window.KTUtilDelegatedEventHandlers = {};

var KTUtil = function () {
  var resizeHandlers = [];
  /** @type {object} breakpoints The device width breakpoints **/

  var breakpoints = {
    sm: 544,
    // Small screen / phone
    md: 768,
    // Medium screen / tablet
    lg: 1024,
    // Large screen / desktop
    xl: 1200 // Extra large screen / wide desktop

  };
  /**
   * Handle window resize event with some
   * delay to attach event handlers upon resize complete
   */

  var _windowResizeHandler = function _windowResizeHandler() {
    var _runResizeHandlers = function _runResizeHandlers() {
      // reinitialize other subscribed elements
      for (var i = 0; i < resizeHandlers.length; i++) {
        var each = resizeHandlers[i];
        each.call();
      }
    };

    var timeout = false; // holder for timeout id

    var delay = 250; // delay after event is "complete" to run callback

    window.addEventListener('resize', function () {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        _runResizeHandlers();
      }, delay); // wait 50ms until window resize finishes.
    });
  };

  return {
    /**
     * Class main initializer.
     * @param {object} options.
     * @returns null
     */
    //main function to initiate the theme
    init: function init(options) {
      if (options && options.breakpoints) {
        breakpoints = options.breakpoints;
      }

      _windowResizeHandler();
    },

    /**
     * Adds window resize event handler.
     * @param {function} callback function.
     */
    addResizeHandler: function addResizeHandler(callback) {
      resizeHandlers.push(callback);
    },

    /**
     * Removes window resize event handler.
     * @param {function} callback function.
     */
    removeResizeHandler: function removeResizeHandler(callback) {
      for (var i = 0; i < resizeHandlers.length; i++) {
        if (callback === resizeHandlers[i]) {
          delete resizeHandlers[i];
        }
      }
    },

    /**
     * Trigger window resize handlers.
     */
    runResizeHandlers: function runResizeHandlers() {
      _runResizeHandlers();
    },
    resize: function resize() {
      if (typeof Event === 'function') {
        // modern browsers
        window.dispatchEvent(new Event('resize'));
      } else {
        // for IE and other old browsers
        // causes deprecation warning on modern browsers
        var evt = window.document.createEvent('UIEvents');
        evt.initUIEvent('resize', true, false, window, 0);
        window.dispatchEvent(evt);
      }
    },

    /**
     * Get GET parameter value from URL.
     * @param {string} paramName Parameter name.
     * @returns {string}
     */
    getURLParam: function getURLParam(paramName) {
      var searchString = window.location.search.substring(1),
          i,
          val,
          params = searchString.split("&");

      for (i = 0; i < params.length; i++) {
        val = params[i].split("=");

        if (val[0] == paramName) {
          return unescape(val[1]);
        }
      }

      return null;
    },

    /**
     * Checks whether current device is mobile touch.
     * @returns {boolean}
     */
    isMobileDevice: function isMobileDevice() {
      return this.getViewPort().width < this.getBreakpoint('lg') ? true : false;
    },

    /**
     * Checks whether current device is desktop.
     * @returns {boolean}
     */
    isDesktopDevice: function isDesktopDevice() {
      return KTUtil.isMobileDevice() ? false : true;
    },

    /**
     * Gets browser window viewport size. Ref:
     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/
     * @returns {object}
     */
    getViewPort: function getViewPort() {
      var e = window,
          a = 'inner';

      if (!('innerWidth' in window)) {
        a = 'client';
        e = document.documentElement || document.body;
      }

      return {
        width: e[a + 'Width'],
        height: e[a + 'Height']
      };
    },

    /**
     * Checks whether given device mode is currently activated.
     * @param {string} mode Responsive mode name(e.g: desktop,
     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)
     * @returns {boolean}
     */
    isInResponsiveRange: function isInResponsiveRange(mode) {
      var breakpoint = this.getViewPort().width;

      if (mode == 'general') {
        return true;
      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {
        return true;
      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {
        return true;
      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {
        return true;
      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {
        return true;
      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {
        return true;
      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {
        return true;
      }

      return false;
    },

    /**
     * Generates unique ID for give prefix.
     * @param {string} prefix Prefix for generated ID
     * @returns {boolean}
     */
    getUniqueID: function getUniqueID(prefix) {
      return prefix + Math.floor(Math.random() * new Date().getTime());
    },

    /**
     * Gets window width for give breakpoint mode.
     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)
     * @returns {number}
     */
    getBreakpoint: function getBreakpoint(mode) {
      return breakpoints[mode];
    },

    /**
     * Checks whether object has property matchs given key path.
     * @param {object} obj Object contains values paired with given key path
     * @param {string} keys Keys path seperated with dots
     * @returns {object}
     */
    isset: function isset(obj, keys) {
      var stone;
      keys = keys || '';

      if (keys.indexOf('[') !== -1) {
        throw new Error('Unsupported object path notation.');
      }

      keys = keys.split('.');

      do {
        if (obj === undefined) {
          return false;
        }

        stone = keys.shift();

        if (!obj.hasOwnProperty(stone)) {
          return false;
        }

        obj = obj[stone];
      } while (keys.length);

      return true;
    },

    /**
     * Gets highest z-index of the given element parents
     * @param {object} el jQuery element object
     * @returns {number}
     */
    getHighestZindex: function getHighestZindex(el) {
      var elem = KTUtil.get(el),
          position,
          value;

      while (elem && elem !== document) {
        // Ignore z-index if position is set to a value where z-index is ignored by the browser
        // This makes behavior of this function consistent across browsers
        // WebKit always returns auto if the element is positioned
        position = KTUtil.css(elem, 'position');

        if (position === "absolute" || position === "relative" || position === "fixed") {
          // IE returns 0 when zIndex is not specified
          // other browsers return a string
          // we ignore the case of nested elements with an explicit value of 0
          // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
          value = parseInt(KTUtil.css(elem, 'z-index'));

          if (!isNaN(value) && value !== 0) {
            return value;
          }
        }

        elem = elem.parentNode;
      }

      return null;
    },

    /**
     * Checks whether the element has any parent with fixed positionfreg
     * @param {object} el jQuery element object
     * @returns {boolean}
     */
    hasFixedPositionedParent: function hasFixedPositionedParent(el) {
      var position;

      while (el && el !== document) {
        position = KTUtil.css(el, 'position');

        if (position === "fixed") {
          return true;
        }

        el = el.parentNode;
      }

      return false;
    },

    /**
     * Simulates delay
     */
    sleep: function sleep(milliseconds) {
      var start = new Date().getTime();

      for (var i = 0; i < 1e7; i++) {
        if (new Date().getTime() - start > milliseconds) {
          break;
        }
      }
    },

    /**
     * Gets randomly generated integer value within given min and max range
     * @param {number} min Range start value
     * @param {number} max Range end value
     * @returns {number}
     */
    getRandomInt: function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    },

    /**
     * Checks whether Angular library is included
     * @returns {boolean}
     */
    isAngularVersion: function isAngularVersion() {
      return window.Zone !== undefined ? true : false;
    },
    // jQuery Workarounds
    // Deep extend:  $.extend(true, {}, objA, objB);
    deepExtend: function deepExtend(out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        var obj = arguments[i];
        if (!obj) continue;

        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (_typeof(obj[key]) === 'object') out[key] = KTUtil.deepExtend(out[key], obj[key]);else out[key] = obj[key];
          }
        }
      }

      return out;
    },
    // extend:  $.extend({}, objA, objB);
    extend: function extend(out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        if (!arguments[i]) continue;

        for (var key in arguments[i]) {
          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];
        }
      }

      return out;
    },
    get: function get(query) {
      var el;

      if (query === document) {
        return document;
      }

      if (!!(query && query.nodeType === 1)) {
        return query;
      }

      if (el = document.getElementById(query)) {
        return el;
      } else if (el = document.getElementsByTagName(query), el.length > 0) {
        return el[0];
      } else if (el = document.getElementsByClassName(query), el.length > 0) {
        return el[0];
      } else {
        return null;
      }
    },
    getByID: function getByID(query) {
      if (!!(query && query.nodeType === 1)) {
        return query;
      }

      return document.getElementById(query);
    },
    getByTag: function getByTag(query) {
      var el;

      if (el = document.getElementsByTagName(query)) {
        return el[0];
      } else {
        return null;
      }
    },
    getByClass: function getByClass(query) {
      var el;

      if (el = document.getElementsByClassName(query)) {
        return el[0];
      } else {
        return null;
      }
    },

    /**
     * Checks whether the element has given classes
     * @param {object} el jQuery element object
     * @param {string} Classes string
     * @returns {boolean}
     */
    hasClasses: function hasClasses(el, classes) {
      if (!el) {
        return;
      }

      var classesArr = classes.split(" ");

      for (var i = 0; i < classesArr.length; i++) {
        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {
          return false;
        }
      }

      return true;
    },
    hasClass: function hasClass(el, className) {
      if (!el) {
        return;
      }

      return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
    },
    addClass: function addClass(el, className) {
      if (!el || typeof className === 'undefined') {
        return;
      }

      var classNames = className.split(' ');

      if (el.classList) {
        for (var i = 0; i < classNames.length; i++) {
          if (classNames[i] && classNames[i].length > 0) {
            el.classList.add(KTUtil.trim(classNames[i]));
          }
        }
      } else if (!KTUtil.hasClass(el, className)) {
        for (var x = 0; x < classNames.length; x++) {
          el.className += ' ' + KTUtil.trim(classNames[x]);
        }
      }
    },
    removeClass: function removeClass(el, className) {
      if (!el || typeof className === 'undefined') {
        return;
      }

      var classNames = className.split(' ');

      if (el.classList) {
        for (var i = 0; i < classNames.length; i++) {
          el.classList.remove(KTUtil.trim(classNames[i]));
        }
      } else if (KTUtil.hasClass(el, className)) {
        for (var x = 0; x < classNames.length; x++) {
          el.className = el.className.replace(new RegExp('\\b' + KTUtil.trim(classNames[x]) + '\\b', 'g'), '');
        }
      }
    },
    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {
      var event;

      if (window.CustomEvent) {
        event = new CustomEvent(eventName, {
          detail: data
        });
      } else {
        event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventName, true, true, data);
      }

      el.dispatchEvent(event);
    },
    triggerEvent: function triggerEvent(node, eventName) {
      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems
      var doc;

      if (node.ownerDocument) {
        doc = node.ownerDocument;
      } else if (node.nodeType == 9) {
        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE
        doc = node;
      } else {
        throw new Error("Invalid node passed to fireEvent: " + node.id);
      }

      if (node.dispatchEvent) {
        // Gecko-style approach (now the standard) takes more work
        var eventClass = ""; // Different events have different event classes.
        // If this switch statement can't map an eventName to an eventClass,
        // the event firing is going to fail.

        switch (eventName) {
          case "click": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.

          case "mouseenter":
          case "mouseleave":
          case "mousedown":
          case "mouseup":
            eventClass = "MouseEvents";
            break;

          case "focus":
          case "change":
          case "blur":
          case "select":
            eventClass = "HTMLEvents";
            break;

          default:
            throw "fireEvent: Couldn't find an event class for event '" + eventName + "'.";
            break;
        }

        var event = doc.createEvent(eventClass);
        var bubbles = eventName == "change" ? false : true;
        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.

        event.synthetic = true; // allow detection of synthetic events
        // The second parameter says go ahead with the default action

        node.dispatchEvent(event, true);
      } else if (node.fireEvent) {
        // IE-old school style
        var event = doc.createEventObject();
        event.synthetic = true; // allow detection of synthetic events

        node.fireEvent("on" + eventName, event);
      }
    },
    index: function index(elm) {
      elm = KTUtil.get(elm);
      var c = elm.parentNode.children,
          i = 0;

      for (; i < c.length; i++) {
        if (c[i] == elm) return i;
      }
    },
    trim: function trim(string) {
      return string.trim();
    },
    eventTriggered: function eventTriggered(e) {
      if (e.currentTarget.dataset.triggered) {
        return true;
      } else {
        e.currentTarget.dataset.triggered = true;
        return false;
      }
    },
    remove: function remove(el) {
      if (el && el.parentNode) {
        el.parentNode.removeChild(el);
      }
    },
    find: function find(parent, query) {
      parent = KTUtil.get(parent);

      if (parent) {
        return parent.querySelector(query);
      }
    },
    findAll: function findAll(parent, query) {
      parent = KTUtil.get(parent);

      if (parent) {
        return parent.querySelectorAll(query);
      }
    },
    insertAfter: function insertAfter(el, referenceNode) {
      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);
    },
    parents: function parents(elem, selector) {
      // Element.matches() polyfill
      if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
          var matches = (this.document || this.ownerDocument).querySelectorAll(s),
              i = matches.length;

          while (--i >= 0 && matches.item(i) !== this) {}

          return i > -1;
        };
      } // Set up a parent array


      var parents = []; // Push each parent element to the array

      for (; elem && elem !== document; elem = elem.parentNode) {
        if (selector) {
          if (elem.matches(selector)) {
            parents.push(elem);
          }

          continue;
        }

        parents.push(elem);
      } // Return our parent array


      return parents;
    },
    children: function children(el, selector, log) {
      if (!el || !el.childNodes) {
        return;
      }

      var result = [],
          i = 0,
          l = el.childNodes.length;

      for (var i; i < l; ++i) {
        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {
          result.push(el.childNodes[i]);
        }
      }

      return result;
    },
    child: function child(el, selector, log) {
      var children = KTUtil.children(el, selector, log);
      return children ? children[0] : null;
    },
    matches: function matches(el, selector, log) {
      var p = Element.prototype;

      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {
        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
      };

      if (el && el.tagName) {
        return f.call(el, selector);
      } else {
        return false;
      }
    },
    data: function data(element) {
      element = KTUtil.get(element);
      return {
        set: function set(name, data) {
          if (element == null || element === undefined) {
            return;
          }

          if (element.customDataTag === undefined) {
            window.KTUtilElementDataStoreID++;
            element.customDataTag = window.KTUtilElementDataStoreID;
          }

          if (window.KTUtilElementDataStore[element.customDataTag] === undefined) {
            window.KTUtilElementDataStore[element.customDataTag] = {};
          }

          window.KTUtilElementDataStore[element.customDataTag][name] = data;
        },
        get: function get(name) {
          if (element === undefined) {
            return;
          }

          if (element == null || element.customDataTag === undefined) {
            return null;
          }

          return this.has(name) ? window.KTUtilElementDataStore[element.customDataTag][name] : null;
        },
        has: function has(name) {
          if (element === undefined) {
            return false;
          }

          if (element == null || element.customDataTag === undefined) {
            return false;
          }

          return window.KTUtilElementDataStore[element.customDataTag] && window.KTUtilElementDataStore[element.customDataTag][name] ? true : false;
        },
        remove: function remove(name) {
          if (element && this.has(name)) {
            delete window.KTUtilElementDataStore[element.customDataTag][name];
          }
        }
      };
    },
    outerWidth: function outerWidth(el, margin) {
      var width;

      if (margin === true) {
        width = parseFloat(el.offsetWidth);
        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));
        return parseFloat(width);
      } else {
        width = parseFloat(el.offsetWidth);
        return width;
      }
    },
    offset: function offset(elem) {
      var rect, win;
      elem = KTUtil.get(elem);

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    height: function height(el) {
      return KTUtil.css(el, 'height');
    },
    visible: function visible(el) {
      return !(el.offsetWidth === 0 && el.offsetHeight === 0);
    },
    attr: function attr(el, name, value) {
      el = KTUtil.get(el);

      if (el == undefined) {
        return;
      }

      if (value !== undefined) {
        el.setAttribute(name, value);
      } else {
        return el.getAttribute(name);
      }
    },
    hasAttr: function hasAttr(el, name) {
      el = KTUtil.get(el);

      if (el == undefined) {
        return;
      }

      return el.getAttribute(name) ? true : false;
    },
    removeAttr: function removeAttr(el, name) {
      el = KTUtil.get(el);

      if (el == undefined) {
        return;
      }

      el.removeAttribute(name);
    },
    animate: function animate(from, to, duration, update, easing, done) {
      /**
       * TinyAnimate.easings
       *  Adapted from jQuery Easing
       */
      var easings = {};
      var easing;

      easings.linear = function (t, b, c, d) {
        return c * t / d + b;
      };

      easing = easings.linear; // Early bail out if called incorrectly

      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {
        return;
      } // Create mock done() function if necessary


      if (typeof done !== 'function') {
        done = function done() {};
      } // Pick implementation (requestAnimationFrame | setTimeout)


      var rAF = window.requestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 50);
      }; // Animation loop


      var canceled = false;
      var change = to - from;

      function loop(timestamp) {
        var time = (timestamp || +new Date()) - start;

        if (time >= 0) {
          update(easing(time, from, change, duration));
        }

        if (time >= 0 && time >= duration) {
          update(to);
          done();
        } else {
          rAF(loop);
        }
      }

      update(from); // Start animation loop

      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();
      rAF(loop);
    },
    actualCss: function actualCss(el, prop, cache) {
      el = KTUtil.get(el);
      var css = '';

      if (el instanceof HTMLElement === false) {
        return;
      }

      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {
        var value; // the element is hidden so:
        // making the el block so we can meassure its height but still be hidden

        css = el.style.cssText;
        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';

        if (prop == 'width') {
          value = el.offsetWidth;
        } else if (prop == 'height') {
          value = el.offsetHeight;
        }

        el.style.cssText = css; // store it in cache

        el.setAttribute('kt-hidden-' + prop, value);
        return parseFloat(value);
      } else {
        // store it in cache
        return parseFloat(el.getAttribute('kt-hidden-' + prop));
      }
    },
    actualHeight: function actualHeight(el, cache) {
      return KTUtil.actualCss(el, 'height', cache);
    },
    actualWidth: function actualWidth(el, cache) {
      return KTUtil.actualCss(el, 'width', cache);
    },
    getScroll: function getScroll(element, method) {
      // The passed in `method` value should be 'Top' or 'Left'
      method = 'scroll' + method;
      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];
    },
    css: function css(el, styleProp, value) {
      el = KTUtil.get(el);

      if (!el) {
        return;
      }

      if (value !== undefined) {
        el.style[styleProp] = value;
      } else {
        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:

        if (defaultView && defaultView.getComputedStyle) {
          // sanitize property name to css notation
          // (hyphen separated words eg. font-Size)
          styleProp = styleProp.replace(/([A-Z])/g, "-$1").toLowerCase();
          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
        } else if (el.currentStyle) {
          // IE
          // sanitize property name to camelCase
          styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
            return letter.toUpperCase();
          });
          value = el.currentStyle[styleProp]; // convert other units to pixels on IE

          if (/^\d+(em|pt|%|ex)?$/i.test(value)) {
            return function (value) {
              var oldLeft = el.style.left,
                  oldRsLeft = el.runtimeStyle.left;
              el.runtimeStyle.left = el.currentStyle.left;
              el.style.left = value || 0;
              value = el.style.pixelLeft + "px";
              el.style.left = oldLeft;
              el.runtimeStyle.left = oldRsLeft;
              return value;
            }(value);
          }

          return value;
        }
      }
    },
    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {
      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {
        return;
      }

      speed = speed ? speed : 600;
      var calcHeight = KTUtil.actualHeight(el);
      var calcPaddingTop = false;
      var calcPaddingBottom = false;

      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {
        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));
      }

      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {
        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));
      }

      if (KTUtil.data(el).has('slide-padding-top')) {
        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));
      }

      if (KTUtil.data(el).has('slide-padding-bottom')) {
        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));
      }

      if (dir == 'up') {
        // up
        el.style.cssText = 'display: block; overflow: hidden;';

        if (calcPaddingTop) {
          KTUtil.animate(0, calcPaddingTop, speed, function (value) {
            el.style.paddingTop = calcPaddingTop - value + 'px';
          }, 'linear');
        }

        if (calcPaddingBottom) {
          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {
            el.style.paddingBottom = calcPaddingBottom - value + 'px';
          }, 'linear');
        }

        KTUtil.animate(0, calcHeight, speed, function (value) {
          el.style.height = calcHeight - value + 'px';
        }, 'linear', function () {
          callback();
          el.style.height = '';
          el.style.display = 'none';
        });
      } else if (dir == 'down') {
        // down
        el.style.cssText = 'display: block; overflow: hidden;';

        if (calcPaddingTop) {
          KTUtil.animate(0, calcPaddingTop, speed, function (value) {
            el.style.paddingTop = value + 'px';
          }, 'linear', function () {
            el.style.paddingTop = '';
          });
        }

        if (calcPaddingBottom) {
          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {
            el.style.paddingBottom = value + 'px';
          }, 'linear', function () {
            el.style.paddingBottom = '';
          });
        }

        KTUtil.animate(0, calcHeight, speed, function (value) {
          el.style.height = value + 'px';
        }, 'linear', function () {
          callback();
          el.style.height = '';
          el.style.display = '';
          el.style.overflow = '';
        });
      }
    },
    slideUp: function slideUp(el, speed, callback) {
      KTUtil.slide(el, 'up', speed, callback);
    },
    slideDown: function slideDown(el, speed, callback) {
      KTUtil.slide(el, 'down', speed, callback);
    },
    show: function show(el, display) {
      if (typeof el !== 'undefined') {
        el.style.display = display ? display : 'block';
      }
    },
    hide: function hide(el) {
      if (typeof el !== 'undefined') {
        el.style.display = 'none';
      }
    },
    addEvent: function addEvent(el, type, handler, one) {
      el = KTUtil.get(el);

      if (typeof el !== 'undefined' && el !== null) {
        el.addEventListener(type, handler);
      }
    },
    removeEvent: function removeEvent(el, type, handler) {
      el = KTUtil.get(el);

      if (el !== null) {
        el.removeEventListener(type, handler);
      }
    },
    on: function on(element, selector, event, handler) {
      if (!selector) {
        return;
      }

      var eventId = KTUtil.getUniqueID('event');

      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {
        var targets = element.querySelectorAll(selector);
        var target = e.target;

        while (target && target !== element) {
          for (var i = 0, j = targets.length; i < j; i++) {
            if (target === targets[i]) {
              handler.call(target, e);
            }
          }

          target = target.parentNode;
        }
      };

      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);
      return eventId;
    },
    off: function off(element, event, eventId) {
      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {
        return;
      }

      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);
      delete window.KTUtilDelegatedEventHandlers[eventId];
    },
    one: function onetime(el, type, callback) {
      el = KTUtil.get(el);
      el.addEventListener(type, function callee(e) {
        // remove event
        if (e.target && e.target.removeEventListener) {
          e.target.removeEventListener(e.type, callee);
        } // call handler


        return callback(e);
      });
    },
    hash: function hash(str) {
      var hash = 0,
          i,
          chr;
      if (str.length === 0) return hash;

      for (i = 0; i < str.length; i++) {
        chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
      }

      return hash;
    },
    animateClass: function animateClass(el, animationName, callback) {
      var animation;
      var animations = {
        animation: 'animationend',
        OAnimation: 'oAnimationEnd',
        MozAnimation: 'mozAnimationEnd',
        WebkitAnimation: 'webkitAnimationEnd',
        msAnimation: 'msAnimationEnd'
      };

      for (var t in animations) {
        if (el.style[t] !== undefined) {
          animation = animations[t];
        }
      }

      KTUtil.addClass(el, 'animated ' + animationName);
      KTUtil.one(el, animation, function () {
        KTUtil.removeClass(el, 'animated ' + animationName);
      });

      if (callback) {
        KTUtil.one(el, animation, callback);
      }
    },
    transitionEnd: function transitionEnd(el, callback) {
      var transition;
      var transitions = {
        transition: 'transitionend',
        OTransition: 'oTransitionEnd',
        MozTransition: 'mozTransitionEnd',
        WebkitTransition: 'webkitTransitionEnd',
        msTransition: 'msTransitionEnd'
      };

      for (var t in transitions) {
        if (el.style[t] !== undefined) {
          transition = transitions[t];
        }
      }

      KTUtil.one(el, transition, callback);
    },
    animationEnd: function animationEnd(el, callback) {
      var animation;
      var animations = {
        animation: 'animationend',
        OAnimation: 'oAnimationEnd',
        MozAnimation: 'mozAnimationEnd',
        WebkitAnimation: 'webkitAnimationEnd',
        msAnimation: 'msAnimationEnd'
      };

      for (var t in animations) {
        if (el.style[t] !== undefined) {
          animation = animations[t];
        }
      }

      KTUtil.one(el, animation, callback);
    },
    animateDelay: function animateDelay(el, value) {
      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];

      for (var i = 0; i < vendors.length; i++) {
        KTUtil.css(el, vendors[i] + 'animation-delay', value);
      }
    },
    animateDuration: function animateDuration(el, value) {
      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];

      for (var i = 0; i < vendors.length; i++) {
        KTUtil.css(el, vendors[i] + 'animation-duration', value);
      }
    },
    scrollTo: function scrollTo(target, offset, duration) {
      var duration = duration ? duration : 500;
      var target = KTUtil.get(target);
      var targetPos = target ? KTUtil.offset(target).top : 0;
      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
      var from, to;

      if (targetPos > scrollPos) {
        from = targetPos;
        to = scrollPos;
      } else {
        from = scrollPos;
        to = targetPos;
      }

      if (offset) {
        to += offset;
      }

      KTUtil.animate(from, to, duration, function (value) {
        document.documentElement.scrollTop = value;
        document.body.parentNode.scrollTop = value;
        document.body.scrollTop = value;
      }); //, easing, done
    },
    scrollTop: function scrollTop(offset, duration) {
      KTUtil.scrollTo(null, offset, duration);
    },
    isArray: function isArray(obj) {
      return obj && Array.isArray(obj);
    },
    ready: function ready(callback) {
      if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
        callback();
      } else {
        document.addEventListener('DOMContentLoaded', callback);
      }
    },
    isEmpty: function isEmpty(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          return false;
        }
      }

      return true;
    },
    numberString: function numberString(nStr) {
      nStr += '';
      var x = nStr.split('.');
      var x1 = x[0];
      var x2 = x.length > 1 ? '.' + x[1] : '';
      var rgx = /(\d+)(\d{3})/;

      while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
      }

      return x1 + x2;
    },
    detectIE: function detectIE() {
      var ua = window.navigator.userAgent; // Test values; Uncomment to check result …
      // IE 10
      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
      // IE 11
      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
      // Edge 12 (Spartan)
      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
      // Edge 13
      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

      var msie = ua.indexOf('MSIE ');

      if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
      }

      var trident = ua.indexOf('Trident/');

      if (trident > 0) {
        // IE 11 => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
      }

      var edge = ua.indexOf('Edge/');

      if (edge > 0) {
        // Edge (IE 12+) => return version number
        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
      } // other browser


      return false;
    },
    isRTL: function isRTL() {
      return KTUtil.attr(KTUtil.get('html'), 'direction') == 'rtl';
    },
    //
    // Scroller
    scrollInit: function scrollInit(element, options) {
      if (!element) return; // Define init function

      function init() {
        var ps;
        var height;

        if (options.height instanceof Function) {
          height = parseInt(options.height.call());
        } else {
          height = parseInt(options.height);
        } // Destroy scroll on table and mobile modes


        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isInResponsiveRange('tablet-and-mobile')) {
          ps = KTUtil.data(element).get('ps');

          if (ps) {
            if (options.resetHeightOnDestroy) {
              KTUtil.css(element, 'height', 'auto');
            } else {
              KTUtil.css(element, 'overflow', 'auto');

              if (height > 0) {
                KTUtil.css(element, 'height', height + 'px');
              }
            }

            ps.destroy();
            ps = KTUtil.data(element).remove('ps');
          } else if (height > 0) {
            KTUtil.css(element, 'overflow', 'auto');
            KTUtil.css(element, 'height', height + 'px');
          }

          return;
        }

        if (height > 0) {
          KTUtil.css(element, 'height', height + 'px');
        }

        if (options.desktopNativeScroll) {
          KTUtil.css(element, 'overflow', 'auto');
          return;
        } // Init scroll


        KTUtil.css(element, 'overflow', 'hidden');
        ps = KTUtil.data(element).get('ps');

        if (ps) {
          ps.update();
        } else {
          KTUtil.addClass(element, 'kt-scroll');
          ps = new PerfectScrollbar(element, {
            wheelSpeed: 0.5,
            swipeEasing: true,
            wheelPropagation: options.windowScroll === false ? false : true,
            minScrollbarLength: 40,
            maxScrollbarLength: 300,
            suppressScrollX: KTUtil.attr(element, 'data-scroll-x') != 'true' ? true : false
          });
          KTUtil.data(element).set('ps', ps);
        } // Remember scroll position in cookie


        var uid = KTUtil.attr(element, 'id');

        if (options.rememberPosition === true && Cookies && uid) {
          if (Cookies.get(uid)) {
            var pos = parseInt(Cookies.get(uid));

            if (pos > 0) {
              element.scrollTop = pos;
            }
          }

          element.addEventListener('ps-scroll-y', function () {
            Cookies.set(uid, element.scrollTop);
          });
        }
      } // Init


      init(); // Handle window resize

      if (options.handleWindowResize) {
        KTUtil.addResizeHandler(function () {
          init();
        });
      }
    },
    scrollUpdate: function scrollUpdate(element) {
      var ps = KTUtil.data(element).get('ps');

      if (ps) {
        ps.update();
      }
    },
    scrollUpdateAll: function scrollUpdateAll(parent) {
      var scrollers = KTUtil.findAll(parent, '.ps');

      for (var i = 0, len = scrollers.length; i < len; i++) {
        KTUtil.scrollUpdate(scrollers[i]);
      }
    },
    scrollDestroy: function scrollDestroy(element) {
      var ps = KTUtil.data(element).get('ps');

      if (ps) {
        ps.destroy();
        ps = KTUtil.data(element).remove('ps');
      }
    },
    setHTML: function setHTML(el, html) {
      if (KTUtil.get(el)) {
        KTUtil.get(el).innerHTML = html;
      }
    },
    getHTML: function getHTML(el) {
      if (KTUtil.get(el)) {
        return KTUtil.get(el).innerHTML;
      }
    },
    getDocumentHeight: function getDocumentHeight() {
      var body = document.body;
      var html = document.documentElement;
      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
    },
    getScrollTop: function getScrollTop() {
      return (document.scrollingElement || document.documentElement).scrollTop;
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTUtil;
} // Initialize KTUtil class on document ready


KTUtil.ready(function () {
  KTUtil.init();
}); // CSS3 Transitions only after page load(.kt-page-loading class added to body tag and remove with JS on page load)

window.onload = function () {
  KTUtil.removeClass(KTUtil.get('body'), 'kt-page--loading');
};

/***/ }),

/***/ "./resources/assets/js/global/components/base/wizard.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/wizard.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// plugin setup
var KTWizard = function KTWizard(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    startStep: 1,
    clickableSteps: true
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('wizard')) {
        the = KTUtil.data(element).get('wizard');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('wizard', the);
      }

      return the;
    },

    /**
     * Init wizard
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options); // Elements

      the.steps = KTUtil.findAll(element, '[data-ktwizard-type="step"]');
      the.btnSubmit = KTUtil.find(element, '[data-ktwizard-type="action-submit"]');
      the.btnNext = KTUtil.find(element, '[data-ktwizard-type="action-next"]');
      the.btnPrev = KTUtil.find(element, '[data-ktwizard-type="action-prev"]');
      the.btnLast = KTUtil.find(element, '[data-ktwizard-type="action-last"]');
      the.btnFirst = KTUtil.find(element, '[data-ktwizard-type="action-first"]'); // Variables

      the.events = [];
      the.currentStep = 1;
      the.stopped = false;
      the.totalSteps = the.steps.length; // Init current step

      if (the.options.startStep > 1) {
        Plugin.goTo(the.options.startStep);
      } // Init UI


      Plugin.updateUI();
    },

    /**
     * Build Form Wizard
     */
    build: function build() {
      // Next button event handler
      KTUtil.addEvent(the.btnNext, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(Plugin.getNextStep(), true);
      }); // Prev button event handler

      KTUtil.addEvent(the.btnPrev, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(Plugin.getPrevStep(), true);
      }); // First button event handler

      KTUtil.addEvent(the.btnFirst, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(1, true);
      }); // Last button event handler

      KTUtil.addEvent(the.btnLast, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(the.totalSteps, true);
      });

      if (the.options.clickableSteps === true) {
        KTUtil.on(element, '[data-ktwizard-type="step"]', 'click', function () {
          var index = Array.prototype.indexOf.call(the.steps, this) + 1;

          if (index !== the.currentStep) {
            Plugin.goTo(index, true);
          }
        });
      }
    },

    /**
     * Handles wizard click wizard
     */
    goTo: function goTo(number, eventHandle) {
      // Skip if this step is already shown
      if (number === the.currentStep || number > the.totalSteps || number < 0) {
        return;
      } // Validate step number


      if (number) {
        number = parseInt(number);
      } else {
        number = Plugin.getNextStep();
      } // Before next and prev events


      var callback;

      if (eventHandle === true) {
        if (number > the.currentStep) {
          callback = Plugin.eventTrigger('beforeNext');
        } else {
          callback = Plugin.eventTrigger('beforePrev');
        }
      } // Skip if stopped


      if (the.stopped === true) {
        the.stopped = false;
        return;
      } // Continue if no exit


      if (callback !== false) {
        // Before change
        if (eventHandle === true) {
          Plugin.eventTrigger('beforeChange');
        } // Set current step


        the.currentStep = number;
        Plugin.updateUI(); // Trigger change event

        if (eventHandle === true) {
          Plugin.eventTrigger('change');
        }
      } // After next and prev events


      if (eventHandle === true) {
        if (number > the.startStep) {
          Plugin.eventTrigger('afterNext');
        } else {
          Plugin.eventTrigger('afterPrev');
        }
      } else {
        // this function called by method, stop for the next call
        the.stopped = true;
      }

      return the;
    },

    /**
     * Cancel
     */
    stop: function stop() {
      the.stopped = true;
    },

    /**
     * Resume
     */
    start: function start() {
      the.stopped = false;
    },

    /**
     * Check last step
     */
    isLastStep: function isLastStep() {
      return the.currentStep === the.totalSteps;
    },

    /**
     * Check first step
     */
    isFirstStep: function isFirstStep() {
      return the.currentStep === 1;
    },

    /**
     * Check between step
     */
    isBetweenStep: function isBetweenStep() {
      return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;
    },

    /**
     * Go to the first step
     */
    updateUI: function updateUI() {
      var stepType = '';
      var index = the.currentStep - 1;

      if (Plugin.isLastStep()) {
        stepType = 'last';
      } else if (Plugin.isFirstStep()) {
        stepType = 'first';
      } else {
        stepType = 'between';
      }

      KTUtil.attr(the.element, 'data-ktwizard-state', stepType); // Steps

      var steps = KTUtil.findAll(the.element, '[data-ktwizard-type="step"]');

      if (steps && steps.length > 0) {
        for (var i = 0, len = steps.length; i < len; i++) {
          if (i == index) {
            KTUtil.attr(steps[i], 'data-ktwizard-state', 'current');
          } else {
            if (i < index) {
              KTUtil.attr(steps[i], 'data-ktwizard-state', 'done');
            } else {
              KTUtil.attr(steps[i], 'data-ktwizard-state', 'pending');
            }
          }
        }
      } // Steps Info


      var stepsInfo = KTUtil.findAll(the.element, '[data-ktwizard-type="step-info"]');

      if (stepsInfo && stepsInfo.length > 0) {
        for (var i = 0, len = stepsInfo.length; i < len; i++) {
          if (i == index) {
            KTUtil.attr(stepsInfo[i], 'data-ktwizard-state', 'current');
          } else {
            KTUtil.removeAttr(stepsInfo[i], 'data-ktwizard-state');
          }
        }
      } // Steps Content


      var stepsContent = KTUtil.findAll(the.element, '[data-ktwizard-type="step-content"]');

      if (stepsContent && stepsContent.length > 0) {
        for (var i = 0, len = stepsContent.length; i < len; i++) {
          if (i == index) {
            KTUtil.attr(stepsContent[i], 'data-ktwizard-state', 'current');
          } else {
            KTUtil.removeAttr(stepsContent[i], 'data-ktwizard-state');
          }
        }
      }
    },

    /**
     * Get next step
     */
    getNextStep: function getNextStep() {
      if (the.totalSteps >= the.currentStep + 1) {
        return the.currentStep + 1;
      } else {
        return the.totalSteps;
      }
    },

    /**
     * Get prev step
     */
    getPrevStep: function getPrevStep() {
      if (the.currentStep - 1 >= 1) {
        return the.currentStep - 1;
      } else {
        return 1;
      }
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, nested) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Go to the next step
   */


  the.goNext = function (eventHandle) {
    return Plugin.goTo(Plugin.getNextStep(), eventHandle);
  };
  /**
   * Go to the prev step
   */


  the.goPrev = function (eventHandle) {
    return Plugin.goTo(Plugin.getPrevStep(), eventHandle);
  };
  /**
   * Go to the last step
   */


  the.goLast = function (eventHandle) {
    return Plugin.goTo(the.totalSteps, eventHandle);
  };
  /**
   * Go to the first step
   */


  the.goFirst = function (eventHandle) {
    return Plugin.goTo(1, eventHandle);
  };
  /**
   * Go to a step
   */


  the.goTo = function (number, eventHandle) {
    return Plugin.goTo(number, eventHandle);
  };
  /**
   * Cancel step
   */


  the.stop = function () {
    return Plugin.stop();
  };
  /**
   * Resume step
   */


  the.start = function () {
    return Plugin.start();
  };
  /**
   * Get current step number
   */


  the.getStep = function () {
    return the.currentStep;
  };
  /**
   * Check last step
   */


  the.isLastStep = function () {
    return Plugin.isLastStep();
  };
  /**
   * Check first step
   */


  the.isFirstStep = function () {
    return Plugin.isFirstStep();
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTWizard;
}

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/bootstrap-datepicker.init.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/bootstrap-datepicker.init.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


$.fn.datepicker.defaults.zIndexOffset = 10;

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/bootstrap-markdown.init.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/bootstrap-markdown.init.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


$.fn.markdown.defaults.iconlibrary = 'fa';
$.fn.markdown.defaults.buttons[0][0]['data'][2]['icon']['fa'] = 'fa fa-heading';
$.fn.markdown.defaults.buttons[0][1]['data'][1]['icon']['fa'] = 'fa fa-image';
$.fn.markdown.defaults.buttons[0][2]['data'][1]['icon']['fa'] = 'fa fa-list-ol';

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/bootstrap-notify.init.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/bootstrap-notify.init.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//== Set defaults
$.notifyDefaults({
  template: '' + '<div data-notify="container" class="alert alert-{0} m-alert" role="alert">' + '<button type="button" aria-hidden="true" class="close" data-notify="dismiss"></button>' + '<span data-notify="icon"></span>' + '<span data-notify="title">{1}</span>' + '<span data-notify="message">{2}</span>' + '<div class="progress" data-notify="progressbar">' + '<div class="progress-bar progress-bar-animated bg-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' + '</div>' + '<a href="{3}" target="{4}" data-notify="url"></a>' + '</div>'
});

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/bootstrap-switch.init.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/bootstrap-switch.init.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//$.fn.bootstrapSwitch.defaults.size = 'large';
//$.fn.bootstrapSwitch.defaults.onColor = 'success';

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/bootstrap-timepicker.init.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/bootstrap-timepicker.init.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


$.fn.timepicker.defaults = $.extend(true, {}, $.fn.timepicker.defaults, {
  icons: {
    up: 'la la-angle-up',
    down: 'la la-angle-down'
  }
});

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/dropzone.init.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/dropzone.init.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Dropzone.autoDiscover = false;

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/jquery-validation.init.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/jquery-validation.init.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var valGetParentContainer = function valGetParentContainer(element) {
  var element = $(element);

  if ($(element).closest('.form-group-sub').length > 0) {
    return $(element).closest('.form-group-sub');
  } else if ($(element).closest('.bootstrap-select').length > 0) {
    return $(element).closest('.bootstrap-select');
  } else {
    return $(element).closest('.form-group');
  }
};

jQuery.validator.setDefaults({
  errorElement: 'div',
  //default input error message container
  focusInvalid: false,
  // do not focus the last invalid input
  ignore: "",
  // validate all fields including form hidden input
  errorPlacement: function errorPlacement(error, element) {
    // render error placement for each input type
    var element = $(element);
    var group = valGetParentContainer(element);
    var help = group.find('.form-text');

    if (group.find('.valid-feedback, .invalid-feedback').length !== 0) {
      return;
    }

    element.addClass('is-invalid');
    error.addClass('invalid-feedback');

    if (help.length > 0) {
      help.before(error);
    } else {
      if (element.closest('.bootstrap-select').length > 0) {
        //Bootstrap select
        element.closest('.bootstrap-select').wrap('<div class="bootstrap-select-wrapper" />').after(error);
      } else if (element.closest('.input-group').length > 0) {
        //Bootstrap group
        element.after(error);
      } else {
        //Checkbox & radios
        if (element.is(':checkbox')) {
          element.closest('.kt-checkbox').find('> span').after(error);
        } else {
          element.after(error);
        }
      }
    }
  },
  highlight: function highlight(element) {
    // hightlight error inputs
    var group = valGetParentContainer(element);
    group.addClass('validate');
    group.addClass('is-invalid');
    $(element).removeClass('is-valid');
  },
  unhighlight: function unhighlight(element) {
    // revert the change done by hightlight
    var group = valGetParentContainer(element);
    group.removeClass('validate');
    group.removeClass('is-invalid');
    $(element).removeClass('is-invalid');
  },
  success: function success(label, element) {
    var group = valGetParentContainer(element);
    group.removeClass('validate');
    group.find('.invalid-feedback').remove();
  }
});
jQuery.validator.addMethod("email", function (value, element) {
  if (/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(value)) {
    return true;
  } else {
    return false;
  }
}, "Please enter a valid Email.");

/***/ }),

/***/ "./resources/assets/js/global/integration/plugins/sweetalert2.init.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/js/global/integration/plugins/sweetalert2.init.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Set defaults

Swal.mixin({
  width: 400,
  heightAuto: false,
  padding: '2.5rem',
  buttonsStyling: false,
  confirmButtonClass: 'btn btn-success',
  confirmButtonColor: null,
  cancelButtonClass: 'btn btn-secondary',
  cancelButtonColor: null
});

/***/ }),

/***/ "./resources/assets/js/global/layout/chat.js":
/*!***************************************************!*\
  !*** ./resources/assets/js/global/layout/chat.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Class definition

var KTChat = function () {
  var initChat = function initChat(parentEl) {
    var messageListEl = KTUtil.find(parentEl, '.kt-scroll');

    if (!messageListEl) {
      return;
    } // initialize perfect scrollbar(see:  https://github.com/utatti/perfect-scrollbar)


    KTUtil.scrollInit(messageListEl, {
      windowScroll: false,
      // allow browser scroll when the scroll reaches the end of the side
      mobileNativeScroll: true,
      // enable native scroll for mobile
      desktopNativeScroll: false,
      // disable native scroll and use custom scroll for desktop
      resetHeightOnDestroy: true,
      // reset css height on scroll feature destroyed
      handleWindowResize: true,
      // recalculate hight on window resize
      rememberPosition: true,
      // remember scroll position in cookie
      height: function height() {
        // calculate height
        var height; // Mobile mode

        if (KTUtil.isInResponsiveRange('tablet-and-mobile')) {
          return KTUtil.hasAttr(messageListEl, 'data-mobile-height') ? parseInt(KTUtil.attr(messageListEl, 'data-mobile-height')) : 300;
        } // Desktop mode


        if (KTUtil.isInResponsiveRange('desktop') && KTUtil.hasAttr(messageListEl, 'data-height')) {
          return parseInt(KTUtil.attr(messageListEl, 'data-height'));
        }

        var chatEl = KTUtil.find(parentEl, '.kt-chat');
        var portletHeadEl = KTUtil.find(parentEl, '.kt-portlet > .kt-portlet__head');
        var portletBodyEl = KTUtil.find(parentEl, '.kt-portlet > .kt-portlet__body');
        var portletFootEl = KTUtil.find(parentEl, '.kt-portlet > .kt-portlet__foot');

        if (KTUtil.isInResponsiveRange('desktop')) {
          height = KTLayout.getContentHeight();
        } else {
          height = KTUtil.getViewPort().height;
        }

        if (chatEl) {
          height = height - parseInt(KTUtil.css(chatEl, 'margin-top')) - parseInt(KTUtil.css(chatEl, 'margin-bottom'));
          height = height - parseInt(KTUtil.css(chatEl, 'padding-top')) - parseInt(KTUtil.css(chatEl, 'padding-bottom'));
        }

        if (portletHeadEl) {
          height = height - parseInt(KTUtil.css(portletHeadEl, 'height'));
          height = height - parseInt(KTUtil.css(portletHeadEl, 'margin-top')) - parseInt(KTUtil.css(portletHeadEl, 'margin-bottom'));
        }

        if (portletBodyEl) {
          height = height - parseInt(KTUtil.css(portletBodyEl, 'margin-top')) - parseInt(KTUtil.css(portletBodyEl, 'margin-bottom'));
          height = height - parseInt(KTUtil.css(portletBodyEl, 'padding-top')) - parseInt(KTUtil.css(portletBodyEl, 'padding-bottom'));
        }

        if (portletFootEl) {
          height = height - parseInt(KTUtil.css(portletFootEl, 'height'));
          height = height - parseInt(KTUtil.css(portletFootEl, 'margin-top')) - parseInt(KTUtil.css(portletFootEl, 'margin-bottom'));
        } // remove additional space


        height = height - 5;
        return height;
      }
    }); // messaging

    var handleMessaging = function handleMessaging() {
      var scrollEl = KTUtil.find(parentEl, '.kt-scroll');
      var messagesEl = KTUtil.find(parentEl, '.kt-chat__messages');
      var textarea = KTUtil.find(parentEl, '.kt-chat__input textarea');

      if (textarea.value.length === 0) {
        return;
      }

      var node = document.createElement("DIV");
      KTUtil.addClass(node, 'kt-chat__message kt-chat__message--brand kt-chat__message--right');
      var html = '<div class="kt-chat__user">' + '<span class="kt-chat__datetime">Just now</span>' + '<a href="#" class="kt-chat__username">Jason Muller</span></a>' + '<span class="kt-media kt-media--circle kt-media--sm">' + '<img src="./assets/media/users/100_12.jpg" alt="image">' + '</span>' + '</div>' + '<div class="kt-chat__text kt-bg-light-brand">' + textarea.value;
      '</div>';
      KTUtil.setHTML(node, html);
      messagesEl.appendChild(node);
      textarea.value = '';
      scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));
      var ps;

      if (ps = KTUtil.data(scrollEl).get('ps')) {
        ps.update();
      }

      setTimeout(function () {
        var node = document.createElement("DIV");
        KTUtil.addClass(node, 'kt-chat__message kt-chat__message--success');
        var html = '<div class="kt-chat__user">' + '<span class="kt-media kt-media--circle kt-media--sm">' + '<img src="./assets/media/users/100_13.jpg" alt="image">' + '</span>' + '<a href="#" class="kt-chat__username">Max Born</span></a>' + '<span class="kt-chat__datetime">Just now</span>' + '</div>' + '<div class="kt-chat__text kt-bg-light-success">' + 'Right before vacation season we have the next Big Deal for you. <br>Book the car of your dreams and save up to <b>25%*</b> worldwide.' + '</div>';
        KTUtil.setHTML(node, html);
        messagesEl.appendChild(node);
        textarea.value = '';
        scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));
        var ps;

        if (ps = KTUtil.data(scrollEl).get('ps')) {
          ps.update();
        }
      }, 2000);
    }; // attach events


    KTUtil.on(parentEl, '.kt-chat__input textarea', 'keydown', function (e) {
      if (e.keyCode == 13) {
        handleMessaging();
        e.preventDefault();
        return false;
      }
    });
    KTUtil.on(parentEl, '.kt-chat__input .kt-chat__reply', 'click', function (e) {
      handleMessaging();
    });
  };

  return {
    // public functions
    init: function init() {
      // init modal chat example
      initChat(KTUtil.getByID('kt_chat_modal')); // trigger click to show popup modal chat on page load

      if (encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com') {
        setTimeout(function () {
          if (!Cookies.get('kt_app_chat_shown')) {
            var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now

            Cookies.set('kt_app_chat_shown', 1, {
              expires: expires
            });
            KTUtil.getByID('kt_app_chat_launch_btn').click();
          }
        }, 2000);
      }
    },
    setup: function setup(element) {
      initChat(element);
    }
  };
}(); // webpack support


if (true) {
  module.exports = KTChat;
}

KTUtil.ready(function () {
  KTChat.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/demo-panel.js":
/*!*********************************************************!*\
  !*** ./resources/assets/js/global/layout/demo-panel.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTDemoPanel = function () {
  var demoPanel;
  var offcanvas;

  var _init = function init() {
    offcanvas = new KTOffcanvas(demoPanel, {
      overlay: true,
      baseClass: 'kt-demo-panel',
      closeBy: 'kt_demo_panel_close',
      toggleBy: 'kt_demo_panel_toggle'
    });
    var head = KTUtil.find(demoPanel, '.kt-demo-panel__head');
    var body = KTUtil.find(demoPanel, '.kt-demo-panel__body');
    KTUtil.scrollInit(body, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(demoPanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(demoPanel, 'paddingBottom'));
        return height;
      }
    });

    if (typeof offcanvas !== 'undefined' && offcanvas.length === 0) {
      offcanvas.on('hide', function () {
        var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now

        Cookies.set('kt_demo_panel_shown', 1, {
          expires: expires
        });
      });
    }
  };

  var remind = function remind() {
    if (!(encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com')) {
      return;
    }

    setTimeout(function () {
      if (!Cookies.get('kt_demo_panel_shown')) {
        var expires = new Date(new Date().getTime() + 15 * 60 * 1000); // expire in 15 minutes from now

        Cookies.set('kt_demo_panel_shown', 1, {
          expires: expires
        });
        offcanvas.show();
      }
    }, 4000);
  };

  return {
    init: function init() {
      demoPanel = KTUtil.getByID('kt_demo_panel');

      _init();

      remind();
    }
  };
}();

$(document).ready(function () {
  KTDemoPanel.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/layout.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/global/layout/layout.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayout = function () {
  var body;
  var header;
  var headerMenu;
  var headerMenuOffcanvas;
  var asideMenu;
  var asideMenuOffcanvas;
  var asideToggler;
  var asideSecondary;
  var asideSecondaryToggler;
  var scrollTop;
  var pageStickyPortlet; // Header

  var _initHeader = function initHeader() {
    var tmp;
    var headerEl = KTUtil.get('kt_header');
    var options = {
      offset: {},
      minimize: {
        /*
        desktop: {
            on: 'kt-header--minimize'
        },
        */
        desktop: false,
        mobile: false
      }
    };

    if (tmp = KTUtil.attr(headerEl, 'data-ktheader-minimize-offset')) {
      options.offset.desktop = tmp;
    }

    if (tmp = KTUtil.attr(headerEl, 'data-ktheader-minimize-mobile-offset')) {
      options.offset.mobile = tmp;
    }

    header = new KTHeader('kt_header', options);
  }; // Header Menu


  var initHeaderMenu = function initHeaderMenu() {
    // init aside left offcanvas
    headerMenuOffcanvas = new KTOffcanvas('kt_header_menu_wrapper', {
      overlay: true,
      baseClass: 'kt-header-menu-wrapper',
      closeBy: 'kt_header_menu_mobile_close_btn',
      toggleBy: {
        target: 'kt_header_mobile_toggler',
        state: 'kt-header-mobile__toolbar-toggler--active'
      }
    });
    headerMenu = new KTMenu('kt_header_menu', {
      submenu: {
        desktop: 'dropdown',
        tablet: 'accordion',
        mobile: 'accordion'
      },
      accordion: {
        slideSpeed: 200,
        // accordion toggle slide speed in milliseconds
        expandAll: false // allow having multiple expanded accordions in the menu

      }
    });
  }; // Header Topbar


  var initHeaderTopbar = function initHeaderTopbar() {
    asideToggler = new KTToggle('kt_header_mobile_topbar_toggler', {
      target: 'body',
      targetState: 'kt-header__topbar--mobile-on',
      togglerState: 'kt-header-mobile__toolbar-topbar-toggler--active'
    });
  }; // Aside


  var _initAside = function initAside() {
    // init aside left offcanvas
    var asidBrandHover = false;
    var aside = KTUtil.get('kt_aside');
    var asideBrand = KTUtil.get('kt_aside_brand');
    var asideOffcanvasClass = KTUtil.hasClass(aside, 'kt-aside--offcanvas-default') ? 'kt-aside--offcanvas-default' : 'kt-aside';
    asideMenuOffcanvas = new KTOffcanvas('kt_aside', {
      baseClass: asideOffcanvasClass,
      overlay: true,
      closeBy: 'kt_aside_close_btn',
      toggleBy: {
        target: 'kt_aside_mobile_toggler',
        state: 'kt-header-mobile__toolbar-toggler--active'
      }
    }); // Handle minimzied aside hover

    if (KTUtil.hasClass(body, 'kt-aside--fixed')) {
      var insideTm;
      var outsideTm;
      KTUtil.addEvent(aside, 'mouseenter', function (e) {
        e.preventDefault();

        if (KTUtil.isInResponsiveRange('desktop') === false) {
          return;
        }

        if (outsideTm) {
          clearTimeout(outsideTm);
          outsideTm = null;
        }

        insideTm = setTimeout(function () {
          if (KTUtil.hasClass(body, 'kt-aside--minimize') && KTUtil.isInResponsiveRange('desktop')) {
            KTUtil.removeClass(body, 'kt-aside--minimize'); // Minimizing class

            KTUtil.addClass(body, 'kt-aside--minimizing');
            KTUtil.transitionEnd(body, function () {
              KTUtil.removeClass(body, 'kt-aside--minimizing');
            }); // Hover class

            KTUtil.addClass(body, 'kt-aside--minimize-hover');
            asideMenu.scrollUpdate();
            asideMenu.scrollTop();
          }
        }, 50);
      });
      KTUtil.addEvent(aside, 'mouseleave', function (e) {
        e.preventDefault();

        if (KTUtil.isInResponsiveRange('desktop') === false) {
          return;
        }

        if (insideTm) {
          clearTimeout(insideTm);
          insideTm = null;
        }

        outsideTm = setTimeout(function () {
          if (KTUtil.hasClass(body, 'kt-aside--minimize-hover') && KTUtil.isInResponsiveRange('desktop')) {
            KTUtil.removeClass(body, 'kt-aside--minimize-hover');
            KTUtil.addClass(body, 'kt-aside--minimize'); // Minimizing class

            KTUtil.addClass(body, 'kt-aside--minimizing');
            KTUtil.transitionEnd(body, function () {
              KTUtil.removeClass(body, 'kt-aside--minimizing');
            }); // Hover class

            asideMenu.scrollUpdate();
            asideMenu.scrollTop();
          }
        }, 100);
      });
    }
  }; // Aside menu


  var initAsideMenu = function initAsideMenu() {
    // Init aside menu
    var menu = KTUtil.get('kt_aside_menu');
    var menuDesktopMode = KTUtil.attr(menu, 'data-ktmenu-dropdown') === '1' ? 'dropdown' : 'accordion';
    var scroll;

    if (KTUtil.attr(menu, 'data-ktmenu-scroll') === '1') {
      scroll = {
        rememberPosition: true,
        // remember position on page reload
        height: function height() {
          // calculate available scrollable area height
          var height;

          if (KTUtil.isInResponsiveRange('desktop')) {
            height = parseInt(KTUtil.getViewPort().height) - parseInt(KTUtil.actualHeight('kt_aside_brand')) - parseInt(KTUtil.getByID('kt_aside_footer') ? KTUtil.actualHeight('kt_aside_footer') : 0);
          } else {
            height = parseInt(KTUtil.getViewPort().height) - parseInt(KTUtil.getByID('kt_aside_footer') ? KTUtil.actualHeight('kt_aside_footer') : 0);
          }

          height = height - (parseInt(KTUtil.css(menu, 'marginBottom')) + parseInt(KTUtil.css(menu, 'marginTop')));
          return height;
        }
      };
    }

    asideMenu = new KTMenu('kt_aside_menu', {
      // vertical scroll
      scroll: scroll,
      // submenu setup
      submenu: {
        desktop: menuDesktopMode,
        tablet: 'accordion',
        // menu set to accordion in tablet mode
        mobile: 'accordion' // menu set to accordion in mobile mode

      },
      //accordion setup
      accordion: {
        expandAll: false // allow having multiple expanded accordions in the menu

      }
    }); // sample set active menu
    // asideMenu.setActiveItem($('a[href="?page=custom/pages/pricing/pricing-1&demo=demo1"]').closest('.kt-menu__item')[0]);
  }; // Sidebar toggle


  var initAsideToggler = function initAsideToggler() {
    if (!KTUtil.get('kt_aside_toggler')) {
      return;
    }

    asideToggler = new KTToggle('kt_aside_toggler', {
      target: 'body',
      targetState: 'kt-aside--minimize',
      togglerState: 'kt-aside__brand-aside-toggler--active'
    });
    asideToggler.on('toggle', function (toggle) {
      KTUtil.addClass(body, 'kt-aside--minimizing');

      if (KTUtil.get('kt_page_portlet')) {
        pageStickyPortlet.updateSticky();
      }

      KTUtil.transitionEnd(body, function () {
        KTUtil.removeClass(body, 'kt-aside--minimizing');
      });
      headerMenu.pauseDropdownHover(800);
      asideMenu.pauseDropdownHover(800); // Remember state in cookie

      Cookies.set('kt_aside_toggle_state', toggle.getState()); // to set default minimized left aside use this cookie value in your
      // server side code and add "kt-brand--minimize kt-aside--minimize" classes to
      // the body tag in order to initialize the minimized left aside mode during page loading.
    });
    asideToggler.on('beforeToggle', function (toggle) {
      var body = KTUtil.get('body');

      if (KTUtil.hasClass(body, 'kt-aside--minimize') === false && KTUtil.hasClass(body, 'kt-aside--minimize-hover')) {
        KTUtil.removeClass(body, 'kt-aside--minimize-hover');
      }
    });
  }; // Aside secondary


  var _initAsideSecondary = function initAsideSecondary() {
    if (!KTUtil.get('kt_aside_secondary')) {
      return;
    }

    asideSecondaryToggler = new KTToggle('kt_aside_secondary_toggler', {
      target: 'body',
      targetState: 'kt-aside-secondary--expanded'
    });
    asideSecondaryToggler.on('toggle', function (toggle) {
      if (KTUtil.get('kt_page_portlet')) {
        pageStickyPortlet.updateSticky();
      }
    });
  }; // Scrolltop


  var initScrolltop = function initScrolltop() {
    var scrolltop = new KTScrolltop('kt_scrolltop', {
      offset: 300,
      speed: 600
    });
  }; // Init page sticky portlet


  var _initPageStickyPortlet = function initPageStickyPortlet() {
    return new KTPortlet('kt_page_portlet', {
      sticky: {
        offset: parseInt(KTUtil.css(KTUtil.get('kt_header'), 'height')),
        zIndex: 90,
        position: {
          top: function top() {
            var pos = 0;

            if (KTUtil.isInResponsiveRange('desktop')) {
              if (KTUtil.hasClass(body, 'kt-header--fixed')) {
                pos = pos + parseInt(KTUtil.css(KTUtil.get('kt_header'), 'height'));
              }

              if (KTUtil.hasClass(body, 'kt-subheader--fixed') && KTUtil.get('kt_subheader')) {
                pos = pos + parseInt(KTUtil.css(KTUtil.get('kt_subheader'), 'height'));
              }
            } else {
              if (KTUtil.hasClass(body, 'kt-header-mobile--fixed')) {
                pos = pos + parseInt(KTUtil.css(KTUtil.get('kt_header_mobile'), 'height'));
              }
            }

            return pos;
          },
          left: function left(portlet) {
            var porletEl = portlet.getSelf();
            return KTUtil.offset(porletEl).left;
          },
          right: function right(portlet) {
            var porletEl = portlet.getSelf();
            var portletWidth = parseInt(KTUtil.css(porletEl, 'width'));
            var bodyWidth = parseInt(KTUtil.css(KTUtil.get('body'), 'width'));
            var portletOffsetLeft = KTUtil.offset(porletEl).left;
            return bodyWidth - portletWidth - portletOffsetLeft;
          }
        }
      }
    });
  }; // Calculate content available full height


  var _getContentHeight = function getContentHeight() {
    var height;
    height = KTUtil.getViewPort().height;

    if (KTUtil.getByID('kt_header')) {
      height = height - KTUtil.actualHeight('kt_header');
    }

    if (KTUtil.getByID('kt_subheader')) {
      height = height - KTUtil.actualHeight('kt_subheader');
    }

    if (KTUtil.getByID('kt_footer')) {
      height = height - parseInt(KTUtil.css('kt_footer', 'height'));
    }

    if (KTUtil.getByID('kt_content')) {
      height = height - parseInt(KTUtil.css('kt_content', 'padding-top')) - parseInt(KTUtil.css('kt_content', 'padding-bottom'));
    }

    return height;
  };

  return {
    init: function init() {
      body = KTUtil.get('body');
      this.initHeader();
      this.initAside();
      this.initAsideSecondary();
      this.initPageStickyPortlet(); // Non functional links notice(can be removed in production)

      $('#kt_aside_menu, #kt_header_menu').on('click', '.kt-menu__link[href="#"]', function (e) {
        swal.fire("", "You have clicked on a non-functional dummy link!");
        e.preventDefault();
      });
    },
    initHeader: function initHeader() {
      _initHeader();

      initHeaderMenu();
      initHeaderTopbar();
      initScrolltop();
    },
    initAside: function initAside() {
      _initAside();

      initAsideMenu();
      initAsideToggler();
      this.onAsideToggle(function (e) {
        // Update sticky portlet
        if (pageStickyPortlet) {
          pageStickyPortlet.updateSticky();
        } // Reload datatable


        var datatables = $('.kt-datatable');

        if (datatables) {
          datatables.each(function () {
            $(this).KTDatatable('redraw');
          });
        }
      });
    },
    initAsideSecondary: function initAsideSecondary() {
      _initAsideSecondary();
    },
    initPageStickyPortlet: function initPageStickyPortlet() {
      if (!KTUtil.get('kt_page_portlet')) {
        return;
      }

      pageStickyPortlet = _initPageStickyPortlet();
      pageStickyPortlet.initSticky();
      KTUtil.addResizeHandler(function () {
        pageStickyPortlet.updateSticky();
      });

      _initPageStickyPortlet();
    },
    getAsideMenu: function getAsideMenu() {
      return asideMenu;
    },
    onAsideToggle: function onAsideToggle(handler) {
      if (typeof asideToggler.element !== 'undefined') {
        asideToggler.on('toggle', handler);
      }
    },
    getAsideToggler: function getAsideToggler() {
      return asideToggler;
    },
    openAsideSecondary: function openAsideSecondary() {
      asideSecondaryToggler.toggleOn();
    },
    closeAsideSecondary: function closeAsideSecondary() {
      asideSecondaryToggler.toggleOff();
    },
    getAsideSecondaryToggler: function getAsideSecondaryToggler() {
      return asideSecondaryToggler;
    },
    onAsideSecondaryToggle: function onAsideSecondaryToggle(handler) {
      if (asideSecondaryToggler) {
        asideSecondaryToggler.on('toggle', handler);
      }
    },
    closeMobileAsideMenuOffcanvas: function closeMobileAsideMenuOffcanvas() {
      if (KTUtil.isMobileDevice()) {
        asideMenuOffcanvas.hide();
      }
    },
    closeMobileHeaderMenuOffcanvas: function closeMobileHeaderMenuOffcanvas() {
      if (KTUtil.isMobileDevice()) {
        headerMenuOffcanvas.hide();
      }
    },
    getContentHeight: function getContentHeight() {
      return _getContentHeight();
    }
  };
}(); // webpack support


if (true) {
  module.exports = KTLayout;
}

KTUtil.ready(function () {
  KTLayout.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/offcanvas-panel.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/layout/offcanvas-panel.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTOffcanvasPanel = function () {
  var notificationPanel;
  var quickActionsPanel;
  var profilePanel;
  var searchPanel;

  var initNotifications = function initNotifications() {
    var head = KTUtil.find(notificationPanel, '.kt-offcanvas-panel__head');
    var body = KTUtil.find(notificationPanel, '.kt-offcanvas-panel__body');
    var offcanvas = new KTOffcanvas(notificationPanel, {
      overlay: true,
      baseClass: 'kt-offcanvas-panel',
      closeBy: 'kt_offcanvas_toolbar_notifications_close',
      toggleBy: 'kt_offcanvas_toolbar_notifications_toggler_btn'
    });
    KTUtil.scrollInit(body, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(notificationPanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(notificationPanel, 'paddingBottom'));
        return height;
      }
    });
  };

  var initQucikActions = function initQucikActions() {
    var head = KTUtil.find(quickActionsPanel, '.kt-offcanvas-panel__head');
    var body = KTUtil.find(quickActionsPanel, '.kt-offcanvas-panel__body');
    var offcanvas = new KTOffcanvas(quickActionsPanel, {
      overlay: true,
      baseClass: 'kt-offcanvas-panel',
      closeBy: 'kt_offcanvas_toolbar_quick_actions_close',
      toggleBy: 'kt_offcanvas_toolbar_quick_actions_toggler_btn'
    });
    KTUtil.scrollInit(body, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(quickActionsPanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(quickActionsPanel, 'paddingBottom'));
        return height;
      }
    });
  };

  var initProfile = function initProfile() {
    var head = KTUtil.find(profilePanel, '.kt-offcanvas-panel__head');
    var body = KTUtil.find(profilePanel, '.kt-offcanvas-panel__body');
    var offcanvas = new KTOffcanvas(profilePanel, {
      overlay: true,
      baseClass: 'kt-offcanvas-panel',
      closeBy: 'kt_offcanvas_toolbar_profile_close',
      toggleBy: 'kt_offcanvas_toolbar_profile_toggler_btn'
    });
    KTUtil.scrollInit(body, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(profilePanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(profilePanel, 'paddingBottom'));
        return height;
      }
    });
  };

  var initSearch = function initSearch() {
    var head = KTUtil.find(searchPanel, '.kt-offcanvas-panel__head');
    var body = KTUtil.find(searchPanel, '.kt-offcanvas-panel__body');
    var search = KTUtil.get('kt_quick_search_offcanvas');
    var form = KTUtil.find(search, '.kt-quick-search__form');
    var wrapper = KTUtil.find(search, '.kt-quick-search__wrapper');
    var offcanvas = new KTOffcanvas(searchPanel, {
      overlay: true,
      baseClass: 'kt-offcanvas-panel',
      closeBy: 'kt_offcanvas_toolbar_search_close',
      toggleBy: 'kt_offcanvas_toolbar_search_toggler_btn'
    });
    KTUtil.scrollInit(wrapper, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);
        height = height - parseInt(KTUtil.actualHeight(form));
        height = height - parseInt(KTUtil.css(form, 'marginBottom'));

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(searchPanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(searchPanel, 'paddingBottom'));
        return height;
      }
    });
  };

  return {
    init: function init() {
      notificationPanel = KTUtil.get('kt_offcanvas_toolbar_notifications');
      quickActionsPanel = KTUtil.get('kt_offcanvas_toolbar_quick_actions');
      profilePanel = KTUtil.get('kt_offcanvas_toolbar_profile');
      searchPanel = KTUtil.get('kt_offcanvas_toolbar_search');
      initNotifications();
      initQucikActions();
      initProfile();
      initSearch();
    }
  };
}(); // Init on page load completed


KTUtil.ready(function () {
  KTOffcanvasPanel.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/quick-panel.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/global/layout/quick-panel.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTQuickPanel = function () {
  var panel;
  var notificationPanel;
  var logsPanel;
  var settingsPanel;

  var getContentHeight = function getContentHeight() {
    var height;
    var nav = KTUtil.find(panel, '.kt-quick-panel__nav');
    var content = KTUtil.find(panel, '.kt-quick-panel__content');
    height = parseInt(KTUtil.getViewPort().height) - parseInt(KTUtil.actualHeight(nav)) - 2 * parseInt(KTUtil.css(nav, 'padding-top')) - 10;
    return height;
  };

  var initOffcanvas = function initOffcanvas() {
    new KTOffcanvas(panel, {
      overlay: true,
      baseClass: 'kt-quick-panel',
      closeBy: 'kt_quick_panel_close_btn',
      toggleBy: 'kt_quick_panel_toggler_btn'
    });
  };

  var initNotifications = function initNotifications() {
    KTUtil.scrollInit(notificationPanel, {
      mobileNativeScroll: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return getContentHeight();
      }
    });
  };

  var initLogs = function initLogs() {
    KTUtil.scrollInit(logsPanel, {
      mobileNativeScroll: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return getContentHeight();
      }
    });
  };

  var initSettings = function initSettings() {
    KTUtil.scrollInit(settingsPanel, {
      mobileNativeScroll: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return getContentHeight();
      }
    });
  };

  var updatePerfectScrollbars = function updatePerfectScrollbars() {
    $(panel).find('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
      KTUtil.scrollUpdate(notificationPanel);
      KTUtil.scrollUpdate(logsPanel);
      KTUtil.scrollUpdate(settingsPanel);
    });
  };

  return {
    init: function init() {
      panel = KTUtil.get('kt_quick_panel');
      notificationPanel = KTUtil.get('kt_quick_panel_tab_notifications');
      logsPanel = KTUtil.get('kt_quick_panel_tab_logs');
      settingsPanel = KTUtil.get('kt_quick_panel_tab_settings');
      initOffcanvas();
      initNotifications();
      initLogs();
      initSettings();
      updatePerfectScrollbars();
    }
  };
}();

$(document).ready(function () {
  KTQuickPanel.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/quick-search.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/global/layout/quick-search.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTQuickSearch = function KTQuickSearch() {
  var target;
  var form;
  var input;
  var closeIcon;
  var resultWrapper;
  var resultDropdown;
  var resultDropdownToggle;
  var inputGroup;
  var query = '';
  var hasResult = false;
  var timeout = false;
  var isProcessing = false;
  var requestTimeout = 200; // ajax request fire timeout in milliseconds

  var spinnerClass = 'kt-spinner kt-spinner--input kt-spinner--sm kt-spinner--brand kt-spinner--right';
  var resultClass = 'kt-quick-search--has-result';
  var minLength = 2;

  var showProgress = function showProgress() {
    isProcessing = true;
    KTUtil.addClass(inputGroup, spinnerClass);

    if (closeIcon) {
      KTUtil.hide(closeIcon);
    }
  };

  var hideProgress = function hideProgress() {
    isProcessing = false;
    KTUtil.removeClass(inputGroup, spinnerClass);

    if (closeIcon) {
      if (input.value.length < minLength) {
        KTUtil.hide(closeIcon);
      } else {
        KTUtil.show(closeIcon, 'flex');
      }
    }
  };

  var showDropdown = function showDropdown() {
    if (resultDropdownToggle && !KTUtil.hasClass(resultDropdown, 'show')) {
      $(resultDropdownToggle).dropdown('toggle');
      $(resultDropdownToggle).dropdown('update');
    }
  };

  var hideDropdown = function hideDropdown() {
    if (resultDropdownToggle && KTUtil.hasClass(resultDropdown, 'show')) {
      $(resultDropdownToggle).dropdown('toggle');
    }
  };

  var processSearch = function processSearch() {
    if (hasResult && query === input.value) {
      hideProgress();
      KTUtil.addClass(target, resultClass);
      showDropdown();
      KTUtil.scrollUpdate(resultWrapper);
      return;
    }

    query = input.value;
    KTUtil.removeClass(target, resultClass);
    showProgress();
    hideDropdown();
    setTimeout(function () {
      $.ajax({
        url: 'https://keenthemes.com/metronic/tools/preview/api/quick_search.php',
        data: {
          query: query
        },
        dataType: 'html',
        success: function success(res) {
          hasResult = true;
          hideProgress();
          KTUtil.addClass(target, resultClass);
          KTUtil.setHTML(resultWrapper, res);
          showDropdown();
          KTUtil.scrollUpdate(resultWrapper);
        },
        error: function error(res) {
          hasResult = false;
          hideProgress();
          KTUtil.addClass(target, resultClass);
          KTUtil.setHTML(resultWrapper, '<span class="kt-quick-search__message">Connection error. Pleae try again later.</div>');
          showDropdown();
          KTUtil.scrollUpdate(resultWrapper);
        }
      });
    }, 1000);
  };

  var handleCancel = function handleCancel(e) {
    input.value = '';
    query = '';
    hasResult = false;
    KTUtil.hide(closeIcon);
    KTUtil.removeClass(target, resultClass);
    hideDropdown();
  };

  var handleSearch = function handleSearch() {
    if (input.value.length < minLength) {
      hideProgress();
      hideDropdown();
      return;
    }

    if (isProcessing == true) {
      return;
    }

    if (timeout) {
      clearTimeout(timeout);
    }

    timeout = setTimeout(function () {
      processSearch();
    }, requestTimeout);
  };

  return {
    init: function init(element) {
      // Init
      target = element;
      form = KTUtil.find(target, '.kt-quick-search__form');
      input = KTUtil.find(target, '.kt-quick-search__input');
      closeIcon = KTUtil.find(target, '.kt-quick-search__close');
      resultWrapper = KTUtil.find(target, '.kt-quick-search__wrapper');
      resultDropdown = KTUtil.find(target, '.dropdown-menu');
      resultDropdownToggle = KTUtil.find(target, '[data-toggle="dropdown"]');
      inputGroup = KTUtil.find(target, '.input-group'); // Attach input keyup handler

      KTUtil.addEvent(input, 'keyup', handleSearch);
      KTUtil.addEvent(input, 'focus', handleSearch); // Prevent enter click

      form.onkeypress = function (e) {
        var key = e.charCode || e.keyCode || 0;

        if (key == 13) {
          e.preventDefault();
        }
      };

      KTUtil.addEvent(closeIcon, 'click', handleCancel);
    }
  };
};

var KTQuickSearchInline = KTQuickSearch;
var KTQuickSearchOffcanvas = KTQuickSearch; // Init on page load completed

KTUtil.ready(function () {
  if (KTUtil.get('kt_quick_search_dropdown')) {
    KTQuickSearch().init(KTUtil.get('kt_quick_search_dropdown'));
  }

  if (KTUtil.get('kt_quick_search_inline')) {
    KTQuickSearchInline().init(KTUtil.get('kt_quick_search_inline'));
  }

  if (KTUtil.get('kt_quick_search_offcanvas')) {
    KTQuickSearchOffcanvas().init(KTUtil.get('kt_quick_search_offcanvas'));
  }
});

/***/ }),

/***/ "./resources/assets/js/webpack/scripts.js":
/*!************************************************!*\
  !*** ./resources/assets/js/webpack/scripts.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Define the output of this file. The output of CSS and JS file will be auto detected.
 *
 * @output js/scripts.bundle
 */
// Core Plugins

window.KTAppOptions = {
  "colors": {
    "state": {
      "brand": "#2c77f4",
      "light": "#ffffff",
      "dark": "#282a3c",
      "primary": "#5867dd",
      "success": "#34bfa3",
      "info": "#36a3f7",
      "warning": "#ffb822",
      "danger": "#fd3995"
    },
    "base": {
      "label": ["#c5cbe3", "#a1a8c3", "#3d4465", "#3e4466"],
      "shape": ["#f0f3ff", "#d9dffa", "#afb4d4", "#646c9a"]
    }
  }
};
window.KTUtil = __webpack_require__(/*! ../global/components/base/util */ "./resources/assets/js/global/components/base/util.js");
window.KTApp = __webpack_require__(/*! ../global/components/base/app */ "./resources/assets/js/global/components/base/app.js");
window.KTAvatar = __webpack_require__(/*! ../global/components/base/avatar */ "./resources/assets/js/global/components/base/avatar.js");
window.KTDialog = __webpack_require__(/*! ../global/components/base/dialog */ "./resources/assets/js/global/components/base/dialog.js");
window.KTHeader = __webpack_require__(/*! ../global/components/base/header */ "./resources/assets/js/global/components/base/header.js");
window.KTMenu = __webpack_require__(/*! ../global/components/base/menu */ "./resources/assets/js/global/components/base/menu.js");
window.KTOffcanvas = __webpack_require__(/*! ../global/components/base/offcanvas */ "./resources/assets/js/global/components/base/offcanvas.js");
window.KTPortlet = __webpack_require__(/*! ../global/components/base/portlet */ "./resources/assets/js/global/components/base/portlet.js");
window.KTScrolltop = __webpack_require__(/*! ../global/components/base/scrolltop */ "./resources/assets/js/global/components/base/scrolltop.js");
window.KTToggle = __webpack_require__(/*! ../global/components/base/toggle */ "./resources/assets/js/global/components/base/toggle.js");
window.KTWizard = __webpack_require__(/*! ../global/components/base/wizard */ "./resources/assets/js/global/components/base/wizard.js");

__webpack_require__(/*! ../global/components/base/datatable/core.datatable */ "./resources/assets/js/global/components/base/datatable/core.datatable.js");

__webpack_require__(/*! ../global/components/base/datatable/datatable.checkbox */ "./resources/assets/js/global/components/base/datatable/datatable.checkbox.js");

__webpack_require__(/*! ../global/components/base/datatable/datatable.rtl */ "./resources/assets/js/global/components/base/datatable/datatable.rtl.js"); // Layout Scripts


window.KTLayout = __webpack_require__(/*! ../global/layout/layout */ "./resources/assets/js/global/layout/layout.js");
window.KTChat = __webpack_require__(/*! ../global/layout/chat */ "./resources/assets/js/global/layout/chat.js");

__webpack_require__(/*! ../global/layout/demo-panel */ "./resources/assets/js/global/layout/demo-panel.js");

__webpack_require__(/*! ../global/layout/offcanvas-panel */ "./resources/assets/js/global/layout/offcanvas-panel.js");

__webpack_require__(/*! ../global/layout/quick-panel */ "./resources/assets/js/global/layout/quick-panel.js");

__webpack_require__(/*! ../global/layout/quick-search */ "./resources/assets/js/global/layout/quick-search.js");

/***/ }),

/***/ "./resources/assets/js/webpack/vendors/global.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/webpack/vendors/global.js ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tooltip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tooltip.js */ "./node_modules/tooltip.js/dist/esm/tooltip.js");
/* harmony import */ var sweetalert2_dist_sweetalert2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sweetalert2/dist/sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.js");
/* harmony import */ var sweetalert2_dist_sweetalert2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sweetalert2_dist_sweetalert2__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var dual_listbox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dual-listbox */ "./node_modules/dual-listbox/dist/dual-listbox.js");
/* harmony import */ var dual_listbox__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dual_listbox__WEBPACK_IMPORTED_MODULE_2__);

/**
 * Define the output of this file. The output of CSS and JS file will be auto detected.
 *
 * @output plugins/global/plugins.bundle
 */
//** Begin: Global mandatory plugins

window.jQuery = window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

__webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");

__webpack_require__(/*! morris.js */ "./node_modules/morris.js/morris.js");

__webpack_require__(/*! block-ui */ "./node_modules/block-ui/jquery.blockUI.js");

__webpack_require__(/*! autosize */ "./node_modules/autosize/dist/autosize.js");

__webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js");

window.moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
window.Sticky = __webpack_require__(/*! sticky-js */ "./node_modules/sticky-js/index.js");
window.Chart = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
window.Raphael = __webpack_require__(/*! raphael */ "./node_modules/raphael/raphael.min.js");
window.Cookies = __webpack_require__(/*! js-cookie */ "./node_modules/js-cookie/src/js.cookie.js");
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

__webpack_require__(/*! jquery-form */ "./node_modules/jquery-form/dist/jquery.form.min.js"); // Toastr


__webpack_require__(/*! toastr/build/toastr.css */ "./node_modules/toastr/build/toastr.css");

window.toastr = __webpack_require__(/*! toastr */ "./node_modules/toastr/toastr.js"); // Tooltips


window.Tooltip = tooltip_js__WEBPACK_IMPORTED_MODULE_0__["default"]; // Perfect-Scrollbar

__webpack_require__(/*! perfect-scrollbar/css/perfect-scrollbar.css */ "./node_modules/perfect-scrollbar/css/perfect-scrollbar.css");

window.PerfectScrollbar = __webpack_require__(/*! perfect-scrollbar/dist/perfect-scrollbar */ "./node_modules/perfect-scrollbar/dist/perfect-scrollbar.js"); //** End: Globally mandatory plugins
//** Begin: Global optional plugins
// Datatables

__webpack_require__(/*! datatables.net-bs4 */ "./node_modules/datatables.net-bs4/js/dataTables.bootstrap4.js");

__webpack_require__(/*! datatables.net-autofill */ "./node_modules/datatables.net-autofill/js/dataTables.autoFill.js");

__webpack_require__(/*! datatables.net-autofill-bs4 */ "./node_modules/datatables.net-autofill-bs4/js/autoFill.bootstrap4.js");

__webpack_require__(/*! datatables.net-buttons-bs4 */ "./node_modules/datatables.net-buttons-bs4/js/buttons.bootstrap4.js");

__webpack_require__(/*! datatables.net-buttons/js/buttons.print.js */ "./node_modules/datatables.net-buttons/js/buttons.print.js");

__webpack_require__(/*! datatables.net-buttons/js/buttons.html5.js */ "./node_modules/datatables.net-buttons/js/buttons.html5.js");

__webpack_require__(/*! datatables.net-buttons/js/buttons.flash.js */ "./node_modules/datatables.net-buttons/js/buttons.flash.js");

__webpack_require__(/*! datatables.net-buttons/js/buttons.colVis.js */ "./node_modules/datatables.net-buttons/js/buttons.colVis.js");

__webpack_require__(/*! datatables.net-colreorder-bs4 */ "./node_modules/datatables.net-colreorder-bs4/js/colReorder.bootstrap4.js");

__webpack_require__(/*! datatables.net-fixedcolumns-bs4 */ "./node_modules/datatables.net-fixedcolumns-bs4/js/fixedColumns.bootstrap4.js");

__webpack_require__(/*! datatables.net-fixedheader-bs4 */ "./node_modules/datatables.net-fixedheader-bs4/js/fixedHeader.bootstrap4.js");

__webpack_require__(/*! datatables.net-keytable-bs4 */ "./node_modules/datatables.net-keytable-bs4/js/keyTable.bootstrap4.js");

__webpack_require__(/*! datatables.net-responsive-bs4 */ "./node_modules/datatables.net-responsive-bs4/js/responsive.bootstrap4.js");

__webpack_require__(/*! datatables.net-rowgroup-bs4 */ "./node_modules/datatables.net-rowgroup-bs4/js/rowGroup.bootstrap4.js");

__webpack_require__(/*! datatables.net-rowreorder-bs4 */ "./node_modules/datatables.net-rowreorder-bs4/js/rowReorder.bootstrap4.js");

__webpack_require__(/*! datatables.net-scroller-bs4 */ "./node_modules/datatables.net-scroller-bs4/js/scroller.bootstrap4.js");

__webpack_require__(/*! datatables.net-select-bs4 */ "./node_modules/datatables.net-select-bs4/js/select.bootstrap4.js");

__webpack_require__(/*! jszip/dist/jszip.min.js */ "./node_modules/jszip/dist/jszip.min.js");

__webpack_require__(/*! pdfmake/build/pdfmake.min.js */ "./node_modules/pdfmake/build/pdfmake.min.js");

__webpack_require__(/*! pdfmake/build/vfs_fonts.js */ "./node_modules/pdfmake/build/vfs_fonts.js");

window.JSZip = __webpack_require__(/*! jszip */ "./node_modules/jszip/lib/index.js"); // Daterangepicker

__webpack_require__(/*! bootstrap-daterangepicker/daterangepicker.css */ "./node_modules/bootstrap-daterangepicker/daterangepicker.css");

__webpack_require__(/*! bootstrap-daterangepicker */ "./node_modules/bootstrap-daterangepicker/daterangepicker.js"); // Bootstrap-Select


__webpack_require__(/*! bootstrap-select/dist/css/bootstrap-select.css */ "./node_modules/bootstrap-select/dist/css/bootstrap-select.css");

__webpack_require__(/*! bootstrap-select */ "./node_modules/bootstrap-select/dist/js/bootstrap-select.js"); // Bootstrap-Session-Timeout


__webpack_require__(/*! ../../../../assets/plugins/bootstrap-session-timeout/dist/bootstrap-session-timeout.js */ "./resources/assets/plugins/bootstrap-session-timeout/dist/bootstrap-session-timeout.js"); // Bootstrap-switch


__webpack_require__(/*! bootstrap-switch/dist/css/bootstrap3/bootstrap-switch.css */ "./node_modules/bootstrap-switch/dist/css/bootstrap3/bootstrap-switch.css");

__webpack_require__(/*! bootstrap-switch */ "./node_modules/bootstrap-switch/dist/js/bootstrap-switch.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/bootstrap-switch.init.js */ "./resources/assets/js/global/integration/plugins/bootstrap-switch.init.js"); // Sweetalert2


__webpack_require__(/*! sweetalert2/dist/sweetalert2.css */ "./node_modules/sweetalert2/dist/sweetalert2.css"); // import swal from "sweetalert2/dist/sweetalert2";



window.Swal = sweetalert2_dist_sweetalert2__WEBPACK_IMPORTED_MODULE_1___default.a;

__webpack_require__(/*! es6-promise-polyfill/promise.min.js */ "./node_modules/es6-promise-polyfill/promise.min.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/sweetalert2.init */ "./resources/assets/js/global/integration/plugins/sweetalert2.init.js"); // Bootstrap-notify


__webpack_require__(/*! bootstrap-notify */ "./node_modules/bootstrap-notify/bootstrap-notify.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/bootstrap-notify.init.js */ "./resources/assets/js/global/integration/plugins/bootstrap-notify.init.js"); // Bootstrap-datepicker


__webpack_require__(/*! bootstrap-datepicker/dist/css/bootstrap-datepicker3.css */ "./node_modules/bootstrap-datepicker/dist/css/bootstrap-datepicker3.css");

__webpack_require__(/*! bootstrap-datepicker */ "./node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/bootstrap-datepicker.init */ "./resources/assets/js/global/integration/plugins/bootstrap-datepicker.init.js"); // Bootstrap-datetime-picker


__webpack_require__(/*! bootstrap-datetime-picker/css/bootstrap-datetimepicker.css */ "./node_modules/bootstrap-datetime-picker/css/bootstrap-datetimepicker.css");

__webpack_require__(/*! bootstrap-datetime-picker */ "./node_modules/bootstrap-datetime-picker/js/bootstrap-datetimepicker.js"); // Select2


__webpack_require__(/*! select2/dist/css/select2.css */ "./node_modules/select2/dist/css/select2.css");

__webpack_require__(/*! select2 */ "./node_modules/select2/dist/js/select2.js"); // Bootstrap-timepicker


__webpack_require__(/*! bootstrap-timepicker/css/bootstrap-timepicker.css */ "./node_modules/bootstrap-timepicker/css/bootstrap-timepicker.css");

__webpack_require__(/*! bootstrap-timepicker */ "./node_modules/bootstrap-timepicker/js/bootstrap-timepicker.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/bootstrap-timepicker.init */ "./resources/assets/js/global/integration/plugins/bootstrap-timepicker.init.js"); // Tagify


__webpack_require__(/*! @yaireo/tagify/dist/tagify.css */ "./node_modules/@yaireo/tagify/dist/tagify.css");

window.Tagify = __webpack_require__(/*! @yaireo/tagify/dist/tagify */ "./node_modules/@yaireo/tagify/dist/tagify.js");

__webpack_require__(/*! @yaireo/tagify/dist/tagify.polyfills.min */ "./node_modules/@yaireo/tagify/dist/tagify.polyfills.min.js"); // Typeahead


window.Bloodhound = __webpack_require__(/*! typeahead.js */ "./node_modules/typeahead.js/dist/typeahead.bundle.js");
window.Handlebars = __webpack_require__(/*! handlebars/dist/handlebars.js */ "./node_modules/handlebars/dist/handlebars.js"); // Dropzone

__webpack_require__(/*! dropzone/dist/dropzone.css */ "./node_modules/dropzone/dist/dropzone.css");

window.Dropzone = __webpack_require__(/*! dropzone */ "./node_modules/dropzone/dist/dropzone.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/dropzone.init */ "./resources/assets/js/global/integration/plugins/dropzone.init.js"); // ClipboardJS


window.ClipboardJS = __webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js"); // Autosize

window.autosize = __webpack_require__(/*! autosize */ "./node_modules/autosize/dist/autosize.js"); // Summernote

__webpack_require__(/*! summernote/dist/summernote.css */ "./node_modules/summernote/dist/summernote.css");

__webpack_require__(/*! summernote */ "./node_modules/summernote/dist/summernote.js"); // Quill


__webpack_require__(/*! quill/dist/quill.snow.css */ "./node_modules/quill/dist/quill.snow.css");

window.Quill = __webpack_require__(/*! quill */ "./node_modules/quill/dist/quill.js"); // Inputmask

__webpack_require__(/*! inputmask/dist/jquery.inputmask */ "./node_modules/inputmask/dist/jquery.inputmask.js");

__webpack_require__(/*! inputmask/lib/extensions/inputmask.date.extensions */ "./node_modules/inputmask/lib/extensions/inputmask.date.extensions.js");

__webpack_require__(/*! inputmask/lib/extensions/inputmask.numeric.extensions */ "./node_modules/inputmask/lib/extensions/inputmask.numeric.extensions.js"); // jQuery.repeater


__webpack_require__(/*! jquery.repeater */ "./node_modules/jquery.repeater/jquery.repeater.js"); // Wnumb


window.wNumb = __webpack_require__(/*! wnumb */ "./node_modules/wnumb/wNumb.js"); // jQuery-Validation

__webpack_require__(/*! jquery-validation */ "./node_modules/jquery-validation/dist/jquery.validate.js");

__webpack_require__(/*! jquery-validation/dist/additional-methods.js */ "./node_modules/jquery-validation/dist/additional-methods.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/jquery-validation.init */ "./resources/assets/js/global/integration/plugins/jquery-validation.init.js"); // Bootstrap-Multiselectsplitter


__webpack_require__(/*! ../../../../assets/plugins/bootstrap-multiselectsplitter/bootstrap-multiselectsplitter.min.js */ "./resources/assets/plugins/bootstrap-multiselectsplitter/bootstrap-multiselectsplitter.min.js"); // Bootstrap-Maxlength


__webpack_require__(/*! bootstrap-maxlength */ "./node_modules/bootstrap-maxlength/bootstrap-maxlength.js"); // Bootstrap-Touchspin


__webpack_require__(/*! bootstrap-touchspin/dist/jquery.bootstrap-touchspin.css */ "./node_modules/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.css");

__webpack_require__(/*! bootstrap-touchspin */ "./node_modules/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.js"); // Bootstrap-Markdown


__webpack_require__(/*! bootstrap-markdown/css/bootstrap-markdown.min.css */ "./node_modules/bootstrap-markdown/css/bootstrap-markdown.min.css");

__webpack_require__(/*! bootstrap-markdown/js/bootstrap-markdown */ "./node_modules/bootstrap-markdown/js/bootstrap-markdown.js");

__webpack_require__(/*! ../../../../assets/js/global/integration/plugins/bootstrap-markdown.init */ "./resources/assets/js/global/integration/plugins/bootstrap-markdown.init.js"); // Animate.css


__webpack_require__(/*! animate.css/animate.css */ "./node_modules/animate.css/animate.css"); // Dual-Listbox



window.DualListbox = dual_listbox__WEBPACK_IMPORTED_MODULE_2___default.a;

__webpack_require__(/*! dual-listbox/dist/dual-listbox.css */ "./node_modules/dual-listbox/dist/dual-listbox.css"); // Fonts Icons


__webpack_require__(/*! ../../../../assets/plugins/line-awesome/css/line-awesome.css */ "./resources/assets/plugins/line-awesome/css/line-awesome.css");

__webpack_require__(/*! ../../../../assets/plugins/flaticon/flaticon.css */ "./resources/assets/plugins/flaticon/flaticon.css");

__webpack_require__(/*! ../../../../assets/plugins/flaticon2/flaticon.css */ "./resources/assets/plugins/flaticon2/flaticon.css");

__webpack_require__(/*! @fortawesome/fontawesome-free/css/all.min.css */ "./node_modules/@fortawesome/fontawesome-free/css/all.min.css");

__webpack_require__(/*! socicon */ "./node_modules/socicon/css/socicon.css"); //** End: Global optional plugins

/***/ }),

/***/ "./resources/assets/plugins/bootstrap-multiselectsplitter/bootstrap-multiselectsplitter.min.js":
/*!*****************************************************************************************************!*\
  !*** ./resources/assets/plugins/bootstrap-multiselectsplitter/bootstrap-multiselectsplitter.min.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

+function (a) {
  "use strict";

  function c(c) {
    return this.each(function () {
      var d = a(this),
          e = d.data("multiselectsplitter"),
          f = "object" == _typeof(c) && c;
      (e || "destroy" != c) && (e || d.data("multiselectsplitter", e = new b(this, f)), "string" == typeof c && e[c]());
    });
  }

  var b = function b(a, _b) {
    this.init("multiselectsplitter", a, _b);
  };

  b.DEFAULTS = {
    selectSize: null,
    maxSelectSize: null,
    clearOnFirstChange: !1,
    onlySameGroup: !1,
    groupCounter: !1,
    maximumSelected: null,
    afterInitialize: null,
    maximumAlert: function maximumAlert(a) {
      alert("Only " + a + " values can be selected");
    },
    createFirstSelect: function createFirstSelect(a, b) {
      return "<option>" + a + "</option>";
    },
    createSecondSelect: function createSecondSelect(a, b) {
      return "<option>" + a + "</option>";
    },
    template: '<div class="row" data-multiselectsplitter-wrapper-selector><div class="col-xs-6 col-sm-6"><select class="form-control" data-multiselectsplitter-firstselect-selector></select></div> <!-- Add the extra clearfix for only the required viewport --><div class="col-xs-6 col-sm-6"><select class="form-control" data-multiselectsplitter-secondselect-selector></select></div></div>'
  }, b.prototype.init = function (c, d, e) {
    var f = this;
    f.type = c, f.last$ElementSelected = [], f.initialized = !1, f.$element = a(d), f.$element.hide(), f.options = a.extend({}, b.DEFAULTS, e), f.$element.after(f.options.template), f.$wrapper = f.$element.next("div[data-multiselectsplitter-wrapper-selector]"), f.$firstSelect = a("select[data-multiselectsplitter-firstselect-selector]", f.$wrapper), f.$secondSelect = a("select[data-multiselectsplitter-secondselect-selector]", f.$wrapper);
    var g = 0,
        h = 0;

    if (0 != f.$element.find("optgroup").length) {
      f.$element.find("optgroup").each(function () {
        var b = a(this).attr("label"),
            c = a(f.options.createFirstSelect(b, f.$element));
        c.val(b), c.attr("data-current-label", c.text()), f.$firstSelect.append(c);
        var d = a(this).find("option").length;
        d > h && (h = d), g++;
      });
      var i = Math.max(g, h);
      i = Math.min(i, 10), f.options.selectSize ? i = f.options.selectSize : f.options.maxSelectSize && (i = Math.min(i, f.options.maxSelectSize)), f.$firstSelect.attr("size", i), f.$secondSelect.attr("size", i), f.$element.attr("multiple") && f.$secondSelect.attr("multiple", "multiple"), f.$element.is(":disabled") && f.disable(), f.$firstSelect.on("change", a.proxy(f.updateParentCategory, f)), f.$secondSelect.on("click change", a.proxy(f.updateChildCategory, f)), f.update = function () {
        if (!(f.$element.find("option").length < 1)) {
          var b,
              a = f.$element.find("option:selected:first");
          b = a.length ? a.parent().attr("label") : f.$element.find("option:first").parent().attr("label"), f.$firstSelect.find('option[value="' + b + '"]').prop("selected", !0), f.$firstSelect.trigger("change");
        }
      }, f.update(), f.initialized = !0, f.options.afterInitialize && f.options.afterInitialize(f.$firstSelect, f.$secondSelect);
    }
  }, b.prototype.disable = function () {
    this.$secondSelect.prop("disabled", !0), this.$firstSelect.prop("disabled", !0);
  }, b.prototype.enable = function () {
    this.$secondSelect.prop("disabled", !1), this.$firstSelect.prop("disabled", !1);
  }, b.prototype.createSecondSelect = function () {
    var b = this;
    b.$secondSelect.empty(), a.each(b.$element.find('optgroup[label="' + b.$firstSelect.val() + '"] option'), function (c, d) {
      var e = a(this).val(),
          f = a(this).text(),
          g = a(b.options.createSecondSelect(f, b.$firstSelect));
      g.val(e), a.each(b.$element.find("option:selected"), function (b, c) {
        a(c).val() == e && g.prop("selected", !0);
      }), b.$secondSelect.append(g);
    });
  }, b.prototype.updateParentCategory = function () {
    var a = this;
    a.last$ElementSelected = a.$element.find("option:selected"), a.options.clearOnFirstChange && a.initialized && a.$element.find("option:selected").prop("selected", !1), a.createSecondSelect(), a.checkSelected(), a.updateCounter();
  }, b.prototype.updateCounter = function () {
    var b = this;
    b.$element.attr("multiple") && b.options.groupCounter && a.each(b.$firstSelect.find("option"), function (c, d) {
      var e = a(d).val(),
          f = a(d).data("currentLabel"),
          g = b.$element.find('optgroup[label="' + e + '"] option:selected').length;
      g > 0 && (f += " (" + g + ")"), a(d).html(f);
    });
  }, b.prototype.checkSelected = function () {
    var b = this;

    if (b.$element.attr("multiple") && b.options.maximumSelected) {
      var c = 0;

      if (c = "function" == typeof b.options.maximumSelected ? b.options.maximumSelected(b.$firstSelect, b.$secondSelect) : b.options.maximumSelected, !(c < 1)) {
        var d = b.$element.find("option:selected");

        if (d.length > c) {
          b.$firstSelect.find("option:selected").prop("selected", !1), b.$secondSelect.find("option:selected").prop("selected", !1), b.initialized ? (b.$element.find("option:selected").prop("selected", !1), b.last$ElementSelected.prop("selected", !0)) : a.each(b.$element.find("option:selected"), function (b, d) {
            b > c - 1 && a(d).prop("selected", !1);
          });
          var e = b.last$ElementSelected.first().parent().attr("label");
          b.$firstSelect.find('option[value="' + e + '"]').prop("selected", !0), b.createSecondSelect(), b.options.maximumAlert(c);
        }
      }
    }
  }, b.prototype.basicUpdateChildCategory = function (b, c) {
    var d = this;
    d.last$ElementSelected = d.$element.find("option:selected");
    var e = d.$secondSelect.val();
    a.isArray(e) || (e = [e]);
    var f = d.$firstSelect.val(),
        g = !1;
    d.$element.attr("multiple") ? d.options.onlySameGroup ? a.each(d.$element.find("option:selected"), function (b, c) {
      if (a(c).parent().attr("label") != f) return g = !0, !1;
    }) : c || (g = !0) : g = !0, g ? d.$element.find("option:selected").prop("selected", !1) : a.each(d.$element.find("option:selected"), function (b, c) {
      f == a(c).parent().attr("label") && a.inArray(a(c).val(), e) == -1 && a(c).prop("selected", !1);
    }), a.each(e, function (a, b) {
      d.$element.find('option[value="' + b + '"]').prop("selected", !0);
    }), d.checkSelected(), d.updateCounter(), d.$element.trigger("change");
  }, b.prototype.updateChildCategory = function (b) {
    "change" == b.type ? this.timeOut = setTimeout(a.proxy(function () {
      this.basicUpdateChildCategory(b, b.ctrlKey);
    }, this), 10) : "click" == b.type && (clearTimeout(this.timeOut), this.basicUpdateChildCategory(b, b.ctrlKey));
  }, b.prototype.destroy = function () {
    this.$wrapper.remove(), this.$element.removeData(this.type), this.$element.show();
  }, a.fn.multiselectsplitter = c, a.fn.multiselectsplitter.Constructor = b, a.fn.multiselectsplitter.VERSION = "1.0.1";
}(jQuery);

/***/ }),

/***/ "./resources/assets/plugins/bootstrap-session-timeout/dist/bootstrap-session-timeout.js":
/*!**********************************************************************************************!*\
  !*** ./resources/assets/plugins/bootstrap-session-timeout/dist/bootstrap-session-timeout.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * bootstrap-session-timeout
 * www.orangehilldev.com
 *
 * Copyright (c) 2014 Vedran Opacic
 * Licensed under the MIT license.
 */
(function ($) {
  /*jshint multistr: true */
  'use strict';

  $.sessionTimeout = function (options) {
    var defaults = {
      title: 'Your Session is About to Expire!',
      message: 'Your session is about to expire.',
      logoutButton: 'Logout',
      keepAliveButton: 'Stay Connected',
      keepAliveUrl: '/keep-alive',
      ajaxType: 'POST',
      ajaxData: '',
      redirUrl: '/timed-out',
      logoutUrl: '/log-out',
      warnAfter: 900000,
      // 15 minutes
      redirAfter: 1200000,
      // 20 minutes
      keepAliveInterval: 5000,
      keepAlive: true,
      ignoreUserActivity: false,
      onStart: false,
      onWarn: false,
      onRedir: false,
      countdownMessage: false,
      countdownBar: false,
      countdownSmart: false
    };
    var opt = defaults,
        timer,
        countdown = {}; // Extend user-set options over defaults

    if (options) {
      opt = $.extend(defaults, options);
    } // Some error handling if options are miss-configured


    if (opt.warnAfter >= opt.redirAfter) {
      console.error('Bootstrap-session-timeout plugin is miss-configured. Option "redirAfter" must be equal or greater than "warnAfter".');
      return false;
    } // Unless user set his own callback function, prepare bootstrap modal elements and events


    if (typeof opt.onWarn !== 'function') {
      // If opt.countdownMessage is defined add a coundown timer message to the modal dialog
      var countdownMessage = opt.countdownMessage ? '<p>' + opt.countdownMessage.replace(/{timer}/g, '<span class="countdown-holder"></span>') + '</p>' : '';
      var coundownBarHtml = opt.countdownBar ? '<div class="progress"> \
                  <div class="progress-bar progress-bar-striped countdown-bar active" role="progressbar" style="min-width: 15px; width: 100%;"> \
                    <span class="countdown-holder"></span> \
                  </div> \
                </div>' : ''; // Create timeout warning dialog

      $('body').append('<div class="modal fade" id="session-timeout-dialog"> \
              <div class="modal-dialog"> \
                <div class="modal-content"> \
                  <div class="modal-header"> \
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button> \
                    <h4 class="modal-title">' + opt.title + '</h4> \
                  </div> \
                  <div class="modal-body"> \
                    <p>' + opt.message + '</p> \
                    ' + countdownMessage + ' \
                    ' + coundownBarHtml + ' \
                  </div> \
                  <div class="modal-footer"> \
                    <button id="session-timeout-dialog-logout" type="button" class="btn btn-default">' + opt.logoutButton + '</button> \
                    <button id="session-timeout-dialog-keepalive" type="button" class="btn btn-primary" data-dismiss="modal">' + opt.keepAliveButton + '</button> \
                  </div> \
                </div> \
              </div> \
             </div>'); // "Logout" button click

      $('#session-timeout-dialog-logout').on('click', function () {
        window.location = opt.logoutUrl;
      }); // "Stay Connected" button click

      $('#session-timeout-dialog').on('hide.bs.modal', function () {
        // Restart session timer
        startSessionTimer();
      });
    } // Reset timer on any of these events


    if (!opt.ignoreUserActivity) {
      var mousePosition = [-1, -1];
      $(document).on('keyup mouseup mousemove touchend touchmove', function (e) {
        if (e.type === 'mousemove') {
          // Solves mousemove even when mouse not moving issue on Chrome:
          // https://code.google.com/p/chromium/issues/detail?id=241476
          if (e.clientX === mousePosition[0] && e.clientY === mousePosition[1]) {
            return;
          }

          mousePosition[0] = e.clientX;
          mousePosition[1] = e.clientY;
        }

        startSessionTimer(); // If they moved the mouse not only reset the counter
        // but remove the modal too!

        if ($('#session-timeout-dialog').length > 0 && $('#session-timeout-dialog').data('bs.modal') && $('#session-timeout-dialog').data('bs.modal').isShown) {
          // http://stackoverflow.com/questions/11519660/twitter-bootstrap-modal-backdrop-doesnt-disappear
          $('#session-timeout-dialog').modal('hide');
          $('body').removeClass('modal-open');
          $('div.modal-backdrop').remove();
        }
      });
    } // Keeps the server side connection live, by pingin url set in keepAliveUrl option.
    // KeepAlivePinged is a helper var to ensure the functionality of the keepAliveInterval option


    var keepAlivePinged = false;

    function keepAlive() {
      if (!keepAlivePinged) {
        // Ping keepalive URL using (if provided) data and type from options
        $.ajax({
          type: opt.ajaxType,
          url: opt.keepAliveUrl,
          data: opt.ajaxData
        });
        keepAlivePinged = true;
        setTimeout(function () {
          keepAlivePinged = false;
        }, opt.keepAliveInterval);
      }
    }

    function startSessionTimer() {
      // Clear session timer
      clearTimeout(timer);

      if (opt.countdownMessage || opt.countdownBar) {
        startCountdownTimer('session', true);
      }

      if (typeof opt.onStart === 'function') {
        opt.onStart(opt);
      } // If keepAlive option is set to "true", ping the "keepAliveUrl" url


      if (opt.keepAlive) {
        keepAlive();
      } // Set session timer


      timer = setTimeout(function () {
        // Check for onWarn callback function and if there is none, launch dialog
        if (typeof opt.onWarn !== 'function') {
          $('#session-timeout-dialog').modal('show');
        } else {
          opt.onWarn(opt);
        } // Start dialog timer


        startDialogTimer();
      }, opt.warnAfter);
    }

    function startDialogTimer() {
      // Clear session timer
      clearTimeout(timer);

      if (!$('#session-timeout-dialog').hasClass('in') && (opt.countdownMessage || opt.countdownBar)) {
        // If warning dialog is not already open and either opt.countdownMessage
        // or opt.countdownBar are set start countdown
        startCountdownTimer('dialog', true);
      } // Set dialog timer


      timer = setTimeout(function () {
        // Check for onRedir callback function and if there is none, launch redirect
        if (typeof opt.onRedir !== 'function') {
          window.location = opt.redirUrl;
        } else {
          opt.onRedir(opt);
        }
      }, opt.redirAfter - opt.warnAfter);
    }

    function startCountdownTimer(type, reset) {
      // Clear countdown timer
      clearTimeout(countdown.timer);

      if (type === 'dialog' && reset) {
        // If triggered by startDialogTimer start warning countdown
        countdown.timeLeft = Math.floor((opt.redirAfter - opt.warnAfter) / 1000);
      } else if (type === 'session' && reset) {
        // If triggered by startSessionTimer start full countdown
        // (this is needed if user doesn't close the warning dialog)
        countdown.timeLeft = Math.floor(opt.redirAfter / 1000);
      } // If opt.countdownBar is true, calculate remaining time percentage


      if (opt.countdownBar && type === 'dialog') {
        countdown.percentLeft = Math.floor(countdown.timeLeft / ((opt.redirAfter - opt.warnAfter) / 1000) * 100);
      } else if (opt.countdownBar && type === 'session') {
        countdown.percentLeft = Math.floor(countdown.timeLeft / (opt.redirAfter / 1000) * 100);
      } // Set countdown message time value


      var countdownEl = $('.countdown-holder');
      var secondsLeft = countdown.timeLeft >= 0 ? countdown.timeLeft : 0;

      if (opt.countdownSmart) {
        var minLeft = Math.floor(secondsLeft / 60);
        var secRemain = secondsLeft % 60;
        var countTxt = minLeft > 0 ? minLeft + 'm' : '';

        if (countTxt.length > 0) {
          countTxt += ' ';
        }

        countTxt += secRemain + 's';
        countdownEl.text(countTxt);
      } else {
        countdownEl.text(secondsLeft + "s");
      } // Set countdown message time value


      if (opt.countdownBar) {
        $('.countdown-bar').css('width', countdown.percentLeft + '%');
      } // Countdown by one second


      countdown.timeLeft = countdown.timeLeft - 1;
      countdown.timer = setTimeout(function () {
        // Call self after one second
        startCountdownTimer(type);
      }, 1000);
    } // Start session timer


    startSessionTimer();
  };
})(jQuery);

/***/ }),

/***/ "./resources/assets/plugins/flaticon/flaticon.css":
/*!********************************************************!*\
  !*** ./resources/assets/plugins/flaticon/flaticon.css ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js??ref--16-1!../../../../node_modules/postcss-loader/src??ref--16-2!./flaticon.css */ "./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./resources/assets/plugins/flaticon/flaticon.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./resources/assets/plugins/flaticon/font/Flaticon.eot":
/*!*************************************************************!*\
  !*** ./resources/assets/plugins/flaticon/font/Flaticon.eot ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon.eot?35d544eaaa4cf3c6355866280d53ba73");

/***/ }),

/***/ "./resources/assets/plugins/flaticon/font/Flaticon.svg":
/*!*************************************************************!*\
  !*** ./resources/assets/plugins/flaticon/font/Flaticon.svg ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon.svg?500d63cca8c534718b1d202b2076d218");

/***/ }),

/***/ "./resources/assets/plugins/flaticon/font/Flaticon.ttf":
/*!*************************************************************!*\
  !*** ./resources/assets/plugins/flaticon/font/Flaticon.ttf ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon.ttf?3e4331ee31764c999add7e0b048c4ba3");

/***/ }),

/***/ "./resources/assets/plugins/flaticon/font/Flaticon.woff":
/*!**************************************************************!*\
  !*** ./resources/assets/plugins/flaticon/font/Flaticon.woff ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon.woff?5be3e43c13c3eb021d15e6682d098d4c");

/***/ }),

/***/ "./resources/assets/plugins/flaticon2/flaticon.css":
/*!*********************************************************!*\
  !*** ./resources/assets/plugins/flaticon2/flaticon.css ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js??ref--16-1!../../../../node_modules/postcss-loader/src??ref--16-2!./flaticon.css */ "./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./resources/assets/plugins/flaticon2/flaticon.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./resources/assets/plugins/flaticon2/font/Flaticon2.eot":
/*!***************************************************************!*\
  !*** ./resources/assets/plugins/flaticon2/font/Flaticon2.eot ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon2.eot?29586ff0f963f4d1fdfc182822b8b27a");

/***/ }),

/***/ "./resources/assets/plugins/flaticon2/font/Flaticon2.svg":
/*!***************************************************************!*\
  !*** ./resources/assets/plugins/flaticon2/font/Flaticon2.svg ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon2.svg?4248a89254d2c6c396d85e378184c54f");

/***/ }),

/***/ "./resources/assets/plugins/flaticon2/font/Flaticon2.ttf":
/*!***************************************************************!*\
  !*** ./resources/assets/plugins/flaticon2/font/Flaticon2.ttf ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon2.ttf?eafcbac04cdb0a39fe38a36ebd786290");

/***/ }),

/***/ "./resources/assets/plugins/flaticon2/font/Flaticon2.woff":
/*!****************************************************************!*\
  !*** ./resources/assets/plugins/flaticon2/font/Flaticon2.woff ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/Flaticon2.woff?b242ac810bd8cccaa03abc2128b7c3c3");

/***/ }),

/***/ "./resources/assets/plugins/line-awesome/css/line-awesome.css":
/*!********************************************************************!*\
  !*** ./resources/assets/plugins/line-awesome/css/line-awesome.css ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../../node_modules/css-loader/dist/cjs.js??ref--16-1!../../../../../node_modules/postcss-loader/src??ref--16-2!./line-awesome.css */ "./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./resources/assets/plugins/line-awesome/css/line-awesome.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./resources/assets/plugins/line-awesome/fonts/line-awesome.eot?":
/*!******************************************************************************!*\
  !*** ./resources/assets/plugins/line-awesome/fonts/line-awesome.eot??v=1.1. ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/line-awesome.eot?3f85d8035b4ccd91d2a1808dd22b7684");

/***/ }),

/***/ "./resources/assets/plugins/line-awesome/fonts/line-awesome.eot?v=1.1.":
/*!*****************************************************************************!*\
  !*** ./resources/assets/plugins/line-awesome/fonts/line-awesome.eot?v=1.1. ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/line-awesome.eot?3f85d8035b4ccd91d2a1808dd22b7684");

/***/ }),

/***/ "./resources/assets/plugins/line-awesome/fonts/line-awesome.svg?v=1.1.":
/*!*****************************************************************************!*\
  !*** ./resources/assets/plugins/line-awesome/fonts/line-awesome.svg?v=1.1. ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/line-awesome.svg?5207295c5bccd6e7442cfb261446c1f7");

/***/ }),

/***/ "./resources/assets/plugins/line-awesome/fonts/line-awesome.ttf?v=1.1.":
/*!*****************************************************************************!*\
  !*** ./resources/assets/plugins/line-awesome/fonts/line-awesome.ttf?v=1.1. ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/line-awesome.ttf?4d42f5f0c62a8f51e876c14575354a6e");

/***/ }),

/***/ "./resources/assets/plugins/line-awesome/fonts/line-awesome.woff2?v=1.1.":
/*!*******************************************************************************!*\
  !*** ./resources/assets/plugins/line-awesome/fonts/line-awesome.woff2?v=1.1. ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/line-awesome.woff2?452a5b42cb4819f09d35bcf6cbdb24c1");

/***/ }),

/***/ "./resources/assets/plugins/line-awesome/fonts/line-awesome.woff?v=1.1.":
/*!******************************************************************************!*\
  !*** ./resources/assets/plugins/line-awesome/fonts/line-awesome.woff?v=1.1. ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/fonts/line-awesome.woff?8b1290595e57e1d49d95ff3fa1129ecc");

/***/ }),

/***/ "./resources/assets/sass/global/layout/aside/skins/dark.scss":
/*!*******************************************************************!*\
  !*** ./resources/assets/sass/global/layout/aside/skins/dark.scss ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/global/layout/aside/skins/light.scss":
/*!********************************************************************!*\
  !*** ./resources/assets/sass/global/layout/aside/skins/light.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/global/layout/brand/skins/dark.scss":
/*!*******************************************************************!*\
  !*** ./resources/assets/sass/global/layout/brand/skins/dark.scss ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/global/layout/brand/skins/light.scss":
/*!********************************************************************!*\
  !*** ./resources/assets/sass/global/layout/brand/skins/light.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/global/layout/header/skins/base/dark.scss":
/*!*************************************************************************!*\
  !*** ./resources/assets/sass/global/layout/header/skins/base/dark.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/global/layout/header/skins/base/light.scss":
/*!**************************************************************************!*\
  !*** ./resources/assets/sass/global/layout/header/skins/base/light.scss ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/global/layout/header/skins/menu/dark.scss":
/*!*************************************************************************!*\
  !*** ./resources/assets/sass/global/layout/header/skins/menu/dark.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/global/layout/header/skins/menu/light.scss":
/*!**************************************************************************!*\
  !*** ./resources/assets/sass/global/layout/header/skins/menu/light.scss ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/pages/login/login-3.scss":
/*!********************************************************!*\
  !*** ./resources/assets/sass/pages/login/login-3.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/assets/sass/pages/login/login-5.scss":
/*!********************************************************!*\
  !*** ./resources/assets/sass/pages/login/login-5.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../assets/js/webpack/vendors/global.js */ "./resources/assets/js/webpack/vendors/global.js");

__webpack_require__(/*! ../assets/js/webpack/scripts.js */ "./resources/assets/js/webpack/scripts.js");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:

  !*** multi ./resources/js/app.js ./resources/sass/app.scss ./resources/assets/sass/global/layout/aside/skins/dark.scss ./resources/assets/sass/global/layout/aside/skins/light.scss ./resources/assets/sass/global/layout/brand/skins/dark.scss ./resources/assets/sass/global/layout/brand/skins/light.scss ./resources/assets/sass/global/layout/header/skins/base/dark.scss ./resources/assets/sass/global/layout/header/skins/base/light.scss ./resources/assets/sass/global/layout/header/skins/menu/dark.scss ./resources/assets/sass/global/layout/header/skins/menu/light.scss ./resources/assets/sass/pages/login/login-5.scss ./resources/assets/sass/pages/login/login-3.scss ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/js/app.js */"./resources/js/app.js");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/sass/app.scss */"./resources/sass/app.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/aside/skins/dark.scss */"./resources/assets/sass/global/layout/aside/skins/dark.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/aside/skins/light.scss */"./resources/assets/sass/global/layout/aside/skins/light.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/brand/skins/dark.scss */"./resources/assets/sass/global/layout/brand/skins/dark.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/brand/skins/light.scss */"./resources/assets/sass/global/layout/brand/skins/light.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/header/skins/base/dark.scss */"./resources/assets/sass/global/layout/header/skins/base/dark.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/header/skins/base/light.scss */"./resources/assets/sass/global/layout/header/skins/base/light.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/header/skins/menu/dark.scss */"./resources/assets/sass/global/layout/header/skins/menu/dark.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/global/layout/header/skins/menu/light.scss */"./resources/assets/sass/global/layout/header/skins/menu/light.scss");
__webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/pages/login/login-5.scss */"./resources/assets/sass/pages/login/login-5.scss");
module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/contasoft/resources/assets/sass/pages/login/login-3.scss */"./resources/assets/sass/pages/login/login-3.scss");


/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

},[[0,"/js/manifest","/js/vendor"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,